WEBVTT

1
00:00:00.012 --> 00:00:04.181
【未完成版本】
大家好 欢迎回来 我想给大家讲解一个例子 

2
00:00:04.181 --> 00:00:09.255
是图像处理中 关于偏微分方程和 

3
00:00:09.255 --> 00:00:12.382
变分方程的非常特殊而重要的应用 

4
00:00:12.382 --> 00:00:17.512
我们会将一些已经学过的概念 以简单的方式组合在一起 

5
00:00:17.512 --> 00:00:21.275
所以 我们马上要进行 

6
00:00:21.275 --> 00:00:25.587
基于偏微分方程的直方图修正 

7
00:00:25.587 --> 00:00:30.367
我们知道如何进行直方图修正 这在几周前已经学过了 

8
00:00:30.367 --> 00:00:34.871
现在 我会讲解如何利用偏微分方程进行直方图修改 

9
00:00:34.871 --> 00:00:39.747
其基本思想 正如我们在偏微分方程中接触的 

10
00:00:39.747 --> 00:00:43.277
我们想把图像转换为特定的目标 

11
00:00:43.277 --> 00:00:46.807
特别地 现在我们想要改变对比度 

12
00:00:46.807 --> 00:00:52.272
我们想改善对比度从而改变图像 

13
00:00:52.272 --> 00:00:57.532
于是我们可以开始思考 如何利用偏微分方程达到这一目的 

14
00:00:57.532 --> 00:01:01.086
我们希望延展图像的灰度值 

15
00:01:01.086 --> 00:01:03.521
那么 现在要怎么做呢？ 

16
00:01:03.521 --> 00:01:08.213
这时候 让我们回顾一下直方图修正 

17
00:01:08.213 --> 00:01:10.792
我们已经学过 如何做直方图修正 

18
00:01:10.792 --> 00:01:14.238
正如几周前所学的 只是简单的映射 

19
00:01:14.238 --> 00:01:18.573
这里是一个例子 说明如何利用偏微分方程 

20
00:01:18.573 --> 00:01:22.485
这就是偏微分方程 

21
00:01:22.485 --> 00:01:26.077
我们将要根据给定像素本身的值 

22
00:01:26.077 --> 00:01:32.392
减去周围大于自身像素值的像素的数量 进行图像变形 

23
00:01:32.392 --> 00:01:36.812
所以 我们有一幅图像 

24
00:01:36.812 --> 00:01:42.361
选中某一点像素 判断应该如何改变这一像素值 

25
00:01:42.361 --> 00:01:46.705
非常简单 我们考虑自身的像素值 

26
00:01:46.705 --> 00:01:52.476
然后看看周围有多少像素值是大于自身像素值的 

27
00:01:52.476 --> 00:01:56.770
再根据两者的差改变自身像素值 为什么这是在做直方图修正呢？ 

28
00:01:56.770 --> 00:02:00.742
道理也很简单 还记得我们说过 

29
00:02:00.742 --> 00:02:09.865
通常来说我们会将图像变形为目标图像 现在当你进入稳定状态 

30
00:02:09.865 --> 00:02:18.920
这个值就变成0了 所以图像的像素值就等于 

31
00:02:18.920 --> 00:02:24.755
大于自身像素值的像素的个数 

32
00:02:24.755 --> 00:02:30.772
而这就是 如果你回忆一下直方图修正的笔记 

33
00:02:30.772 --> 00:02:36.946
会发现这其实就是直方图均衡化 这是实现直方图均衡化的 

34
00:02:36.946 --> 00:02:42.805
非常有趣的方法 不需要如前面所学的那样 列出一张表格 

35
00:02:42.805 --> 00:02:46.776
我们只需要慢慢进行图像变形 来达到目的 

36
00:02:46.776 --> 00:02:52.468
现在可能你想问 为什么我一定要使用偏微分方程 

37
00:02:52.468 --> 00:02:58.287
这一个计算量远大于列表格的方法？ 

38
00:02:58.287 --> 00:03:03.979
这里有几个原因 其一 基于教育因素 

39
00:03:03.979 --> 00:03:09.726
我想给你们一个应用偏微分方程的例子 

40
00:03:09.726 --> 00:03:14.924
来实现 比如 直方图均衡化 

41
00:03:14.924 --> 00:03:19.985
另一个原因是 我们可以随时停止图像变形 

42
00:03:19.985 --> 00:03:23.531
在直方图均衡化中 我们需要计算 

43
00:03:23.531 --> 00:03:26.601
并不会直接得出结果 

44
00:03:26.601 --> 00:03:30.591
如果对比度太大 我们就会很困扰 

45
00:03:30.591 --> 00:03:33.843
而又没有办法 复原到原始图像 

46
00:03:33.843 --> 00:03:38.514
 或者得到理想图像 在这里我们可以一点点拉伸直方图  

47
00:03:38.514 --> 00:03:41.698
慢慢朝直方图均衡化的目标变形 

48
00:03:41.698 --> 00:03:45.722
但是如果我们已经满意现在的成果 

49
00:03:45.722 --> 00:03:48.797
或者现在的成果比继续完成直方图均衡化的结果还要好 

50
00:03:48.797 --> 00:03:53.272
那么我们也可以在得到最终结果前停下来 

51
00:03:53.272 --> 00:03:56.822
【未完成版本】
这些例子说明了 

52
00:03:56.822 --> 00:04:01.397
为什么我们愿意使用偏微分方程而不是表格的原因 

53
00:04:01.397 --> 00:04:05.761
当然 与使用偏微分方程一样 

54
00:04:05.761 --> 00:04:11.828
我们也可以尝试求解变分问题 来进行对比度增强 

55
00:04:11.828 --> 00:04:14.949
这里就是一个变分问题的例子 

56
00:04:14.949 --> 00:04:19.512
同理 这里的技巧是 

57
00:04:19.512 --> 00:04:25.631
逐渐在变分问题中增加项 帮助我们实现目标 

58
00:04:25.631 --> 00:04:30.605
这里就是一个项 记得 我们尝试最优化这个项 

59
00:04:30.605 --> 00:04:35.997
或者是最小化或者是最大化 而这里是需要求最小值 

60
00:04:35.997 --> 00:04:41.230
所以这个就是我们增加的项 

61
00:04:41.230 --> 00:04:46.512
我们假设图像像素值在0到1之间 需要先做归一化 

62
00:04:46.512 --> 00:04:50.983
以便像素值规范在0和1之间 我们现在想改善这幅图像 

63
00:04:50.983 --> 00:04:53.873
我们不希望像素值 太过偏离平均灰度值 

64
00:04:53.873 --> 00:04:57.824
于是用这一项达到我们的要求 

65
00:04:57.824 --> 00:05:01.973
另一方面 我们也需要改善对比度 所以这里是对比度   

66
00:05:01.973 --> 00:05:05.356
我们不希望像素值都是一样的 

67
00:05:05.356 --> 00:05:10.712
如果我们没有这一项 或者去掉这一项 

68
00:05:10.712 --> 00:05:16.192
结果会是这个常量的一半 所有的像素值都聚集在中间 

69
00:05:16.192 --> 00:05:19.387
这并不是我们想要的 

70
00:05:19.387 --> 00:05:25.277
我们想要像素值很好地分布 正如这里所表示的 

71
00:05:25.277 --> 00:05:29.267
我们也需要对比度 注意这里有一个减号 

72
00:05:29.267 --> 00:05:34.257
而且 因为我希望像素值分散开来 

73
00:05:34.257 --> 00:05:40.339
但是我们又不想它们分散得太远 这就是为什么需要添加其他的项 

74
00:05:40.339 --> 00:05:44.224
现在 我们有积分 

75
00:05:44.224 --> 00:05:50.534
我要在什么范围计算积分呢？ 我需要对整幅图像进行计算吗？ 

76
00:05:50.534 --> 00:05:56.274
现在 这也是你的策略 你可以要求 

77
00:05:56.274 --> 00:06:01.455
只在图像的某些区域改善对比度 所以只需要对这些区域做积分 

78
00:06:01.455 --> 00:06:06.750
或者你可以说 

79
00:06:06.750 --> 00:06:10.677
我只要对特定范围的像素值改善对比度 

80
00:06:10.677 --> 00:06:15.987
我们可以极具创意性地设计这一个变分式子 

81
00:06:15.987 --> 00:06:19.252
直接使用偏微分方程也是一样的 

82
00:06:19.252 --> 00:06:23.577
实现一些 在查询表格中不能做到的事 

83
00:06:23.577 --> 00:06:28.282
表格法就像是一对一 从这里到那里 没有中间结果 

84
00:06:28.282 --> 00:06:33.844
而这里给我们许多灵活性 从而变得更具创意 

85
00:06:33.844 --> 00:06:38.644
让我们来看看一些成果 这里有两个例子 

86
00:06:38.644 --> 00:06:44.195
这个是对比度增强 有趣的是 

87
00:06:44.195 --> 00:06:48.252
你们可能注意到了 这是局部性的 

88
00:06:48.252 --> 00:06:54.824
每一个区域 都是根据本身进行变换 区域间没有混杂 

89
00:06:54.824 --> 00:07:00.700
这是通过 抱歉 是通过集成边界实现的 

90
00:07:00.700 --> 00:07:06.592
并且确保相似的像素值 

91
00:07:06.592 --> 00:07:12.024
或者 这里的相同的像素值 

92
00:07:12.024 --> 00:07:15.703
都能聚集到一起  所以这是一个仿真图像的例子 

93
00:07:15.703 --> 00:07:21.158
用来说明 变分方程如何帮助我们增强对比度 

94
00:07:21.158 --> 00:07:24.639
而又保持了图像的形状 

95
00:07:24.639 --> 00:07:27.982
这里是另一个自然图像的例子 

96
00:07:27.982 --> 00:07:33.302
我希望你可以通过视频欣赏到 这是非常暗的图像 

97
00:07:33.302 --> 00:07:38.540
而这里得到了一张更加鲜艳 更加漂亮的图像 

98
00:07:38.540 --> 00:07:43.457
这两个例子都利用PDEs 或者变分方程来实现增强 

99
00:07:43.457 --> 00:07:47.236
这里的两个不同的例子 

100
00:07:47.236 --> 00:07:52.775
一个实现了某种性能 另一个实现另一种性能 

101
00:07:52.775 --> 00:07:58.522
而通过调整积分范围和积分项 

102
00:07:58.522 --> 00:08:04.086
我们可以实现这一类对比度增强的应用 

103
00:08:04.086 --> 00:08:07.985
希望大家喜欢这个例子 

104
00:08:07.985 --> 00:08:14.276
它说明了PDEs的概念 当PDEs到达稳定状态后 

105
00:08:14.276 --> 00:08:20.319
几乎可以实现我们想要的任意效果 同时也说明了 

106
00:08:20.319 --> 00:08:25.787
如何为极其重要的对比度增强应用 设计变分方程 

107
00:08:25.787 --> 00:08:28.540
感谢大家 

108
00:08:28.540 --> 00:08:31.651
【未完成版本】
期待在之后的视频中再见