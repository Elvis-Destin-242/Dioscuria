WEBVTT

1
00:00:00.000 --> 00:00:06.103
大家好 欢迎来到第6周的课程 

2
00:00:06.103 --> 00:00:10.610
本周我们将学习图像处理中的偏微分方程 

3
00:00:10.610 --> 00:00:15.171
大家也许还记得 什么是偏微分方程 

4
00:00:15.171 --> 00:00:18.413
但也许有的人已经不记得什么时候学过了 

5
00:00:18.413 --> 00:00:22.134
可能是很久以前 也可能是几年前 

6
00:00:22.134 --> 00:00:26.515
但是不用担心 因为每周的课程都是独立自给式的 

7
00:00:26.515 --> 00:00:29.877
在详细讲述这周内容之前 

8
00:00:29.877 --> 00:00:34.798
我将为大家大致介绍一下偏微分方程 

9
00:00:34.798 --> 00:00:38.640
以及这个新的领域 

10
00:00:38.640 --> 00:00:44.670
相对而言 这是图像处理中的一个新领域 在我们的课程中也是如此 

11
00:00:44.670 --> 00:00:50.227
迄今为止 我们对计算机中离散形式的图像已经有了一定的认识 

12
00:00:50.227 --> 00:00:53.340
以这幅静态图像为例 

13
00:00:53.340 --> 00:00:58.707
这幅图像看起来是连续的 但实际上 

14
00:00:58.707 --> 00:01:03.667
它是很多个像素点组成的 就像这儿展示的一个二维像素矩阵 

15
00:01:03.667 --> 00:01:08.899
我们已经讨论过分辨率 这些像素点挨得如此之紧 

16
00:01:08.899 --> 00:01:14.334
以至于这幅图像看起来像是连续的 

17
00:01:14.334 --> 00:01:19.362
但实际上是离散的 它在计算机中作为一个离散对象显示 

18
00:01:19.362 --> 00:01:22.420
电影也是如此 

19
00:01:22.420 --> 00:01:26.262
大家都知道 影片是由离散的画面组成的 

20
00:01:26.262 --> 00:01:32.426
看起来是连续的动画 像这个影片 

21
00:01:32.426 --> 00:01:38.350
这是因为在时间上的采样很快   

22
00:01:38.350 --> 00:01:45.401
这也就是为什么我们感知到的是连续对象 但我们已经知道这是离散的 

23
00:01:45.401 --> 00:01:50.327
每秒30帧 或者每秒24帧 

24
00:01:50.327 --> 00:01:55.060
图像和视频在空间上都是离散的 

25
00:01:55.060 --> 00:01:58.413
在时间和灰度级上也是离散的 

26
00:01:58.413 --> 00:02:02.804
它们看起来是连续的但实际上是离散的 

27
00:02:02.804 --> 00:02:08.890
现在 我们回顾一下前五周所学的 

28
00:02:08.890 --> 00:02:15.361
我们使用了离散表示法和离散数学的工具 

29
00:02:15.361 --> 00:02:21.139
因为在计算机里 我们面对的是离散的对象 

30
00:02:21.139 --> 00:02:27.276
那么偏微分方程有什么不同呢？ 

31
00:02:27.276 --> 00:02:33.199
不同在于我们将会考虑连续的对象 

32
00:02:33.199 --> 00:02:38.515
 用离散对象表示图像或视频的时候 我们总是谈论求和  

33
00:02:38.515 --> 00:02:42.539
我们从来没有涉及过积分 

34
00:02:42.539 --> 00:02:47.020
我们总是讨论求和离散运算 

35
00:02:47.020 --> 00:02:52.333
同样地 每当遇到某种连续运算 比如导数 

36
00:02:52.333 --> 00:02:57.717
导数是微积分中针对连续对象的运算 我们把它离散化 

37
00:02:57.717 --> 00:03:01.330
记住 我们谈论的例子是导数 

38
00:03:01.330 --> 00:03:07.278
导数表示沿着某个方向求导 我们可以在这里构造一个+1和-1 

39
00:03:07.278 --> 00:03:11.217
这样的话 就可以重新定义导数的离散形式 

40
00:03:11.217 --> 00:03:15.316
因为运算需要在一个离散的环境中进行 

41
00:03:15.316 --> 00:03:20.411
我们想要在离散空间进行处理 但从偏微分方程的角度来说 

42
00:03:20.411 --> 00:03:26.279
不应该局限于这个条件 偏微分方程的应用领域 

43
00:03:26.279 --> 00:03:31.718
有一个完全不同的方法 图像是连续的对象 

44
00:03:31.718 --> 00:03:37.013
不该将其作为离散的对象来处理 这只是计算机处理的人为产物 

45
00:03:37.013 --> 00:03:40.520
图像本来就应该被看成是连续的 

46
00:03:40.520 --> 00:03:46.108
接下来就要用无穷小算子的迭代运算进行图像处理 

47
00:03:46.108 --> 00:03:51.841
无穷小算子迭代运算是在很小的范围内进行迭代 

48
00:03:51.841 --> 00:03:56.340
在迭代过程中 实际上 

49
00:03:56.340 --> 00:04:01.565
就得到了偏微分方程 如果你一下子没有明白这是怎么回事 

50
00:04:01.565 --> 00:04:07.299
在接下来的视频中会为你详细解释 

51
00:04:07.299 --> 00:04:10.710
不要担心那个问题 关键概念在这儿 

52
00:04:10.710 --> 00:04:14.515
图像不是离散的而是连续的 

53
00:04:14.515 --> 00:04:19.236
因此运用连续域中所有的算法 

54
00:04:19.236 --> 00:04:22.921
将图像当做连续的对象 

55
00:04:22.921 --> 00:04:28.978
然后就可以使用偏微分方程和微分几何 

56
00:04:28.978 --> 00:04:33.234
以及其他连续域的数学方法 

57
00:04:33.234 --> 00:04:39.208
突然间 这些工具都能用了 它们在离散图像处理中十分强大   

58
00:04:39.208 --> 00:04:43.873
但你会马上发现一个问题 

59
00:04:43.873 --> 00:04:49.930
现在有了这么多连续域的方法 但我计算机中的图像还是离散的 

60
00:04:49.930 --> 00:04:54.067
不用担心 这有一个解决方法 那就是数值分析 

61
00:04:54.067 --> 00:05:00.877
数值分析可以告诉我怎样实现连续域的算法 

62
00:05:00.877 --> 00:05:05.446
如何在离散域中 比如计算机中 利用连续域的数学工具   

63
00:05:05.446 --> 00:05:11.825
因此能继续利用连续域的数学工具开发算法 

64
00:05:11.825 --> 00:05:18.576
然后采用数值分析 

65
00:05:18.576 --> 00:05:23.443
使得可以在计算机中实现这些算法 

66
00:05:23.443 --> 00:05:28.804
所以这是一种不同的范式 它既不更好 也不更差 

67
00:05:28.804 --> 00:05:35.073
仅仅是与我们之前用过的范式不同而已 

68
00:05:35.073 --> 00:05:39.280
之前我们一开始就把图像当作离散的来考虑 

69
00:05:39.280 --> 00:05:40.980
现在为什么不了呢？ 

70
00:05:40.980 --> 00:05:45.460
现在为什么会出现这些？ 接下来又会怎样？ 

71
00:05:45.460 --> 00:05:51.360
为什么要改变 不再用离散的方法？ 

72
00:05:51.360 --> 00:05:57.572
这么多年 离散化在处理图像和视频中可谓历史悠久 

73
00:05:57.572 --> 00:06:03.687
直到差不多十年前 连续性计算工具开始出现在图像处理中 

74
00:06:03.687 --> 00:06:10.277
究其原因 其一 计算机飞速发展 功能愈加强大 

75
00:06:10.277 --> 00:06:16.465
其二 从前无法利用计算机计算的连续数学 【未完成版本】 

76
00:06:16.465 --> 00:06:22.893
数值算法使之成为可能 

77
00:06:22.893 --> 00:06:26.510
甚至在这些小巧的个人电脑上 

78
00:06:26.510 --> 00:06:32.112
当然 每个新工具的出现都经过了人们的努力 

79
00:06:32.112 --> 00:06:37.023
我们永远不要忘记他们的贡献 近十年来 

80
00:06:37.023 --> 00:06:42.487
很多对连续性数学感兴趣的人 也渐渐地对图像处理产生了兴趣 

81
00:06:42.487 --> 00:06:47.537
他们将这些工具和自身的专长应用到图像处理上 

82
00:06:47.537 --> 00:06:50.995
现在我们会看一些例子 

83
00:06:50.995 --> 00:06:55.353
为大家介绍一下背景知识 

84
00:06:55.353 --> 00:06:57.331
但连续域图像处理的研究又给我们带来了什么呢？ 

85
00:06:57.331 --> 00:07:01.390
它将带来许多东西 比如新的概念 

86
00:07:01.390 --> 00:07:06.259
它引入了精度 这非常重要 

87
00:07:06.259 --> 00:07:11.282
因为现在处于一个连续的空间 通过数值算法来执行 

88
00:07:11.282 --> 00:07:14.565
精度将依赖于算法的实施 

89
00:07:14.565 --> 00:07:18.382
而不是算法的设计 

90
00:07:18.382 --> 00:07:22.811
算法是在连续域中设计的 

91
00:07:22.811 --> 00:07:27.392
因此没有内在的精度 而是取决于我愿意投入多少的运算和资源 

92
00:07:27.392 --> 00:07:33.194
给大家举一个计算的例子 在实施过程中 

93
00:07:33.194 --> 00:07:38.768
就决定了算法的精度 对于算法来说 这不是固有的 

94
00:07:38.768 --> 00:07:44.117
但我们用+1和-1定义导数时 

95
00:07:44.117 --> 00:07:47.938
实际上就已经定义了算法的精度 

96
00:07:47.938 --> 00:07:52.203
现在 如果我在连续域中进行定义 

97
00:07:52.203 --> 00:07:56.112
尽你最大的努力 提高导数的精度 

98
00:07:56.112 --> 00:08:01.000
这样就为高精度的技术保留了可能性 

99
00:08:01.000 --> 00:08:06.427
另外一个 我们不准备在课堂上进行说明 

100
00:08:06.427 --> 00:08:10.067
当然也不是这周 那就是形式分析 

101
00:08:10.067 --> 00:08:14.832
许多用于图像处理的偏微分方程方面的技术 

102
00:08:14.832 --> 00:08:18.538
都有非常形式化的分析 

103
00:08:18.538 --> 00:08:23.767
你可以证明这些理论是对的   

104
00:08:23.767 --> 00:08:26.497
在你应用实施这些算法之前 

105
00:08:26.497 --> 00:08:31.064
所以 这是图像和视频处理中最数学化的领域之一 

106
00:08:31.064 --> 00:08:35.890
我不敢说这是最数学化的一个 但确实是最数学化的之一 

107
00:08:35.890 --> 00:08:40.753
而这样的结果是 偏微分方程这个工具 

108
00:08:40.753 --> 00:08:43.684
提供了很多种算法 

109
00:08:43.684 --> 00:08:48.947
但在我们详细讲述之前 我认为最重要的是 

110
00:08:48.947 --> 00:08:54.734
我们有新的工具和新的书籍 

111
00:08:54.734 --> 00:09:00.085
因此 当你在某个领域提出一个新的理论时 

112
00:09:00.085 --> 00:09:03.572
你可以认为 所有这些新的框架体系都已经存在 

113
00:09:03.572 --> 00:09:07.910
而且有更多的工具来解决实际问题是很好的 

114
00:09:07.910 --> 00:09:13.250
就像我们本周 还有下周将要学习到的一样 

115
00:09:13.250 --> 00:09:17.634
接下来在本周 我会给你们一些工具 

116
00:09:17.634 --> 00:09:22.548
用基本的和最简单的工具 

117
00:09:22.548 --> 00:09:26.364
去理解偏微分方程在图像处理中的应用 

118
00:09:26.364 --> 00:09:31.150
我将举一些例子 来帮助你理解 

119
00:09:31.150 --> 00:09:35.738
上周 我们讨论过主动轮廓 

120
00:09:35.738 --> 00:09:40.268
这将是偏微分方程在图像处理中应用的一个范例 

121
00:09:40.268 --> 00:09:44.857
在接下来的视频中就会看到 下个星期 

122
00:09:44.857 --> 00:09:49.328
我们会讲到图像修复 其中的一些算法 

123
00:09:49.328 --> 00:09:52.270
也是基于偏微分方程 

124
00:09:52.270 --> 00:09:56.440
如我所说 这是最数学化的领域之一   

125
00:09:56.440 --> 00:10:00.916
这是最数学化的部分之一 

126
00:10:00.916 --> 00:10:05.454
但没有什么好担心的 仅仅是向大家介绍一下基本概念 

127
00:10:05.454 --> 00:10:10.129
还有一些基本工具 这些工具有助于你们理解 

128
00:10:10.129 --> 00:10:15.216
偏微分方程应用于图像处理的基本概念 

129
00:10:15.216 --> 00:10:18.387
接下来的视频中 我们就将学习这些概念 

130
00:10:18.387 --> 00:10:22.000
谢谢