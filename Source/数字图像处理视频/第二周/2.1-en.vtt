WEBVTT

1
00:00:00.000 --> 00:00:03.441
Hello and welcome back to our image and 
video processing class. 

2
00:00:03.441 --> 00:00:07.648
This is our second week of class and we 
are going to talk about image and video 

3
00:00:07.648 --> 00:00:11.964
in compression which is probably one of 
the most successful areas of image and 

4
00:00:11.964 --> 00:00:16.116
video processing compression is used, all 
around and is actually an enabling 

5
00:00:16.116 --> 00:00:19.503
technology as we are going to see. 
If you have some background in 

6
00:00:19.503 --> 00:00:23.983
information theory or previous background 
in signal processing, some of the topics 

7
00:00:23.983 --> 00:00:28.570
in this unit will be easier for you. 
But if you don't have background in those 

8
00:00:28.570 --> 00:00:32.749
areas, don't worry because the unit is 
going to be self contained and I'm going 

9
00:00:32.749 --> 00:00:38.052
to teach you about the concepts that you 
need from those areas of information and 

10
00:00:38.052 --> 00:00:42.730
theory and signal processing so we can 
basically understand how image 

11
00:00:42.730 --> 00:00:45.725
compression, JPEG, MPEG and our 
technologies work. 

12
00:00:45.725 --> 00:00:50.716
So let's start by illustrating why do we 
need image compression. This is not too 

13
00:00:50.716 --> 00:00:53.336
hard to explain so let us do some 
numbers. 

14
00:00:53.336 --> 00:00:57.966
Let just think that we have a image that 
has a 1000 x 1000 pixels. 

15
00:00:57.966 --> 00:01:02.896
We know these actually, in today's 
standards, is actually what we call a low 

16
00:01:02.896 --> 00:01:06.512
resolution image. 
But let's just use it for the sake of 

17
00:01:06.512 --> 00:01:10.588
some numbering. 
And let's just assume that we need 8 bits 

18
00:01:10.588 --> 00:01:14.861
as is normally standard. 
8 bits to represent each one of the 

19
00:01:14.861 --> 00:01:18.082
colors, 
which means that we need 20 bits per 

20
00:01:18.082 --> 00:01:21.238
pixel. 
So we have an array, which is 1000 x 1000 

21
00:01:21.238 --> 00:01:24.327
and 20 bits to represent the three 
colors. 

22
00:01:24.327 --> 00:01:28.337
So this is one image. 
And if we are doing video, it's just one 

23
00:01:28.337 --> 00:01:33.111
frame. 
We actually need 30 of these to get one 

24
00:01:33.111 --> 00:01:39.543
second of video. 
We get 60 of these to get one minute of 

25
00:01:39.543 --> 00:01:48.077
video and then we have to multiply by 120 
to get basically about two hours of our 

26
00:01:48.077 --> 00:01:51.200
regular movie. 
So, what's these? 

27
00:01:51.200 --> 00:01:58.590
These, the result of this is a very large 
number, very, very large number. 

28
00:01:58.590 --> 00:02:04.806
And you can do offline the computation, 
but you're going to basically agree. 

29
00:02:04.806 --> 00:02:10.678
It's a very large number even for a 
relatively low resolution image. 

30
00:02:10.678 --> 00:02:16.550
So if we only have one image, we still 
have a very large number here. 

31
00:02:16.550 --> 00:02:22.194
And we won't be able to basically save a 
lot of these images in our cell phones or 

32
00:02:22.194 --> 00:02:25.526
in our computers if we don't do 
compression. 

33
00:02:25.526 --> 00:02:30.490
So, the moment we start talking about 
images and video, we immediately get 

34
00:02:30.490 --> 00:02:34.910
very, very large numbers. 
And that's why we need image compression. 

35
00:02:34.910 --> 00:02:40.030
We need to make possible to save those 
images, to save those videos, without 

36
00:02:40.030 --> 00:02:44.126
occupying so many bits in our computer or 
in our cell phone. 

37
00:02:44.126 --> 00:02:48.563
So that's a reason we need, basically, 
image and video compression. 

38
00:02:48.563 --> 00:02:52.523
The question is, why can we do image and 
video compression? 

39
00:02:52.523 --> 00:02:57.028
And there are many reasons. 
And we are going to talk about many of 

40
00:02:57.028 --> 00:03:00.388
them. 
So one of the reasons is what normally is 

41
00:03:00.388 --> 00:03:05.994
called redundancy and that's one of the 
first things that we are going to see. 

42
00:03:05.994 --> 00:03:11.816
They are not every pixel value is equal, 
some pixel values appear more, some pixel 

43
00:03:11.816 --> 00:03:15.985
values appear less. 
As we can see in this image there is a 

44
00:03:15.985 --> 00:03:21.608
lot of great values represent in this 
star, and only a few representing these 

45
00:03:21.608 --> 00:03:26.404
white lines and may be none representing 
certain colors. 

46
00:03:26.404 --> 00:03:31.790
So we actually see that there is one, 
two, three, four colors here. 

47
00:03:31.790 --> 00:03:38.100
So if this is represented with 8 bits, it 
comes up ways to use 8 bits, 256 

48
00:03:38.100 --> 00:03:43.570
possibilities to just represent 4. 
So we're going to exploit that. 

49
00:03:43.570 --> 00:03:49.039
There is another reason that we can do 
compression and there is on this a lot of 

50
00:03:49.039 --> 00:03:52.520
redundancy. 
And this is illustrated in this image. 

51
00:03:52.520 --> 00:03:57.871
So let's assume that one of these lines 
has the constant grey value. 

52
00:03:57.871 --> 00:04:01.571
Let's just say 128 for the sake of the 
example. 

53
00:04:01.571 --> 00:04:05.584
And let's imagine that this line is very, 
very long. 

54
00:04:05.584 --> 00:04:11.163
Let's assume, 10,000 pixels. 
So, they're are two ways at least, two 

55
00:04:11.163 --> 00:04:18.816
extreme ways to basically represent this. 
One is to 10,000 times say a 128. 

56
00:04:20.030 --> 00:04:25.350
That will take us 10,000 bytes or 10,000 
times 8 bits. 

57
00:04:25.350 --> 00:04:30.576
So, we're going to say 128, 128, 128, 128 
for 10,000 times. 

58
00:04:30.576 --> 00:04:37.548
That looks like a lot of waste. 
On the other hand, if I say, starting 

59
00:04:37.548 --> 00:04:43.808
here I say, 10,000 times 128. 
So I just give a number that says how 

60
00:04:43.808 --> 00:04:49.675
many times I'm going to repeat 128. 
That's much smaller amount of memory to 

61
00:04:49.675 --> 00:04:53.430
save that. 
I need to save the 128, which is the 

62
00:04:53.430 --> 00:04:59.307
pixel value, and I need to save the 
10,000, the number of times that, that 

63
00:04:59.307 --> 00:05:03.633
128 appears. 
And that's certainly much less to saving 

64
00:05:03.633 --> 00:05:07.470
those two numbers than 10,000 times 
saving 128. 

65
00:05:07.470 --> 00:05:11.822
So this an extreme case, but a very 
important, and this happens often in 

66
00:05:11.822 --> 00:05:16.850
images that we have uniform regions and 
basically some geometric coherence in the 

67
00:05:16.850 --> 00:05:19.731
image that we can exploit it to do 
compression. 

68
00:05:19.731 --> 00:05:24.574
So that's the second reason we can do 
compression and that also happens, by the 

69
00:05:24.574 --> 00:05:29.295
way, in video as we're going to see. 
The third reason we can do compression is 

70
00:05:29.295 --> 00:05:32.571
right here. 
This is a flat image constant value. 

71
00:05:32.571 --> 00:05:37.197
So basically, there is a lot of 
irrelevant information in images. 

72
00:05:37.197 --> 00:05:42.763
There's a lot of information that we 
actually don't care to save, or we don't 

73
00:05:42.763 --> 00:05:46.015
care to save in a slightly different 
fashion. 

74
00:05:46.015 --> 00:05:51.002
For example, if this is 128, maybe I 
don't care if I tell you it's 127. 

75
00:05:51.002 --> 00:05:54.204
Okay? 
And or maybe I don't care of it at all. 

76
00:05:54.204 --> 00:05:58.793
So I might not care about the exact 
value, I might not care too much about 

77
00:05:58.793 --> 00:06:02.265
the information at all. 
So there is a lot of unnecessary 

78
00:06:02.265 --> 00:06:04.994
information, information which is 
irrelevant. 

79
00:06:04.994 --> 00:06:08.156
So this are the three reasons that we can 
compress. 

80
00:06:08.156 --> 00:06:10.761
And we're going to exploit all these 
reasons. 

81
00:06:10.761 --> 00:06:14.420
And then we're going to get very large 
amounts of compression. 

82
00:06:16.160 --> 00:06:21.741
There is a lot of compression as they say 
in the literature and part of the success 

83
00:06:21.741 --> 00:06:24.931
of image compression is that it became 
standard. 

84
00:06:24.931 --> 00:06:29.981
And that's very important because if I 
save an image in my digital camera, I 

85
00:06:29.981 --> 00:06:32.772
want every computer to be able to read 
it. 

86
00:06:32.772 --> 00:06:37.955
I want to e-mail it to my friends and 
collegues and I want them to be able to 

87
00:06:37.955 --> 00:06:40.946
read it. 
So the way I save my image has to be 

88
00:06:40.946 --> 00:06:43.870
compatible with the way that others read 
it. 

89
00:06:43.870 --> 00:06:48.210
And that's why there are so many, 
basically compression standards. 

90
00:06:48.210 --> 00:06:53.351
In still images, these are three of the 
most popular, of course you know a lot 

91
00:06:53.351 --> 00:06:56.690
about JPEG. 
JPEG is what they say most should have 

92
00:06:56.690 --> 00:07:01.498
commerce use, and its going to be. 
basically, the way that we are going to 

93
00:07:01.498 --> 00:07:06.439
teach a lot of the image processing, 
image compression, in the next hour or 

94
00:07:06.439 --> 00:07:08.807
so. 
There is a JPEG-LS a less which that's 

95
00:07:08.807 --> 00:07:13.804
what's called a loss less compression so 
exactly what you see is what you compress 

96
00:07:13.804 --> 00:07:18.018
so in that case there is no irrelevant 
information everything will be 

97
00:07:18.018 --> 00:07:21.088
compressed. 
And there is the new standard JPEG-2000 

98
00:07:21.088 --> 00:07:24.460
so we're going to talk a lot about JPEG 
and JPEG-LS. 

99
00:07:24.460 --> 00:07:29.122
In video, there is also standards. 
So once again, when I take a video, save 

100
00:07:29.122 --> 00:07:33.980
it to my phone and send it to my friends, 
I want them to be able to read it. 

101
00:07:33.980 --> 00:07:37.998
For that, they need to know how I did my 
compression. 

102
00:07:37.998 --> 00:07:42.730
And of course, 
the most common ones are the MPEG family. 

103
00:07:42.730 --> 00:07:46.375
Although, there are other techniques, as 
listed here. 

104
00:07:46.375 --> 00:07:48.612
So. 
It's kind of a two sized trait. 

105
00:07:48.612 --> 00:07:53.832
Image and video compression has been so 
successful, that it made it to standards 

106
00:07:53.832 --> 00:07:59.118
that everybody uses the same techniques. 
the fact that everybody uses the same 

107
00:07:59.118 --> 00:08:03.163
techniques also made it very, very 
successful and very popular. 

108
00:08:03.163 --> 00:08:08.057
Now, digital camera manufacturers can 
confidently, with confidence, basically 

109
00:08:08.057 --> 00:08:12.363
use JPEG because they know that everybody 
will be able to read it. 

110
00:08:12.363 --> 00:08:16.080
And that's why they are comfortable using 
it. 

111
00:08:16.080 --> 00:08:22.151
General image impression techniques, that 
exploit all the types of issues, that I 

112
00:08:22.151 --> 00:08:26.401
mentioned a couple of slides, slides ago, 
work as follows. 

113
00:08:26.401 --> 00:08:31.826
There is, so you start from the image. 
Under is a mapper, so we take this array 

114
00:08:31.826 --> 00:08:36.928
that we talked in the previous week, of 
let's say 1,000 by a 1,000 points and we 

115
00:08:36.928 --> 00:08:40.787
transform it in a way that is more 
friendly to compression. 

116
00:08:40.787 --> 00:08:45.366
And we're going to talk about these maps. 
Some of these maps are going to be 

117
00:08:45.366 --> 00:08:49.879
related to fully transforms, and is 
actually a cosine transform. 

118
00:08:49.879 --> 00:08:54.327
Some of these maps are going to be 
actually in the spatial domain, just 

119
00:08:54.327 --> 00:08:58.710
looking at neighbor, neighboring pixels. 
We're going to talk about that. 

120
00:08:58.710 --> 00:09:04.423
Then after that mapping, which basically 
brings the image into a space friendly to 

121
00:09:04.423 --> 00:09:06.841
compression, 
there is quantization. 

122
00:09:06.841 --> 00:09:09.859
We have already talked about 
quantization. 

123
00:09:09.859 --> 00:09:13.596
Quantization is the main step that 
introduces error. 

124
00:09:13.596 --> 00:09:19.201
That introduces something that helps the 
compression, but limits me from being 

125
00:09:19.201 --> 00:09:24.591
able to reconstruct exactly the image. 
So, for example, we might have a pixel 

126
00:09:24.591 --> 00:09:30.862
value, as we saw last time about 17. 
And my quantication technique might say 

127
00:09:30.862 --> 00:09:35.974
that I need to divide by 2. 
And basically round it to the closest 

128
00:09:35.974 --> 00:09:41.700
integer from below and then multiply by 
two, something that we talked last time. 

129
00:09:41.700 --> 00:09:48.006
So I will end that with reconstructing, 
instead of 17, I will reconstruct 16. 

130
00:09:48.006 --> 00:09:51.123
So I introduce error by doing 
quantization. 

131
00:09:51.123 --> 00:09:56.849
And we're going to describe some of the 
best rechniques to do quantization, and 

132
00:09:56.849 --> 00:10:02.502
actually also the quantization that is 
used in JPEG which is basically of the 

133
00:10:02.502 --> 00:10:07.863
type I just wrote here. 
The last part is the symbol in color. 

134
00:10:07.863 --> 00:10:10.639
Okay. 
I have done my, I have done my mapping, I 

135
00:10:10.639 --> 00:10:14.833
have done my quantization. 
Now I have a value in my hand that I need 

136
00:10:14.833 --> 00:10:18.164
to transmit. 
And I want the receiver on the other side 

137
00:10:18.164 --> 00:10:22.357
to get exactly that number. 
That's where information theory comes 

138
00:10:22.357 --> 00:10:27.081
into play because information theory 
tells us how to do this very, very 

139
00:10:27.081 --> 00:10:31.471
efficiently, both in computational time 
and to achieve compression. 

140
00:10:31.471 --> 00:10:36.727
This is the one that's going to basically 
exploit the redundancy that there is in 

141
00:10:36.727 --> 00:10:41.850
the image from the point of view of using 
some pixel values more than others. 

142
00:10:41.850 --> 00:10:44.240
And we're actually going to start from 
this. 

143
00:10:44.240 --> 00:10:49.273
That basically says, now I have done 
everything I need to do to my image. 

144
00:10:49.273 --> 00:10:52.490
I want you to store or to transmit that 
pixel. 

145
00:10:52.490 --> 00:10:57.741
Then, once you have compressed the image, 
you basically have a file with a 

146
00:10:57.741 --> 00:11:02.345
compression that's the encoder. 
The one that takes the image and 

147
00:11:02.345 --> 00:11:06.086
compresses it. 
The decoder will basically decode the 

148
00:11:06.086 --> 00:11:09.108
symbol. 
It won't do, basically, a quantization, 

149
00:11:09.108 --> 00:11:12.512
because the quantization is done and then 
colored. 

150
00:11:12.512 --> 00:11:16.323
It might reverse it, for example, 
multiplying back by two. 

151
00:11:16.323 --> 00:11:21.633
And then it will do the inverse of the 
map, and it will give you an image that 

152
00:11:21.633 --> 00:11:27.010
might be the exact image if this is a 
lossless compression with no error, or it 

153
00:11:27.010 --> 00:11:32.115
might be an approximation of the image, 
very often an approximation that we 

154
00:11:32.115 --> 00:11:36.131
cannot, with our naked eyes, actually 
realize the difference. 

155
00:11:36.131 --> 00:11:40.400
So it would be a great approximation, 
like in JPEG or MPEG. 

156
00:11:40.400 --> 00:11:45.713
So, that's basically the whole steps. 
And this also explains why we need 

157
00:11:45.713 --> 00:11:49.604
standards. 
If I use certain mapper the decoder needs 

158
00:11:49.604 --> 00:11:55.666
to understand the mapper so he can, he or 
she can invert it and I need to explain 

159
00:11:55.666 --> 00:12:01.204
to the decoder the symbols coding that 
are used so the decoder can do the 

160
00:12:01.204 --> 00:12:06.879
reverse of that symbol code. 
JPEG is an example of this. 

161
00:12:06.879 --> 00:12:12.481
And as I say, we're going to basically 
explain how JPEG works. 

162
00:12:12.481 --> 00:12:16.982
JPEG takes an image, and divides it in 
sub images. 

163
00:12:16.982 --> 00:12:22.860
I mean, it would take a whole image, and 
will divide it in blocks. 

164
00:12:22.860 --> 00:12:27.937
In particular, these blocks are going to 
be 8 by 8 pixels and we're going to see 

165
00:12:27.937 --> 00:12:30.143
why is that. 
Then that's a transform. 

166
00:12:30.143 --> 00:12:34.620
This is the mapping we just took. 
In this case just going to be a discrete, 

167
00:12:34.620 --> 00:12:39.821
close entrance form, and we're going to 
explicitly talk about it, write down the 

168
00:12:39.821 --> 00:12:43.860
formula's, and explain why this is a 
transform that is used. 

169
00:12:43.860 --> 00:12:47.259
It's going to do quantization of the type 
I just mentioned. 

170
00:12:47.259 --> 00:12:51.226
Basically a JPEG is going to divide by a 
number and, and basically round it. 

171
00:12:51.226 --> 00:12:55.415
Okay? it's going to divide by different 
numbers there's going to be some 

172
00:12:55.415 --> 00:12:59.867
adaptation that we are going to explain. 
And then, once it has done that, it's 

173
00:12:59.867 --> 00:13:04.424
going to do a symbol in color which is 
half man code which we're going to 

174
00:13:04.424 --> 00:13:07.749
explain this way. 
But this is all what is done in JPEG. 

175
00:13:07.749 --> 00:13:12.430
And you're going to see one of the 
optional homeworks I give you for the end 

176
00:13:12.430 --> 00:13:16.125
of this unit is actually to implement 
JPEG in your computer. 

177
00:13:16.125 --> 00:13:18.711
It's not very hard as you're going to 
see. 

178
00:13:18.711 --> 00:13:22.530
And that's part of the reason this 
algorithm is so successful. 

179
00:13:22.530 --> 00:13:27.531
The decoder is going to decode this. 
It's going to do the inverse transform of 

180
00:13:27.531 --> 00:13:31.032
the DCT. 
It's going to put the blocks one next to 

181
00:13:31.032 --> 00:13:34.247
each other, and it's going to show you 
the image. 

182
00:13:34.247 --> 00:13:37.319
Okay? 
And we're going to talk, this is down for 

183
00:13:37.319 --> 00:13:40.534
one color. 
We're also going to also talk how the 

184
00:13:40.534 --> 00:13:45.178
different colors, the RGB are basically 
exploited. 

185
00:13:45.178 --> 00:13:50.720
Also by basically using some redundancy 
between the colors, we can actually get 

186
00:13:50.720 --> 00:13:54.990
even more compression. 
So, JPEG is basically example of the 

187
00:13:54.990 --> 00:13:59.610
prototype of the techniques of image 
compression with the mapping, 

188
00:13:59.610 --> 00:14:04.377
that is this part, a quantization and a 
symbol encoder. 

189
00:14:04.377 --> 00:14:08.880
So and a very successful example of this 
technique. 

190
00:14:08.880 --> 00:14:15.792
So I think it's time now to basically go 
and talk about each one of these blocks 

191
00:14:15.792 --> 00:14:16.816
in the text. 