通过一个例子 我们现在已经完成了基于霍夫曼编码的简单编码 这是图像压缩的后端步骤 接下来让我们看看图像压缩的前端 在这个视频中我们将要讲述的是这一部分 那么让我们从这个部分开始 现在我们有一张图片 一个粗略的想法是 JPEG 或者有损变换编解码压缩 做的是把图片分成一些小块 每一个小块有 n x n 个像素点 我们要讲的是 用一个例子来讲解 n 值是什么 但我们先了解一点 就是 JPEG 使用的是 8 x 8 的小块 所以 JPEG几乎是将一幅图像中的每个 8 x 8 小块独立编码 小块都是不重叠的 所以这是8个像素 接着8个 接着8个 接着8个 好 然后全部都是这样 并且也有方法来处理 如果图片的宽度或者长度不是8的倍数的情况 所以现在不用担心这个 这些只是技术细节 我们取其中一个 n x n 的小块 接下来我们将要对每一个这样的 n x n 8 x 8 的小块编码 并且我之前讲过 编码的时候它们几乎是独立的 这就是要对一张图片做的事 但是这只是针对黑白图片 如果是一张RGB图片怎么办呢 JPEG 其实是个色盲 JPEG 不知道如何处理色彩 它本身不理解颜色标准 但是我们可以想一下怎么来处理这个问题 最原始的一个想法是 首先把红色通道取出来 因为每一个通道都是一个二维像素阵列 于是红色通道看起来是这样的 我们将红色通道分成 8 x 8 的小块 之后对红色通道编码 然后对绿色通道做同样的处理 最后对蓝色通道做同样的处理 看起来这个方法非常合理 但是实际情况是 通道之间有很多相关性 所以 JPEG 做的是 它不对RGB编码 而是处理一种叫YCbCr的色彩空间 接下来我就来告诉大家怎么做这个 但是在这里 我们有Y、Cb和Cr三个通道 而不是RGB三个通道 这个是亮度通道 (luminance channel) 这就是大家 在黑白电视机和黑白显示器上见到的通道 我们有一张彩色图片 但是只能看到黑白的部分 也就是它的亮度部分 这些是色彩通道 好 这是一个简单的转换 实际上是通过乘以一个 3 x 3 的矩阵来实现的
在 3 分 9 秒处开始记录3:09
我们把Y Cb Cr列成一列 这里是一个 3 x 3 的矩阵 这是 R G B的值 所以Y是R G B的一个线性组合 Cbr也是一个线性组合 Cb是一个线性组合 Cr是另一个线性组合 这个矩阵是可逆的 所以在对YCbCr解码时 将它们乘以这个矩阵的逆矩阵 就能回到R G B值了 JPEG最开始会做的事 是将彩色图片的每一个像素乘上一个矩阵 比如 100、150、200 乘上这里的这些系数 这是一个常数矩阵 这个矩阵非常有名 它在很多地方都有出现 如果用 谷歌 (Google) 搜索 YCbCr 就能够知道这个矩阵的确切数值 这样对图像的每一个像素点都进行处理 把红绿蓝 (RGB) 阵列转换成 YCbCr 阵列 我再重复一次 这仍然是所有像素点的一个二维阵列 不过已经从RGB 转换成了YCbCr的二维矩阵 有了这些 接下来就是 对其中的每一个阵列分别进行编码 让我们来看看Y通道 先处理Y通道 将其分成 8 x 8 的小块 好 我们要做的就是这些 接下来把每一个 8 x 8 小块取出来 将它们分别编码 如前所述 几乎独立地编码 但是为了更好地讲解它 我们将其认为是独立的 接着要将很多 8 x 8 的小图片编码 接下来它将怎么做呢 接下来要做的是一个离散余弦变换 (DCT) 一个变换 然后是量化 然后是符号编码 就像我们已经见过很多次的那个 JPEG 流程图表示的那样 现在我们有了这个 8 x 8 的小块 现在我们需要关注的是我们有的这些 8 x 8 的图像 //果壳教育无边界字幕组 | ctzsm | leafsherry | 小白_远游