WEBVTT

1
00:00:00.000 --> 00:00:05.049
我们现在可以开始描述会引起误差的主要步骤 那就是量化 

2
00:00:05.049 --> 00:00:09.247
我要指出 这也是进行很大压缩的一步   

3
00:00:09.247 --> 00:00:13.116
没有量化 我们不可能做到很大压缩 

4
00:00:13.116 --> 00:00:18.363
我们可以做压缩 但是不会像在数码相机里看到的那么多 

5
00:00:18.363 --> 00:00:22.429
基本上我们采用了之前见过的正变换 

6
00:00:22.429 --> 00:00:26.889
这个之前已经见过了 但是现在我们将要描述量化 

7
00:00:26.889 --> 00:00:29.250
让我们先说这个 

8
00:00:29.250 --> 00:00:34.044
实际上我们之前就已经见过 量化 

9
00:00:34.044 --> 00:00:39.351
就在本课刚开始几个星期的时候 那么我们要在 JPEG 压缩的过程中 

10
00:00:39.351 --> 00:00:43.227
详细讲解量化 所以请记住 我们是从一个 

11
00:00:43.227 --> 00:00:45.954
8 x 8 图像开始的 而且我们已经将它进行变换了 

12
00:00:45.954 --> 00:00:50.175
我将要在这里展示变换系数 

13
00:00:50.175 --> 00:00:54.915
在之前的视频中 我们实际上已经见过变换系数了 

14
00:00:54.915 --> 00:01:01.147
我们用二重求和得到变换系数 

15
00:01:01.147 --> 00:01:06.829
通过沿X轴求和 再沿Y轴求和 即沿图像的坐标轴进行求和 

16
00:01:06.829 --> 00:01:11.374
我们将图片“加”起来 这个是图片 

17
00:01:11.374 --> 00:01:15.535
接着我们有余弦基函数 

18
00:01:15.535 --> 00:01:20.410
这就是如何得到展示在这里的这些系数的 

19
00:01:20.410 --> 00:01:25.655
我们由一个 8 x 8 的图像得到了一个 8 x 8 的系数矩阵 

20
00:01:25.655 --> 00:01:30.900
所以我们在不同的域 在余弦域得到了一幅图像 

21
00:01:30.900 --> 00:01:36.335
我们现在可以对这些系数做不同的事情 

22
00:01:36.335 --> 00:01:41.502
接着我们就要对系数做一定的工作了 举个例子 我们只需要 

23
00:01:41.502 --> 00:01:46.535
取这里的系数 忽略其他的系数 

24
00:01:46.535 --> 00:01:51.434
非常非常地简单 我们可以到左上角 

25
00:01:51.434 --> 00:01:55.057
然后只使用这些系数 忽略掉其他的 

26
00:01:55.057 --> 00:01:58.480
我将马上写出这代表着什么 

27
00:01:58.480 --> 00:02:02.551
我们也可以这样做 以这样的方式 

28
00:02:02.551 --> 00:02:06.363
取用系数 这些带阴影或者说值为1的系数是 

29
00:02:06.363 --> 00:02:11.145
将要传输的系数 那些值为0或者说没有阴影的系数 

30
00:02:11.145 --> 00:02:13.860
是不准备传输或存储下来的 

31
00:02:13.860 --> 00:02:17.950
我们还可以做一些其它处理 我们会想 

32
00:02:17.950 --> 00:02:21.701
我并不想计入或者丢弃系数 

33
00:02:21.701 --> 00:02:27.980
我们要做的是把系数取到这里来并且用8位比特数表示它 

34
00:02:27.980 --> 00:02:32.384
这样它的量化级数就为 256   

35
00:02:32.384 --> 00:02:38.500
另一方面 这里的这个系数 

36
00:02:38.500 --> 00:02:42.659
也就是系数 T(0,7) 我想只用 1个比特位来表示它 

37
00:02:42.659 --> 00:02:48.531
所以我们将只能用两个不同级别来表示这个系数 

38
00:02:48.531 --> 00:02:53.120
接下来我们要说的就是这个 

39
00:02:53.120 --> 00:02:56.445
假如我们现在开始量化 会发生什么？ 

40
00:02:56.445 --> 00:03:00.815
请记住 f(x,y) 接着将要被重建 

41
00:03:00.815 --> 00:03:06.705
就像我们在之前的视频中看到的那样 f(x,y)是T(u,v)求和得到的 

42
00:03:06.705 --> 00:03:12.669
T(u,v) 就是变换系数 我们可以在这里使用 r   

43
00:03:12.669 --> 00:03:16.484
因为我们知道正变换和反变换是一样的 

44
00:03:16.484 --> 00:03:20.796
我们就是这样重构图像的 

45
00:03:20.796 --> 00:03:27.596
现在假如我们要量化T 而不是重构f 因为我们会有 

46
00:03:27.596 --> 00:03:32.654
一个 T(u,v) 的近似值 接着我们需要重构出 

47
00:03:32.654 --> 00:03:37.380
f(x,y) 的近似值 请记住这里会发生变化 

48
00:03:37.380 --> 00:03:41.610
我们所得到的的 f(x,y) 是系数的一个线性组合 

49
00:03:41.610 --> 00:03:46.360
这个系数要么是原始系数 要么是量化后的系数 

50
00:03:46.360 --> 00:03:51.030
也就是乘了基函数的线性组合 这些就是所谓的基函数 

51
00:03:51.030 --> 00:03:57.165
我在这里把它们弄成了 4 x 4 的图像块 但是我们知道所讨论的是 

52
00:03:57.165 --> 00:04:01.306
8 x 8 的图像 所以这个顶部的系数主要是用来说明 

53
00:04:01.306 --> 00:04:04.707
我们接着要使用多少这些基函数 

54
00:04:04.707 --> 00:04:10.570
可以这样说 或许我们的视觉感知是 

55
00:04:10.570 --> 00:04:16.314
假如本来我要使用 7.7乘以这些基函数 

56
00:04:16.314 --> 00:04:22.526
或许我最后只乘以了7.5 却不会有很大影响 而且我的视觉系统 

57
00:04:22.526 --> 00:04:26.380
不会察觉到有什么不同 这就是量化的思想 

58
00:04:26.380 --> 00:04:32.514
量化主要思想是数值修约 或者说 如果让这个分量里的值稍稍变化一点 

59
00:04:32.514 --> 00:04:38.726
无论T(u,v)这部分代表的是什么 在重构时都不会产生太大影响 

60
00:04:38.726 --> 00:04:42.108
一会儿我们就会看到 

61
00:04:42.108 --> 00:04:45.490
现在大家还记得我们为什么要做量化吗？ 

62
00:04:45.490 --> 00:04:51.701
我们要做量化是因为之后要进行霍夫曼编码 

63
00:04:51.701 --> 00:04:57.136
请记住一点 在霍夫曼编码里 我们需要非均匀分布 

64
00:04:57.136 --> 00:05:00.397
一些系数会出现很多次 

65
00:05:00.397 --> 00:05:06.143
所以我们将对其进行短编码 而一些系数出现次数并不多 

66
00:05:06.143 --> 00:05:11.423
那我们就给它们进行长编码 举个例子 如果我们量化得很多 

67
00:05:11.423 --> 00:05:15.150
我们也许发现7、8、9、10都会变成0 

68
00:05:15.150 --> 00:05:20.027
然后我们就能压缩很多 

69
00:05:20.027 --> 00:05:25.050
在接下来的幻灯片中可以看到一些更多的例子 

70
00:05:25.050 --> 00:05:28.508
这个式子就是量化的基本思想 正如我所说 我们准备开始量化了 

71
00:05:28.508 --> 00:05:32.937
我们需要改变一些系数 希望能够不被注意到 

72
00:05:32.937 --> 00:05:35.546
现在我要提醒大家注意的是 

73
00:05:35.546 --> 00:05:39.126
有些可以在JPEG里巧妙地得到的东西 

74
00:05:39.126 --> 00:05:43.376
如果只是去做量化 我们仍然需要 

75
00:05:43.376 --> 00:05:50.403
传输一个量化后的8x8变换值矩阵 这意味着 

76
00:05:50.403 --> 00:05:56.371
我们需要传输64个数 现在我们有一个 

77
00:05:56.371 --> 00:06:01.120
每像素8比特 256个灰度级的图片 

78
00:06:01.120 --> 00:06:07.780
接着我们需要传输这里的每一个值 即使像这样只用一个比特 

79
00:06:07.780 --> 00:06:12.365
所以我们从8比特开始 

80
00:06:12.365 --> 00:06:16.344
然后只使用1比特 以8比1压缩 

81
00:06:16.344 --> 00:06:22.485
我们只要传输那个值就可以了 JPEG很巧妙地表示了一些东西 

82
00:06:22.485 --> 00:06:28.194
接下来我们要看到的是 顶部区域将使用这里的代替值 

83
00:06:28.194 --> 00:06:33.817
比特数越多 量化效果就越好 

84
00:06:33.817 --> 00:06:36.795
在这里的底角部分 

85
00:06:36.795 --> 00:06:41.270
JPEG将会表示出… 我将要做一些非常非常剧烈的量化 

86
00:06:41.270 --> 00:06:45.205
实在是太剧烈了 导致T(u,v)中的很多系数 

87
00:06:45.205 --> 00:06:51.024
都会变成0 所以JPEG并不用来编码 

88
00:06:51.024 --> 00:06:55.330
它不是先存这个T(u,v) 再存这个 接着这个 

89
00:06:55.330 --> 00:06:59.636
它实际上是按照锯齿形的方式来进行的 

90
00:06:59.636 --> 00:07:05.344
这意味着 好吧 首先我们做个约定 

91
00:07:05.344 --> 00:07:10.452
在这里看到的第一个系数是T(0,0) 

92
00:07:10.452 --> 00:07:16.060
第二个系数是T(0,1) 

93
00:07:16.060 --> 00:07:21.933
第三个系数是T(1,0) 对吧？ 

94
00:07:21.933 --> 00:07:27.807
所以你要做的是编码量化后的(0,0) 

95
00:07:27.807 --> 00:07:32.580
再编码量化后的(0,1) 

96
00:07:32.580 --> 00:07:36.440
再编码量化后的(1,0) 

97
00:07:36.440 --> 00:07:39.851
然后就这样按照锯齿形的方式往下进行 

98
00:07:39.851 --> 00:07:42.488
为什么这么做很重要？ 

99
00:07:42.488 --> 00:07:46.055
正如我之前说的 这里的很多值都会变成0 

100
00:07:46.055 --> 00:07:51.793
在我们做了很强的量化以后 它们的值都会变成0 

101
00:07:51.793 --> 00:07:57.609
所以当JPEG进行到某一个系数的时候 发现后续其他所有系数 

102
00:07:57.609 --> 00:08:03.270
都变成了0 我们只需用一个信号来表明结束 

103
00:08:03.270 --> 00:08:10.761
假如这第n个数在这里 就代表着这里的所有数都是0 那我们就能省下很多比特 

104
00:08:10.761 --> 00:08:16.656
它还是按照每个比特来传输 比方说 用0、0、0来表示 

105
00:08:16.656 --> 00:08:22.387
本质上是在表示结束 这意味着这一块结束了 

106
00:08:22.387 --> 00:08:26.685
这个8x8传输系数矩阵结束了 所有系数都变成了0 

107
00:08:26.685 --> 00:08:32.488
这确实很巧妙 通过这个可以让我们达到超过8比1的压缩比 

108
00:08:32.488 --> 00:08:35.425
甚至是非常非常高的压缩比 

109
00:08:35.425 --> 00:08:40.869
而且这个区域量化的越多 这个结束符号出现的越早 

110
00:08:40.869 --> 00:08:44.307
所以这就是量化的基本思想 

111
00:08:44.307 --> 00:08:51.535
让我们来看一下如何做到的 量化的一个非常简单的方式是 

112
00:08:51.535 --> 00:08:56.205
像这样的均匀量化 

113
00:08:56.205 --> 00:09:00.537
这也是JPEG主要所做的工作 这就是说 取了系数以后 

114
00:09:00.537 --> 00:09:04.192
需要做均匀量化 

115
00:09:04.192 --> 00:09:07.780
在某种意义上来说 举个例子 这个区间 

116
00:09:08.840 --> 00:09:15.015
所有落在这里面的数 

117
00:09:15.015 --> 00:09:18.690
每个值落在这一点和这一点之间的系数 都可以用它来表示 

118
00:09:18.690 --> 00:09:23.409
这就很重要了 现在我们要开始哈夫曼编码 

119
00:09:23.409 --> 00:09:27.688
无论是多少 都得用一个数来代替 

120
00:09:27.688 --> 00:09:32.282
我们主要做的是增大那个数出现的概率 

121
00:09:32.282 --> 00:09:37.505
我们会把有很多出现次数很少的数 

122
00:09:37.505 --> 00:09:41.029
替换为一个出现很多次的数 就像我们知道的那样 

123
00:09:41.029 --> 00:09:45.496
这对于压缩最后的哈夫曼编码或者其他任何编码器来说都很重要 

124
00:09:45.496 --> 00:09:48.454
举个例子 现在所有 

125
00:09:48.454 --> 00:09:53.208
落在从这儿到这儿的区间里的系数 都会被表示为这个值 

126
00:09:53.208 --> 00:09:58.671
而且JPEG和许多编码器所做的意味着 

127
00:09:58.671 --> 00:10:04.133
我准备给出一些数让大家按照数的比例 (划分) 

128
00:10:04.133 --> 00:10:07.857
准备好了吗？接下来要说的是T(0,0) 

129
00:10:07.857 --> 00:10:14.505
T(0,0)要被16除 

130
00:10:14.505 --> 00:10:19.259
我们在之前最开始的一个视频中见到过 

131
00:10:19.259 --> 00:10:25.797
先要将其取整 然后再次乘以16 

132
00:10:25.797 --> 00:10:31.271
乘了以后的值就成为新的T(0,0) 

133
00:10:31.271 --> 00:10:35.188
这种方法很简单 却很有效 

134
00:10:35.188 --> 00:10:39.583
或许并不很理想 也并不是最好的方式 

135
00:10:39.583 --> 00:10:46.080
但是JPEG被提倡不仅因为其高性能 

136
00:10:46.080 --> 00:10:50.284
同样因为简便性 而且我们能够看到这使得量化如何操作的 

137
00:10:50.284 --> 00:10:55.157
所以就像我们看到的那样 如果T(0,0)是 

138
00:10:55.157 --> 00:10:59.540
一个0和15之间的任意数 

139
00:11:01.520 --> 00:11:06.831
通过这种方法都会变成0 

140
00:11:06.831 --> 00:11:11.447
如果我们用7除以16 

141
00:11:11.447 --> 00:11:18.464
将结果向下取整的时候就会变成0 再乘以16以后 

142
00:11:18.464 --> 00:11:24.100
它依旧为0 所以 所有在这个区间的数 

143
00:11:24.100 --> 00:11:30.800
都会变成0 然后所有 

144
00:11:30.800 --> 00:11:35.980
在16至31之间的数 

145
00:11:35.980 --> 00:11:40.210
都会变成1 这样就实现了量化。 

146
00:11:40.210 --> 00:11:46.446
我们所做的这些会帮助霍夫曼编码传输更少的数 这些数也更多的浓缩了 

147
00:11:46.446 --> 00:11:49.562
而且这个比例越大 

148
00:11:49.562 --> 00:11:55.984
举个例子 假如我们按照100的比例 在0到99之间的所有数都会变为0 

149
00:11:55.984 --> 00:12:00.186
所以这种量化决策更加显著 

150
00:12:00.186 --> 00:12:03.834
所以它虽然不是很好 但还是不错的 如果做得正确 

151
00:12:03.834 --> 00:12:08.829
那么就不会察觉到太大的变化
这就是JPEG量化的基本思想 

152
00:12:08.829 --> 00:12:12.243
接下来要给大家展示的是 

153
00:12:12.243 --> 00:12:17.371
这个JPEG里面基础的 默认表格 

154
00:12:17.371 --> 00:12:22.932
记住我在以前的幻灯片中说过的那些东西
因为我们马上就要开始量化很多数 

155
00:12:22.932 --> 00:12:27.049
这里面很多都会变成0 

156
00:12:27.049 --> 00:12:32.394
然后 块结束信号将能够压缩很多 

157
00:12:32.394 --> 00:12:36.510
很多个符号以及很多个系数 很多个T(u,v) 

158
00:12:36.510 --> 00:12:40.627
很多只有一个符号的变换系数 

159
00:12:40.627 --> 00:12:44.906
压缩的效果都极强
举个例子来说 

160
00:12:44.906 --> 00:12:48.035
这实际上是用之前的矩阵 

161
00:12:48.035 --> 00:12:52.138
和基本思想形成的
这也是JPEG如何压缩的 

162
00:12:52.138 --> 00:12:56.589
接下来
我会用这个矩阵 

163
00:12:56.589 --> 00:13:00.205
然后就像我说的那样用JPEG的方式讲解这个矩阵 

164
00:13:00.205 --> 00:13:02.568
好了，让我们现在来试一下。 

165
00:13:02.568 --> 00:13:07.715
我们除以16、11、12、12这样子 

166
00:13:07.715 --> 00:13:15.179
或者说用两倍的这个矩阵来除
就是除以32、22、24、24这样 

167
00:13:15.179 --> 00:13:21.064
接着让我们看一下效果
我们逐步所除的矩阵是同一个矩阵 

168
00:13:21.064 --> 00:13:27.096
只是按比例扩大了而已 
我们能看到质量是如何变低的 

169
00:13:27.096 --> 00:13:30.621
当然我们并不想让图像变成这样 

170
00:13:30.621 --> 00:13:36.730
这个图像效果出现的原因可能是
当我们在将矩阵乘了32次Z以后 

171
00:13:36.730 --> 00:13:40.882
大部分的系数也遭到了破坏 

172
00:13:40.882 --> 00:13:47.148
但是假如我们不把矩阵乘那么多次
而是按比例缩小 

173
00:13:47.148 --> 00:13:52.984
除以16 除以11
先乘再除然后得到 

174
00:13:52.984 --> 00:13:58.848
质量非常非常好的图像
我们除得越多 就压缩的越多 

175
00:13:58.848 --> 00:14:04.794
所以就像在之前的幻灯片里看到的那样
如果我们用2去除的话 

176
00:14:04.794 --> 00:14:10.332
我们只是在取整
但是如果我们用100去除 

177
00:14:10.332 --> 00:14:16.766
就会使这些块中的数变得全都一样 

178
00:14:16.766 --> 00:14:22.620
或者就像看到这张图
这个越大 量化的就越多 

179
00:14:23.940 --> 00:14:30.237
这个就是JPEG准备使用的默认表 

180
00:14:30.237 --> 00:14:36.383
也可以说是默认表的一个可能性
我想给大家看这个表的原因在于 

181
00:14:36.383 --> 00:14:41.847
我想再一次给大家看这些数是如何增加的 

182
00:14:41.847 --> 00:14:47.917
它们减少了 虽然对这些做了大量的处理 

183
00:14:47.917 --> 00:14:52.741
但是压缩依然是均匀的
接着对矩阵又一次做乘法 

184
00:14:52.741 --> 00:14:59.460
所以这张图就是我们将会得到的 

185
00:14:59.460 --> 00:15:05.149
一倍矩阵得到的图像
更大地扩大矩阵倍数 会得到这样的结果 

186
00:15:05.149 --> 00:15:08.870
我希望你能看出它的质量
这是误差 

187
00:15:08.870 --> 00:15:12.596
从图里很难看出来 

188
00:15:12.596 --> 00:15:15.761
让我们关注一下某些区域 

189
00:15:15.761 --> 00:15:20.331
我们来看这里 很不错的样子
很可能是我们没有将量化矩阵划分得很大 

190
00:15:20.331 --> 00:15:25.043
再看这里就是划分得很大了 

191
00:15:25.043 --> 00:15:29.121
看起来不是很好
把这片区域放大以后再来看一下 

192
00:15:29.121 --> 00:15:34.043
看起来确实不好
还有这里 如果我们把它放大的话 就能够看到 

193
00:15:34.043 --> 00:15:37.630
图像上出现了一些问题
但在这种比例的图上却看不见 

194
00:15:37.630 --> 00:15:42.773
因此我们具有一个量化矩阵 

195
00:15:42.773 --> 00:15:45.671
它用来表示所有变换系数T(u,v) 

196
00:15:45.671 --> 00:15:49.873
我们到底想做的是什么？
是想除了以后再取整 

197
00:15:49.873 --> 00:15:52.626
然后再除以5？
还是再除以100？ 

198
00:15:52.626 --> 00:15:57.769
我们除以的数越大 产生的误差也就越大 

199
00:15:57.769 --> 00:16:01.391
不过我们压缩得也越多 

200
00:16:01.391 --> 00:16:05.883
所以这很有意思
在一些软件包里 

201
00:16:05.883 --> 00:16:09.819
当保存一张图像时 

202
00:16:09.819 --> 00:16:13.780
它会询问我们想保存的JPEG图像质量 

203
00:16:13.780 --> 00:16:19.131
它所询问的其实就是要乘以量化矩阵的倍数大小 

204
00:16:19.131 --> 00:16:22.397
所以量化矩阵… 

205
00:16:22.397 --> 00:16:27.069
在软件包里 是一个固定矩阵
所以我们如何压缩更多或者更少呢？ 

206
00:16:27.069 --> 00:16:31.688
答案就是通过按比例扩大或者缩小量化矩阵 

207
00:16:31.688 --> 00:16:35.041
所以当表示为我们需要高质量时 

208
00:16:35.041 --> 00:16:40.703
并不是需要很大的比例
当表示我们需要高压缩或者低质量时 

209
00:16:40.703 --> 00:16:43.907
才是需要很大的比例 

210
00:16:43.907 --> 00:16:47.260
这就是JPEG如何实现压缩的
它使用一种非常简单的 

211
00:16:47.260 --> 00:16:52.839
均匀量化 通过按比例划分再乘回原来的比例 

212
00:16:52.839 --> 00:16:56.142
当然 乘的过程是在解码器中完成的 

213
00:16:56.142 --> 00:17:00.253
在0至100之间的每一个数 

214
00:17:00.253 --> 00:17:05.759
假如我们将它按100的比例缩减 在0和99之间的 抱歉
假如我们将它按照100的比例来 

215
00:17:05.759 --> 00:17:11.265
这些数都会被编码为0
接着解码器乘以100以后会重新得到这些数 

216
00:17:11.265 --> 00:17:15.230
所以这就是JPEG在量化上所做的 

217
00:17:15.230 --> 00:17:21.550
通过这些我们可以得到压缩
现在我想提到的一点是 

218
00:17:21.550 --> 00:17:27.329
有技术和理论能够随着信号的类型尝试调整量化 

219
00:17:27.329 --> 00:17:32.639
JPEG采用均匀量化 

220
00:17:32.639 --> 00:17:37.247
是因为它很简单
我们不需要做均匀量化 

221
00:17:37.247 --> 00:17:41.464
我们可以构造图中的这些区间 

222
00:17:41.464 --> 00:17:47.009
他们的宽度不同
一些区域会比其他的区域划分得更大 

223
00:17:47.009 --> 00:17:51.460
这在JPEG里是不会出现的 

224
00:17:51.460 --> 00:17:55.830
JPEG里是均匀的
无论什么T(u,v)的值 

225
00:17:56.840 --> 00:18:02.649
我们总是都要除它
在一个给定的系数位置 

226
00:18:02.649 --> 00:18:08.503
我们总要用相同的数去除
看这里 就是根据我们输入的不同 

227
00:18:08.503 --> 00:18:13.565
根据我们准备除以的值
JPEG并不这样做 这一点很重要 

228
00:18:13.565 --> 00:18:18.127
再一次说明部分原因是简便性 

229
00:18:18.127 --> 00:18:23.616
我把相关的这一章放在量化里
我想给大家解释一下 

230
00:18:23.616 --> 00:18:28.749
如果愿意在算法里使用更多的复杂性
那么实际上效果会更好 

231
00:18:28.749 --> 00:18:33.668
有一种非常好的关于如何做得更好的理论 

232
00:18:33.668 --> 00:18:39.030
叫做Max-Lloyd最优量化器 

233
00:18:39.030 --> 00:18:45.257
其主要思想相对简单
尽管并不总是直接的计算 

234
00:18:45.257 --> 00:18:49.623
已经显示的是 请记住 

235
00:18:49.623 --> 00:18:57.920
如果要测量一个给定的像素和其输出像素之间的方差作为误差 

236
00:18:57.920 --> 00:19:04.866
我们要讲的就是这个均方 

237
00:19:04.866 --> 00:19:09.979
看大家怎么决定
要在考虑这个误差的情况下 

238
00:19:09.979 --> 00:19:15.325
做出最好的量化器
还要考虑到比特数的确切的分配 

239
00:19:15.325 --> 00:19:20.593
当然如果不考虑使用比特的多少 

240
00:19:20.593 --> 00:19:26.093
那就根本不用量化了
自然就会变成零误差了 

241
00:19:26.093 --> 00:19:30.500
但是如果我们只能用256级 

242
00:19:30.500 --> 00:19:34.758
那就只能使用8个比特位 

243
00:19:34.758 --> 00:19:39.121
只能拥有256个区间 

244
00:19:39.121 --> 00:19:46.600
因为每个区间都需要用一个位串去表示 

245
00:19:46.600 --> 00:19:52.563
所以我们事先定义好想要使用的级的个数 

246
00:19:52.563 --> 00:19:56.244
即区间的个数
然后预先定义这个作为误差 

247
00:19:56.244 --> 00:20:01.912
这样就能显示出我们需要去做的 非常的直观 

248
00:20:01.912 --> 00:20:05.834
好了
那什么才是我们在每个区间产生的误差呢？ 

249
00:20:05.834 --> 00:20:09.579
在这里的每一个区间 

250
00:20:09.579 --> 00:20:14.338
都要从s_(i-1)到s_(i+1)进行积分 

251
00:20:14.338 --> 00:20:20.501
就是这个积分
大家可以看到假如这就是我们关心的误差 

252
00:20:20.501 --> 00:20:28.575
那么在这里就需要放上s_i 减去 

253
00:20:28.575 --> 00:20:36.640
事实上只有s 因为接下来要进行积分
s减去t_i 

254
00:20:36.640 --> 00:20:41.521
所以这就是误差了
我们用t代替s 

255
00:20:41.521 --> 00:20:47.035
这个就是 (代替产生的) 误差
接着需要把它和概率相乘 

256
00:20:47.035 --> 00:20:49.896
那个值出现的概率 

257
00:20:49.896 --> 00:20:55.817
如果那个值在输入数据中不出现的话
就不需要再关注它了 

258
00:20:55.817 --> 00:21:00.480
因为这个值永远不会产生误差
接着才对它在s上进行积分 

259
00:21:00.480 --> 00:21:05.957
这个方程式显示作为未知值的 

260
00:21:05.957 --> 00:21:09.510
我们寻找的区间边界 

261
00:21:09.510 --> 00:21:15.742
积分部分以及这里的代替值 

262
00:21:15.742 --> 00:21:22.708
这只是一个方程
我们还可以得到第二个方程 

263
00:21:22.708 --> 00:21:28.340
它可以表示为 

264
00:21:28.340 --> 00:21:32.159
s_i减去t_i和t_(i+1)的平均值 

265
00:21:32.159 --> 00:21:37.059
因为我们要计算均方误差 

266
00:21:37.059 --> 00:21:41.545
这个就会产生平均值
因而从这个就可以得到第二个方程 

267
00:21:41.545 --> 00:21:45.341
我们现在在每一个连续区间上 

268
00:21:45.341 --> 00:21:50.103
就有了两个方程
接着我们要解方程 

269
00:21:50.103 --> 00:21:54.727
这并不容易
大部分的概率分布中闭合解并不存在 

270
00:21:54.727 --> 00:22:00.126
但是如果我们假定概率分布是均匀的
那么闭合解确实存在 

271
00:22:00.126 --> 00:22:04.903
这就是JPEG使用的方程 

272
00:22:04.903 --> 00:22:09.164
这就像在说 概率分布是均匀的 

273
00:22:09.164 --> 00:22:12.134
我们只要做数值取整
像我之前说过那样 

274
00:22:12.134 --> 00:22:17.428
但是这个方程表示了一个很好的理论 

275
00:22:17.428 --> 00:22:20.421
前提是如果我们知道概率分布 

276
00:22:20.421 --> 00:22:23.856
就可以获得比均匀量化更好的效果 

277
00:22:23.856 --> 00:22:27.635
再说一次 JPEG使用的是均匀量化 

278
00:22:27.635 --> 00:22:32.237
为了简单起见 同样也是所谓的普遍性 

279
00:22:32.237 --> 00:22:35.672
不需要知道概率分布 

280
00:22:35.672 --> 00:22:40.215
就可以进行JPEG的工作
几乎对所有图像的处理效果都很好 

281
00:22:40.215 --> 00:22:45.452
或许在一些分布上我们的效果会更好 

282
00:22:45.452 --> 00:22:48.484
但是它能在所有分布上使用 

283
00:22:48.484 --> 00:22:53.790
我需要告诉大家的是
大家可以修改JPEG 

284
00:22:53.790 --> 00:22:57.580
在大家自己的量化表里
它仍然是标准的一部分 

285
00:22:57.580 --> 00:23:00.888
它或许会遵循一个你知道的分布 

286
00:23:00.888 --> 00:23:05.573
所以如果大家要压缩一类非常特殊的图像 

287
00:23:05.573 --> 00:23:10.190
可以优化出自己的JPEG来进行处理
就这些来总结一下 

288
00:23:10.190 --> 00:23:13.650
JPEG的基本概念是 

289
00:23:13.650 --> 00:23:19.265
从一个离散余弦变换开始
采用霍夫曼编码的均匀量化进行量化 

290
00:23:19.265 --> 00:23:21.598
非常非常的简单 

291
00:23:21.598 --> 00:23:26.702
如果大家想实际创建一个JPEG作为一个可选编程的练习 

292
00:23:26.702 --> 00:23:30.712
也不会花费大家太多的时间 

293
00:23:30.712 --> 00:23:34.140
如果大家使用像MATLAB这样的软件 

294
00:23:34.140 --> 00:23:37.826
如果要做离散余弦变换的话
只是一个很简单的命令 

295
00:23:37.826 --> 00:23:42.763
如果要做量化
记住不外乎是除了以后再取整 

296
00:23:42.763 --> 00:23:47.910
然后如果准备用解码器
就相当于用相同的数乘回来 

297
00:23:47.910 --> 00:23:50.970
这些做完了就可以进行霍夫曼编码了 

298
00:23:50.970 --> 00:23:56.464
但是即使没有霍夫曼编码
我们仍旧能够看到 当除以较大的数时 

299
00:23:56.464 --> 00:24:01.124
将会得到更多的压缩 当然 质量会变低 

300
00:24:01.124 --> 00:24:01.820
谢谢大家