WEBVTT

1
00:00:00.000 --> 00:00:05.936
现在 作为本周图像和视频压缩课程的结束 

2
00:00:05.936 --> 00:00:11.212
我们来简要的描述一下游程编码 通常来说 

3
00:00:11.212 --> 00:00:14.510
游程编码在编码二值图像的时候非常的有用 

4
00:00:14.510 --> 00:00:20.153
让我们画一幅二值图像 用一个框来表示 

5
00:00:20.153 --> 00:00:23.525
假如这里有一个特定灰度值的物体 

6
00:00:23.525 --> 00:00:28.801
这幅图中我们只使用两种灰度值 

7
00:00:28.801 --> 00:00:36.020
比如说 背景的灰度值为100 而这里的灰度值是200 

8
00:00:36.020 --> 00:00:39.312
所以我们已经知道 如果我们 

9
00:00:39.312 --> 00:00:44.800
用一种巧妙的方法表示图像的话 我们可以把图像压缩很多 

10
00:00:44.800 --> 00:00:50.654
巧妙的表示方法是指为霍夫曼编码提供分布良好的 

11
00:00:50.654 --> 00:00:56.288
非常简洁的数据 所需数据量有望比编码整幅图像更少 

12
00:00:56.288 --> 00:00:59.654
当然我们可以编码整幅图像 

13
00:00:59.654 --> 00:01:05.435
通过多次重复灰度值100来表示第一行 第二行也一样 

14
00:01:05.435 --> 00:01:11.100
同理表示整幅图像 想象这是一幅 10,000 x 10,000 大小的图像 

15
00:01:11.100 --> 00:01:17.171
我们对于像素值100 就要重复 10,000次 

16
00:01:17.171 --> 00:01:21.833
然后以此类推 一个更巧妙些的方法如下所示 

17
00:01:21.833 --> 00:01:25.817
我们只要计算这儿有多少灰度值为100的像素 

18
00:01:25.817 --> 00:01:32.593
接下来再计算有多少个灰度值为200的像素 

19
00:01:32.593 --> 00:01:36.769
然后继续计算其后灰度值100又出现了多少次 

20
00:01:36.769 --> 00:01:42.539
最后一次计算其实没必要做 

21
00:01:42.539 --> 00:01:45.956
如果已经知道图像只有一种灰度变化的话 

22
00:01:45.956 --> 00:01:51.880
我们计算这些次数 假定在这里出现了3,000次 

23
00:01:51.880 --> 00:02:00.292
3,000次灰度值为100的像素 与其编码3,000次100 

24
00:02:00.292 --> 00:02:07.936
不如我们只编码这个值 接下来我们假设 

25
00:02:07.936 --> 00:02:12.530
这里灰度值200出现了1,000次 

26
00:02:12.530 --> 00:02:18.892
所以我们记下3,000和1,000 编码就完成了 前提是图像中只有一个物体 

27
00:02:18.892 --> 00:02:22.073
和一种灰度变化 如果不是上述情况 我们可以继续编码 

28
00:02:22.073 --> 00:02:25.890
于是 只用两个值 我们便编码了一整行图像 

29
00:02:25.890 --> 00:02:29.867
然后进入下一行 我们用同样的方法编码 

30
00:02:29.867 --> 00:02:36.070
这就是游程编码 因为该方法编码的是相同数值所占的行程长度 

31
00:02:36.070 --> 00:02:40.206
实际上我们已经在 JPEG 中间接地见过它了 

32
00:02:40.206 --> 00:02:48.504
就在 JPEG 过程的变换域中 处理 8 × 8 的模块时 

33
00:02:48.504 --> 00:02:51.459
我只画出这部分的图示 

34
00:02:51.459 --> 00:02:57.234
我解释过 当所有的值都变成 0 

35
00:02:57.234 --> 00:03:02.132
会有一个码字标示数据块的结束 即只需一个值进行编码 

36
00:03:02.132 --> 00:03:06.080
就可以搞定从头到尾的所有数据 

37
00:03:06.080 --> 00:03:11.709
这就是游程编码的基本思想 我想再次强调游程编码非常有用 

38
00:03:11.709 --> 00:03:14.780
特别是用于 几何图像 

39
00:03:14.780 --> 00:03:20.425
二值图像和间接用于 JPEG过程 并在二值图像广泛应用 

40
00:03:20.425 --> 00:03:27.926
即使我们有一个以上的物体 这里还有一个 

41
00:03:27.926 --> 00:03:31.549
我们称之为行程 我们指明灰度值100出现多少次 

42
00:03:31.549 --> 00:03:38.588
灰度值200出现多少次 100又出现了多少次 然后200又出现多少次 或者是其它需要的数值 

43
00:03:38.588 --> 00:03:42.630
我们对这些值和它们出现的次数进行编码 

44
00:03:42.630 --> 00:03:46.114
通过这种编码方法我们能很大程度的进行压缩 

45
00:03:46.114 --> 00:03:51.340
否则这个非常简单的图像会耗费非常长的编码来表示 

46
00:03:51.340 --> 00:03:55.891
如之前所说 我们可以仅编码这些值 

47
00:03:55.891 --> 00:04:01.286
就像这样 或者将它们用霍夫曼编码再次处理 

48
00:04:01.286 --> 00:04:06.907
进一步压缩 通过游程编码的学习 我们完成了本周 

49
00:04:06.907 --> 00:04:11.231
图像和视频压缩的课程 现在我们有了图像 

50
00:04:11.231 --> 00:04:15.289
我们可以从任意地方接收图像 也可以对图像进行压缩和存储 

51
00:04:15.289 --> 00:04:18.216
下一周我们将开始处理这些图像 

52
00:04:18.216 --> 00:04:23.072
并且了解为何我们的图像看上去并没有我想的那么好 

53
00:04:23.072 --> 00:04:27.197
这些就是下周会讲到的内容 

54
00:04:27.197 --> 00:04:29.060
下周见 谢谢大家
//果壳教育无边界字幕组 | 某音某莹 | 风过成伤 | 小白_远游