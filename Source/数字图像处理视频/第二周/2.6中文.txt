我们讲过 JPEG (静止图像压缩标准) 是最重要的图像压缩算法 大概也是最重要的图像处理算法 总体上说 还有其他一些非常重要的图像和视频压缩技术 而我想阐述的是 在这两者背后隐含的基本概念 其中一个是JPEG-LS (无损图像压缩标准) 另外一个是MPEG (动态图像压缩标准) JPEG-LS允许我们进行无损压缩 也就是说不会有任何信息损失 图像中的每一个像素值都会被保留 而MPEG则是我们用来压缩视频的标准 大家的手机中大概都有MPEG 并且大家在网络上都看过用MPEG压缩的视频 那么下面就来讲解 这两个非常重要的图像和视频压缩技术 背后的概念 我们先从JPEG-LS的概念开始讲起 在这一标准背后的思想叫做 无损预测压缩 为了对比 我在这里放了 我们已经多次见过的 JPEG-LS基本流程图 而这边的则是预测编码的基本流程图 预测编码的基本思想非常非常简单 甚至比JPEG的都要简单 让我来举个例子说明一下 把我画的当做一幅图像的一小部分 在预测编码中 我们首先需要确立顺序 我们将对像素逐个进行压缩 假设我们采用一种叫做光栅扫描顺序的方法 按照从左至右的顺序 先对第一行编码 然后是第二行 依次进行 假设我们已经完成之前所有的编码 然后现在要对这个像素编码 预测编码的思想就是根据以前的像素值来猜想和预测 后面的像素值 我们不能依据未来的像素值去预测 因为解码器并不知道未来的情况 而调用者所能接收到的只有这些像素 所以我们只能 比方说 好吧 我来猜测一下 这个像素的值可能与前一个像素相同 在预测之后 我们需要来计算 预测值和真实值之间的误差 然后我们只需要将误差进行编码 比如这里使用了霍夫曼编码 而解码器就将模拟编码器所做的 也就是说 好吧 那我也来做和你一样的预测 我也像你一样知道过去的情况 我会用这个值来预测这个像素 所以编码器和解码器互相交流 它们在使用完全相同的预测策略 那么 我预测这个 你给我误差 然后我直接在预测上加上误差 于是我得到了这个像素值 然后我继续到下一个像素 依旧采用完全相同的方法 基本思想就是如果你的预测精准 那么误差就总是会非常接近于零 这个误差并不会是随机的值 而会是近似于零的值 如果你还记得的话 这正是像霍夫曼编码器那样 给经常出现的值 赋予一个很短的编码 而时不时会有 一些值在预测中产生较大的错误 这时候别担心 因为后面将编码误差 通过将误差编码 我们会得到无损压缩 所以当偶尔产生了一个大错误 霍夫曼编码将对其赋予一个较长的编码 但是因为这只是偶尔发生 所以并不会成问题 而之后依旧能够进行压缩 所以 无损预测压缩的很多技术关键都在于预测器的设计 为了使得误差总是尽可能的小 甚至希望是零误差 如果你的预测精准 那误差几乎总是零 这样可以大量压缩 如果你的预测器足够智能 至少将非常非常接近于零 然后解码器将只是做一个非常非常简单的解码 这样总体上来说 这个无损预测压缩技术的结构 比JPEG的要稍简单一些 当然这并不能达到如此大量的压缩 但最重要的是原图像将是无损的 下面我来举例说明几个可行的预测器 这是我们的图像
在 5 分 0 秒处开始记录5:00
下面 我们来画一下预测器 像以前一样 假设前面这些都已经被编码了 现在来考虑一下 我想对这个像素进行预测 那么我们可以基于过去进行预测 只是基于这个像素 也就是说 预测它为F(x-1,y) 然后编码器用实际值F(x,y) 减去预测值 所以对于这一像素的误差将会是 F(x-1,y) - F(x,y) 这就是我要通过霍夫曼编码保存的值 就像之前说的 此时解码器将模拟预测器 它会说 啊 你预测了这个 你给了我一个误差 那我将误差加到我的预测中 就可以得到这个像素的值 非常非常简单的运算过程 特别是对于解码器来说 这是一个相当简单的运算 所以可以用前一个像素作为一种可行的预测器 而另一种是通过前面两个像素来预测 比如说可以用前面两个像素的平均值 还有其他一些预测器 比如JPEG-LS 所考虑的范围就更广一些 需要更智能一些 或许会试图利用这个区域所有的值 可能大家会问 为什么只使用左边这些呢？ 或许我可以使用上面这个 还有对角上的这个 所有这些合理的组合都可以 像之前说过的 我们可以这样 如果想使用这两个 那我们可以直接平均一下 也可以平均这三个 事实上JPEG-LS采用了更复杂的方法 总之 JPEG-LS是无损图像压缩的一个标准 事实上它正是火星车上所采用的算法 在火星车上用于图像压缩的算法之一 就包括更智能一些的JPEG-LS 它会尝试找出图像的边缘 但它仍然是非常简单的 记住 压缩要成为标准就必须要简单易行 这样才能被所有人运用 并且快速地执行 我们已经在JPEG中了解过这一概念 它对于JPEG-LS也同样适用 而且也将在MPEG中再次出现 其实就像我说过的 大家可以使用所有过去的区域 也可以只使用这些像素 如果已经对这些进行过编码 假设这是一张非常大的图像中央 我就可以使用 所有过去的值 一直到这里 问题是 如果要这么做的话 就必须记住很多的像素值 而这将占用大量内存 如果你要使用过去的所有信息 那实在是太多了 所以JPEG-LS有着最现代化的 无损预测压缩技术 也就是说可能只使用前一行 或者至多前两行 但不会超过这些了 否则串行存储体系 (SSA) 将会非常复杂 并且占用大量内存 以上就是预测编码的基本思想 现在来看看对于一张很简单的图像它预测效果如何 这是一张不错的从外太空拍摄的地球图像 这是一个我们之前提到过的分布直方图 表达了像素值的分布 还记得吗？ 霍夫曼编码可能会喜欢这样 因为有一定量的 像素值都在150左右 但是它仍然有一个非常非常宽的分布 现在我们用之前讲过的预测器来做预测编码 我们像这样一行一行地扫描每个点 并根据它周边几个点的值来预测这个点的值 这样产生的误差分布如这张图所示 用先前讲到的方法计算误差 然后画出误差分布的直方图 这是一种好的预测器和一幅好的图像 所以得到很好的误差图 这样得到的误差会集中到零附近 大家可以看到这是预测误差图 就像预期那样 当图像中出现大的改变时 预测器并不会知道变化的发生 这就是大多数错误产生的区域 而在灰度值相对均匀的区域 预测器不会产生太多的错误 这就是分布图中有很多零的原因 由于图像中偶尔出现的大的改变 因此产生了预测误差 霍夫曼编码将用更多的比特来表示这个误差 但这种情况仅仅是偶尔出现 因此大多数预测误差都会很小 这样对编码极为有利 这些就是JPEG-LS背后的思想 任何一种预测无损编码器 无损压缩的思想也是如此 你也可以将量化加入到 预测编码或相应的图像压缩技术中 我们将用量化变换系数的方法 来量化误差 这样就能够实现更多的压缩 事实上 误差大小是可以被控制的 如果每个像素点的值在量化时都可以有正负一的误差 那么重建后的图像 它每个点的灰度值和原图就会仅仅相差正负一 这样就能很好地控制误差的范围 因为这不是对变换域进行量化 而是对图像域进行量化 JPEG-LS就用到了这种方法 来对误差进行量化 解码器得到的是量化后的误差值 重新生成的像素点与原来的相比 会有小小的变化 下面这一点很重要 大家一定要记住 如果引进量化 预测时使用的则是量化后的误差 我们来画一下之前那张图 如果我们要预测这个像素点 根据这个像素点 那么请记住 解码器在重建量化误差之后 只会有这个像素量化后的值 对于编码器而言 它必须要模仿解码器的行为 并按照量化后的像素值计算 如果是基于原图进行预测 则是在用解码器无法获取的信息做预测 因此 在流程图里 进入预测器中的是量化后的值 这些都是在设计无损预测和 无损图像压缩时需要记住的 如果想要做量化处理 那么请记住 在图像压缩时不能使用 解码器无法获得的信息 对于编码器而言 它只能利用解码器所能获得的信息 如果不这样做 这个系统就不对称 它也不会很好的运作 因此 这是大家唯一需要记住的地方 正如我所说的 JPEG-LS中包含量化 这就是无损预测编码或者 以及有一定误差的编码方法背后的思想 我们用来预测的方法并不只有这一种 还有MPEG 它是视频压缩的标准 也是基于预测来实现压缩的 不过 这里有很多的帧 想一下视频中 一秒钟有三十帧 为了完成预测 我们举个例子 对于这个帧 可以用前面几个帧来预测它 基本思想很简单 如果拍摄的场景是完全静止的 那么每一帧都会和之前的帧一模一样 MPEG会试图利用这个性质 它会试图关注图像中的一个区域 看看这块区域是不是恒定不变的 这可以用很多方法实现 我们不会详细讨论MPEG是如何实现这些的 不过 作为一个例子 大家可以看一下这块区域 观察它附近有没有相似的区域 并不一定是完全相同的位置 可以是在它的周围 MPEG可以在之前的几帧里寻找相似的区域 或许是一帧 或许是三帧 它会去寻找相似的区域 然后只编码那些误差 它会做时间上的预测 这种想法很简单 而且非常实用 我们知道MPEG能够压缩很多空间 因为有这样一个事实 举个很好的例子 在这个视频里 只有我一个人在动 而整个背景是一直保持不变的 如果你在背景中取一块区域 你可以在之前的几帧里 找到一样的区域 这样 预测误差就会变成零 这对编码器来说是件好事 我们再举个例子 这是之前看过的图像 不过这里有两帧这样的图像 图像一和图像二 我们做一个简单的预测 我们预测第二个图像和第一个图像相同 如果图像中没有太多的移动 那这会是一个非常好的预测 就像之前看到的空间上的预测器一样 多数情况下 预测误差会是零 这是一个时域预测器 我们预测每一个像素 都和前一幅图像中相同位置的像素点一样 我们可以更聪明一些 在那个点附近找相同的像素点 然后再同时编码像素值和偏移量 这样就知道是在左边 或其他某个地方找到了相同的像素点 但是这例子是最简单的 在一样的位置找到相同的像素点 这是上面两幅图像的差 这是误差的分布图 所以 如果知道了这一帧图像 那么就能通过复制前一帧 并加上相应的误差值 高效地产生这一帧图像 因为解码器已经有了前一帧图像 所以复制它不需要占用额外的空间 因为误差集中在零附近 用霍夫曼编码就可以高效地压缩它 把这两幅图像相加就能得到这幅图像 然后再计算下一帧图像 但如果图像中有很多移动 那么误差图就不会这么简单 但我们希望它能足够简单 这样霍夫曼编码就能够利用这一点 这是MPEG或者视频压缩技术的基本流程图 它和JPEG的流程图很相似 它用到了离散余弦变换、量化和像霍夫曼编码这种不等长编码方法 它只是额外添加了这个模块 用来编码时域的预测误差 这个模块负责对图像移动的预测 使用之前图像的一个区域作为预测 但是基本结构是一样的 加上这个模块来处理时域的预测 并不是只压缩一幅图像 而是压缩很多幅图像 而且很多是相似的 再次提一下预测编码 这里利用了 在JPEG中使用到的技术 和在预测编码中用到的技术 两者相结合产生了MPEG 我们已经总结了 图像和视频压缩背后的概念 我们讨论了JPEG 讨论了JPEG-LS和MPEG 我们利用了一些变换 做了预测编码 我们用到了量化和霍夫曼编码 我们讨论了压缩的每一个模块 在图像和视频处理中每天都会用到这些 下一个视频是附加视频 如果你有时间 我建议你看一下这个视频 我会大致介绍一下游程编码 这样你会有一个全面的了解 但是如果你没有时间 你可以跳过这个视频 下一周我们将进入下一个单元 非常感谢