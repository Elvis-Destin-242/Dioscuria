WEBVTT

1
00:00:00.000 --> 00:00:05.049
We can now describe the main step that 
introduces error, meaning quantization. 

2
00:00:05.049 --> 00:00:09.247
And it's also the step that I figured out 
was to compress a lot. 

3
00:00:09.247 --> 00:00:13.116
Without quantization, we won't be able to 
compress too much. 

4
00:00:13.116 --> 00:00:18.363
We will be able to compress, but not as 
much as we see in our digital comments. 

5
00:00:18.363 --> 00:00:22.429
So basically, we have the forward 
transform, which we have seen. 

6
00:00:22.429 --> 00:00:26.889
We have these, we have seen earlier, 
but now we're going to describe the 

7
00:00:26.889 --> 00:00:29.250
quantization. 
So let's talk about it. 

8
00:00:29.250 --> 00:00:34.044
And we have actually already seen 
quantization when we started talking, the 

9
00:00:34.044 --> 00:00:39.351
very early weeks of this class, but let's 
just describe it in detail in the context 

10
00:00:39.351 --> 00:00:43.227
of JPEG compression. 
So, remember, we started from an eight by 

11
00:00:43.227 --> 00:00:45.954
eight image, and we have that on 
transform. 

12
00:00:45.954 --> 00:00:50.175
And what I'm going to represent here are 
the transform coefficients. 

13
00:00:50.175 --> 00:00:54.915
So just, in the previous video, we saw 
that we actually have the transform 

14
00:00:54.915 --> 00:01:01.147
coefficients. 
And we get them as a double sum, with sum 

15
00:01:01.147 --> 00:01:06.829
over the X, with sum over the Y, with sum 
over coordinates of the image. 

16
00:01:06.829 --> 00:01:11.374
And we're basically summing the image. 
This is the image, 

17
00:01:11.374 --> 00:01:15.535
and we have, basically, 
the cosine basis. 

18
00:01:15.535 --> 00:01:20.410
So that's how we got to these 
coefficients that we represent here. 

19
00:01:20.410 --> 00:01:25.655
We start from an eight by eight, and we 
get eight by eight coefficients. 

20
00:01:25.655 --> 00:01:30.900
So we have kind of an image in a 
different domain, in the cosine domain. 

21
00:01:30.900 --> 00:01:36.335
So what we have here are different things 
that we could do to those coefficients. 

22
00:01:36.335 --> 00:01:41.502
Now we are working with coefficients. 
So for example, we could say that we are 

23
00:01:41.502 --> 00:01:46.535
only going to take coefficients and we'll 
ignore all these other coefficients. 

24
00:01:46.535 --> 00:01:51.434
We could, that would be very, very 
simple, sway go to the upper left corner 

25
00:01:51.434 --> 00:01:55.057
and only use those coefficients, ignore 
everybody else. 

26
00:01:55.057 --> 00:01:58.480
And I'm going to write in a second what 
that means. 

27
00:01:58.480 --> 00:02:02.551
We could also do these, which says, 
somehow, I'm going to say which 

28
00:02:02.551 --> 00:02:06.363
coefficients to take. 
Those that are shaded, or says 1 are 

29
00:02:06.363 --> 00:02:11.145
going to be coefficients I'm going to 
send. Those that say 0 or unshaded 

30
00:02:11.145 --> 00:02:13.860
coefficients, 
I'm not going to send or store. 

31
00:02:13.860 --> 00:02:17.950
Now we can do something else and we can 
say you know what, 

32
00:02:17.950 --> 00:02:21.701
I don't want to, include or discard 
coefficients. 

33
00:02:21.701 --> 00:02:27.980
I want you to take this coefficient up 
here and represent it with eight bits. 

34
00:02:27.980 --> 00:02:32.384
So I'm going to let you to do 
quantization to 256 levels. 

35
00:02:32.384 --> 00:02:38.500
On the other hand, this coefficient that 
shows up here, so that would be the 

36
00:02:38.500 --> 00:02:42.659
coefficient 07, T-07. 
I want you to use only one bit. 

37
00:02:42.659 --> 00:02:48.531
So you're going to only be able to 
represent two different levels for that 

38
00:02:48.531 --> 00:02:53.120
coefficient. 
And we are going to talk about this in a 

39
00:02:53.120 --> 00:02:56.445
second. 
Now, what happens when we do 

40
00:02:56.445 --> 00:03:00.815
quantization? 
Remember that F is going to be then 

41
00:03:00.815 --> 00:03:06.705
reconstructed, as we saw in the previous, 
video, as the sum of T. 

42
00:03:06.705 --> 00:03:12.669
The transform coefficients. 
And we can put R because you remember 

43
00:03:12.669 --> 00:03:16.484
that the forward and inverse were 
basically the same. 

44
00:03:16.484 --> 00:03:20.796
So this is how we're going to reconstruct 
our image. 

45
00:03:20.796 --> 00:03:27.596
Now if we quantize T we're not going to 
reconstruct F because we're going to have 

46
00:03:27.596 --> 00:03:32.654
an approximation of T. 
And then we're going to reconstruct an 

47
00:03:32.654 --> 00:03:37.380
approximation of F. 
And remember what's happening is this. 

48
00:03:37.380 --> 00:03:41.610
Our F is a linear combination of the 
coefficients, 

49
00:03:41.610 --> 00:03:46.360
either the original coefficients, or the 
quantized coefficients, a linear 

50
00:03:46.360 --> 00:03:51.030
combination multiplying the bases. 
And these are the bases. 

51
00:03:51.030 --> 00:03:57.165
So here I'm just drawing them in a four 
by four, but we know that we are talking 

52
00:03:57.165 --> 00:04:01.306
eight by eight. 
So this top coefficient basically says 

53
00:04:01.306 --> 00:04:04.707
how much of this basis we are going to be 
using. 

54
00:04:04.707 --> 00:04:10.570
And you can say, you know what? 
Maybe our visual perception is such that 

55
00:04:10.570 --> 00:04:16.314
if instead of what I wanted to use, which 
is 7.7 times these bases. 

56
00:04:16.314 --> 00:04:22.526
Maybe if I do 7.5 it's not such a big 
deal, and my visual system won't perceive 

57
00:04:22.526 --> 00:04:26.380
the difference. 
So that's idea of quantization, to 

58
00:04:26.380 --> 00:04:32.514
basically round or say, if I put slightly 
a different number of this component, 

59
00:04:32.514 --> 00:04:38.726
whatever component TUV represents, it 
might not be such a big deal in the 

60
00:04:38.726 --> 00:04:42.108
reconstruction. 
And we're going to see that. 

61
00:04:42.108 --> 00:04:45.490
Now, remember why are we doing 
quantization? 

62
00:04:45.490 --> 00:04:51.701
We are doing quantization because we are 
going to do Huffman coding after that. 

63
00:04:51.701 --> 00:04:57.136
And remember, in Huffman coding, we want 
a non-uniform distribution. 

64
00:04:57.136 --> 00:05:00.397
We want some coefficients to appear a 
lot, 

65
00:05:00.397 --> 00:05:06.143
so we're going to give a short code, 
and some coefficients to appear not much, 

66
00:05:06.143 --> 00:05:11.423
so we can give them a long code. 
for example, if we quantize a load, 

67
00:05:11.423 --> 00:05:15.150
we might find out that 7, 8, 9, 10 all 
become 0. 

68
00:05:15.150 --> 00:05:20.027
And then we're going to be able to 
basically compress a lot and we're 

69
00:05:20.027 --> 00:05:25.050
going to see a bit more examples of that 
in the next transparencies. Now, 

70
00:05:25.050 --> 00:05:28.508
this is the basic idea. 
As I say, we are going to quantize, we 

71
00:05:28.508 --> 00:05:32.937
are going to change the coefficients that 
hopefully we are not going to notice 

72
00:05:32.937 --> 00:05:35.546
that. 
Now there is something I want to call 

73
00:05:35.546 --> 00:05:39.126
your attention, 
something which is very smartly done in 

74
00:05:39.126 --> 00:05:43.376
JPEG. 
If we just do quantization, we still have 

75
00:05:43.376 --> 00:05:50.403
to send an eight by eight matrix of 
quantized, transformed values, means I 

76
00:05:50.403 --> 00:05:56.371
have to send 64 numbers. 
Now I started, let's say, from an image 

77
00:05:56.371 --> 00:06:01.120
that has eight bits per pixel, 256 gray 
levels. 

78
00:06:01.120 --> 00:06:07.780
Then I need to send each one of these, 
even if I'm going to use only one bit, as 

79
00:06:07.780 --> 00:06:12.365
it says here. 
So I started from eight bits, and I can 

80
00:06:12.365 --> 00:06:16.344
use one, 
then I can only compress eight to one. 

81
00:06:16.344 --> 00:06:22.485
I have to basically send you that value. 
JPEG say something very smart. 

82
00:06:22.485 --> 00:06:28.194
As we're going to see in a second, the 
top region is going to use as its 

83
00:06:28.194 --> 00:06:33.817
representation here, more bits. 
The quantization is going to be more 

84
00:06:33.817 --> 00:06:36.795
fine. 
In the lower corner here, JPEG is 

85
00:06:36.795 --> 00:06:41.270
going to say, you know what? 
I'm going to do very, very drastic 

86
00:06:41.270 --> 00:06:45.205
quantizations. 
So drastic, that a lot of the TUV, the 

87
00:06:45.205 --> 00:06:51.024
coefficients would become 0. 
So JPEG is not going to encode, is not 

88
00:06:51.024 --> 00:06:55.330
going to store this, then this, then 
this, to UV. 

89
00:06:55.330 --> 00:06:59.636
It's going to actually go in a zigzag 
fashion. 

90
00:06:59.636 --> 00:07:05.344
It's going to say, okay first, I'm 
going to just do a convention. 

91
00:07:05.344 --> 00:07:10.452
The first coefficient you see is this, 
which is T00. 

92
00:07:10.452 --> 00:07:16.060
The second coefficient you see is this 
one, which is T01. 

93
00:07:16.060 --> 00:07:21.933
The third coefficient you see is this 
one, which is T10, okay? 

94
00:07:21.933 --> 00:07:27.807
So you're going to be, basically be 
encoding the quantized 0, 0. 

95
00:07:27.807 --> 00:07:32.580
Then you're going to be encoding the 
quantized 0, 1. 

96
00:07:32.580 --> 00:07:36.440
Then you're going to be encoding the 
quantized 1, 

97
00:07:36.440 --> 00:07:39.851
0. 
And then you keep going in this zigzag 

98
00:07:39.851 --> 00:07:42.488
fashion. 
Now, why is that important? 

99
00:07:42.488 --> 00:07:46.055
As I say, a lot of these are going to 
become 0. 

100
00:07:46.055 --> 00:07:51.793
Their value is going to be 0, after we do 
a very strong quantization there. 

101
00:07:51.793 --> 00:07:57.609
So when JPEG arrives to a certain 
coefficient, and sees that everybody else 

102
00:07:57.609 --> 00:08:03.270
that comes after becomes 0, it just puts 
one signal that says end. 

103
00:08:03.270 --> 00:08:10.761
And if the nth is here, meaning everybody 
here is 0, then I save a lot of bits. 

104
00:08:10.761 --> 00:08:16.656
It's still sending one bit for each, 
let's say, to say, 0, 0, 0, we're 

105
00:08:16.656 --> 00:08:22.387
basically saying one end, and that means, 
to the end of my block, to the end of my 

106
00:08:22.387 --> 00:08:26.685
eight by eight transform coefficients, 
everybody became 0. 

107
00:08:26.685 --> 00:08:32.488
And that's a very smart thing, and that's 
what allow us to go beyond eight to one 

108
00:08:32.488 --> 00:08:35.425
and to very, very high compression 
ratios. 

109
00:08:35.425 --> 00:08:40.869
And the more you're quantizing this 
region, the earlier this end symbol will 

110
00:08:40.869 --> 00:08:44.307
appear. 
So that's the basic idea of quantization, 

111
00:08:44.307 --> 00:08:51.535
but let's just see how we do it. 
So, a very simple form of quantization is 

112
00:08:51.535 --> 00:08:56.205
what we have here, and that's called 
uniform quantization, and this is 

113
00:08:56.205 --> 00:09:00.537
basically what jpeg is doing. 
And, it's saying, okay you take your 

114
00:09:00.537 --> 00:09:04.192
coefficients. 
I want to do uniform quantization in the 

115
00:09:04.192 --> 00:09:07.780
sense that, let's just pick for example, 
this interval. 

116
00:09:08.840 --> 00:09:15.015
It's in, everything that falls in here. 
Every coefficient that has values between 

117
00:09:15.015 --> 00:09:18.690
this point and this point I'm going to 
represent with this. 

118
00:09:18.690 --> 00:09:23.409
So that's basically very important. 
So now I'm going to help halfman coding. 

119
00:09:23.409 --> 00:09:27.688
No matter what you are, you're going to 
be represented by one number. 

120
00:09:27.688 --> 00:09:32.282
So I'm basically going to increase the 
probability of that number appear. 

121
00:09:32.282 --> 00:09:37.505
Instead of having a lot of numbers appear 
very few times, I have one number appears 

122
00:09:37.505 --> 00:09:41.029
a lot of times. 
And that's very important as we know, for 

123
00:09:41.029 --> 00:09:45.496
halfman coding, or for any coder that 
will show up at the last stage of 

124
00:09:45.496 --> 00:09:48.454
compression. 
Now everything, for example, in this 

125
00:09:48.454 --> 00:09:53.208
interval from here to here would be 
represented by this value. 

126
00:09:53.208 --> 00:09:58.671
And the way JPEG does that, and many 
other coders, it's saying, okay, 

127
00:09:58.671 --> 00:10:04.133
I'm going to give you numbers that you're 
going to scale by that number. 

128
00:10:04.133 --> 00:10:07.857
Okay? 
And then just so, basically, it says that 

129
00:10:07.857 --> 00:10:14.505
the T00. 
The T00 is going to be divided by 16. 

130
00:10:14.505 --> 00:10:19.259
We saw that early on in one of the first 
videos. 

131
00:10:19.259 --> 00:10:25.797
This is going to be rounded, 
and then it's going to be multiplied by 

132
00:10:25.797 --> 00:10:31.271
16 again, 
and that basically became my new T00. 

133
00:10:31.271 --> 00:10:35.188
Very simple operation, but very 
efficient. 

134
00:10:35.188 --> 00:10:39.583
Maybe not ideal, maybe not the best I 
could do. 

135
00:10:39.583 --> 00:10:46.080
But JPEG is motivated as not only by 
doing good quality but also by 

136
00:10:46.080 --> 00:10:50.284
simplicity. 
And we have seen what this makes 

137
00:10:50.284 --> 00:10:55.157
proficiencts do. 
So as we see here, if T00 basically, 

138
00:10:55.157 --> 00:10:59.540
every number. 
Between zero. 

139
00:11:01.520 --> 00:11:06.831
And. 
Fifteen will become zero with this 

140
00:11:06.831 --> 00:11:11.447
operation. 
If I have seven divided by sixteen, it's 

141
00:11:11.447 --> 00:11:18.464
a number that when I round down, it 
becomes zero and multiply by sixteen and 

142
00:11:18.464 --> 00:11:24.100
it becomes zero, stays zero. 
So, basically every number here. 

143
00:11:24.100 --> 00:11:30.800
Became zero. 
Every number then. 

144
00:11:30.800 --> 00:11:35.980
Building sixteen. 
And 31. 

145
00:11:35.980 --> 00:11:40.210
Became one. 
So I'm basically quantizing. 

146
00:11:40.210 --> 00:11:46.446
And I'm helping Huffman to basically have 
less numbers to send, and also more 

147
00:11:46.446 --> 00:11:49.562
concentration. 
And the more we scale by. 

148
00:11:49.562 --> 00:11:55.984
So for example, if we scale by 100, it 
means every number between 0 and 99 will 

149
00:11:55.984 --> 00:12:00.186
become zero. 
So my quantization decision is much more 

150
00:12:00.186 --> 00:12:03.834
broad. 
So not as fine, but hopefully, if I do it 

151
00:12:03.834 --> 00:12:08.829
correct, I won't notice too much. 
So that's a basic idea of JPEG 

152
00:12:08.829 --> 00:12:12.243
quantization. 
So, it's going to give and I'm going to 

153
00:12:12.243 --> 00:12:17.371
show, that, basic, the default table in 
jpeg in a second, is going to do this. 

154
00:12:17.371 --> 00:12:22.932
And remember what I said in the previous 
slide because you're going to, quantize, 

155
00:12:22.932 --> 00:12:27.049
a lot, the high ones. 
A lot of these, are going to become 0, 

156
00:12:27.049 --> 00:12:32.394
and then this, end of block signal is 
going to be very powerful to compress, a 

157
00:12:32.394 --> 00:12:36.510
lot of symbols, with a, a lot of 
coefficients, a lot of TUV. 

158
00:12:36.510 --> 00:12:40.627
A lot of a, a, transform coefficients 
with just one symbol. 

159
00:12:40.627 --> 00:12:44.906
Extremely powerful. 
So let's just give an example. 

160
00:12:44.906 --> 00:12:48.035
This is done actually with a previous 
matrix, 

161
00:12:48.035 --> 00:12:52.138
and the basic idea, and this is how JPEG 
basically operates. 

162
00:12:52.138 --> 00:12:56.589
It's going to do the following. 
It's going to take this matrix, and I'm 

163
00:12:56.589 --> 00:13:00.205
going to show the matrix for JPEG in a 
second, as I say. 

164
00:13:00.205 --> 00:13:02.568
And say okay. 
Let's just do it. 

165
00:13:02.568 --> 00:13:07.715
Let's just divide by 16, 11, 12, 12, and 
so on, 

166
00:13:07.715 --> 00:13:15.179
ot I can tell you to divide by twice this 
matrix. So by 32, 22, 24, 24, and so on. 

167
00:13:15.179 --> 00:13:21.064
So, let's see the affects of that. 
So here we basically progressively are 

168
00:13:21.064 --> 00:13:27.096
dividing by the same matrix, but scale up 
and we see how the quality degrades. 

169
00:13:27.096 --> 00:13:30.621
Of course we're not going to want to do 
this. 

170
00:13:30.621 --> 00:13:36.730
What probably happened here is that we 
end up multiplying by 32 times Z so we 

171
00:13:36.730 --> 00:13:40.882
end up basically destroying most of the 
coefficients. 

172
00:13:40.882 --> 00:13:47.148
But if we basically don't multiply by too 
much that matrix so we can scale down, 

173
00:13:47.148 --> 00:13:52.984
divide by 16, divide by 11. 
Multiply around, multiply back and get 

174
00:13:52.984 --> 00:13:58.848
very, very decent quality images. 
The more we divide, the more we compress. 

175
00:13:58.848 --> 00:14:04.794
So if we, as we saw in the previous 
slide, if we're going to divide by two 

176
00:14:04.794 --> 00:14:10.332
we're only rounding basically. 
If we're going to divide by 100 we're 

177
00:14:10.332 --> 00:14:16.766
basically making these blocks of numbers 
become all equal or if we want to see 

178
00:14:16.766 --> 00:14:22.620
this in the graph, the larger this is. 
The more we are quantizing. 

179
00:14:23.940 --> 00:14:30.237
And this is as promised the default table 
that I think it's going to use or one of 

180
00:14:30.237 --> 00:14:36.383
the possibilities for the default table. 
And the reason why I'm showing it to you 

181
00:14:36.383 --> 00:14:41.847
is because once again I want to see you I 
want to show you how increase. 

182
00:14:41.847 --> 00:14:47.917
They're decreased by and there have been 
a lot of studies on this but still the 

183
00:14:47.917 --> 00:14:52.741
condensation is uniform. 
And once again you can basically do 

184
00:14:52.741 --> 00:14:59.460
multiplications of that matrix. 
So this is what you're going to get with 

185
00:14:59.460 --> 00:15:05.149
one scale of that matrix, and then if you 
scale it more you're going to get, and I 

186
00:15:05.149 --> 00:15:08.870
hope you can see the quality, and this is 
the error, 

187
00:15:08.870 --> 00:15:12.596
just in case, it's hard for you to see 
from the image. 

188
00:15:12.596 --> 00:15:15.761
But, lets just concentrate on certain 
regions. 

189
00:15:15.761 --> 00:15:20.331
We see here, it looks very nice. 
So probably, we haven't scaled the 

190
00:15:20.331 --> 00:15:25.043
quantization matrix too much. 
Here, we're actually scale it too much, 

191
00:15:25.043 --> 00:15:29.121
and it doesn't look very good. 
Look at this zoom-in region. 

192
00:15:29.121 --> 00:15:34.043
It really doesn't look very good. 
Also here, if you zoom in, you can see 

193
00:15:34.043 --> 00:15:37.630
some problems with the image, but not at 
this scale. 

194
00:15:37.630 --> 00:15:42.773
So, basically, what we have is a 
quantization matrix that says every one 

195
00:15:42.773 --> 00:15:45.671
of the transformed coefficients, 
TUV. 

196
00:15:45.671 --> 00:15:49.873
What do we want to do? 
Do we want to divide it and round and 

197
00:15:49.873 --> 00:15:52.626
divide it by five? 
Or divide it by 100? 

198
00:15:52.626 --> 00:15:57.769
And the larger the number we divide by, 
the more error we are producing. 

199
00:15:57.769 --> 00:16:01.391
But of course the more compression. 
we are doing. 

200
00:16:01.391 --> 00:16:05.883
So it's interesting. 
In some of the software packages that you 

201
00:16:05.883 --> 00:16:09.819
have out there, 
when you are saving an image, it asks you 

202
00:16:09.819 --> 00:16:13.780
for the quality that you want to save 
your JPEG image with. 

203
00:16:13.780 --> 00:16:19.131
And what it's asking you is basically how 
much to multiply this quantization 

204
00:16:19.131 --> 00:16:22.397
matrix. 
So the quantization matrix is basically, 

205
00:16:22.397 --> 00:16:27.069
in that package, is a fixed matrix. 
So how are you going to basically 

206
00:16:27.069 --> 00:16:31.688
compress more or less? 
By scaling up or down that quantization 

207
00:16:31.688 --> 00:16:35.041
matrix. 
So when it says you want high quality, 

208
00:16:35.041 --> 00:16:40.703
it's not, not going to scale by a lot. 
When it says you want high compression or 

209
00:16:40.703 --> 00:16:43.907
lower quality, it's going to scale it by 
a lot. 

210
00:16:43.907 --> 00:16:47.260
And that's how JPEG works. 
With a very simple, 

211
00:16:47.260 --> 00:16:52.839
basically uniform quantization that is 
done just by scaling and multiplying 

212
00:16:52.839 --> 00:16:56.142
back. 
Of course, the multiplication is done at 

213
00:16:56.142 --> 00:17:00.253
the decoder. 
So every number between 0 and 100, if you 

214
00:17:00.253 --> 00:17:05.759
scale down 100, between 0 and 99, sorry. 
If you scale by 100 it's going to be 

215
00:17:05.759 --> 00:17:11.265
coded at the zero and then the decoder is 
going to multiply by 100 to get the 

216
00:17:11.265 --> 00:17:15.230
number back. 
So that's what JPEG does for quantization 

217
00:17:15.230 --> 00:17:21.550
and that's where you get the compression. 
Now, I want to mention that. 

218
00:17:21.550 --> 00:17:27.329
There are techniques and there are 
theories to try to basically adapt the 

219
00:17:27.329 --> 00:17:32.639
quantization to the signal type. 
So, jpeg does a uniform quantization 

220
00:17:32.639 --> 00:17:37.247
because it's very simple. 
You, we don't have to do a uniform 

221
00:17:37.247 --> 00:17:41.464
quantization. 
We can have intervals as shown here, that 

222
00:17:41.464 --> 00:17:47.009
have basically different width. 
So some regions will be basically, scale 

223
00:17:47.009 --> 00:17:51.460
more than other regions. 
That doesn't happen in JPEG. it's 

224
00:17:51.460 --> 00:17:55.830
uniform. 
No matter what value is TUV. 

225
00:17:56.840 --> 00:18:02.649
You always divide, for a given 
coefficient position, you always divide 

226
00:18:02.649 --> 00:18:08.503
by exactly the same number. 
Now here, depending on what's your input, 

227
00:18:08.503 --> 00:18:13.565
the value your going to be divided by. 
And that's very important that JPEG 

228
00:18:13.565 --> 00:18:18.127
decided not to do that. 
Once again in part because of simplicity, 

229
00:18:18.127 --> 00:18:23.616
but I want to include this chapter in 
quantization by explaining to you that 

230
00:18:23.616 --> 00:18:28.749
you could actually to do better if you 
were willing to spend a bit more 

231
00:18:28.749 --> 00:18:33.668
complexity in your algorithm. 
And basically there is very nice theory 

232
00:18:33.668 --> 00:18:39.030
on how to do better and that's called the 
Max-Lloyd Optimal Quantizer. 

233
00:18:39.030 --> 00:18:45.257
And the basic idea is relatively simple, 
although computations are not always 

234
00:18:45.257 --> 00:18:49.623
straightforward. 
And what they have shown is basically 

235
00:18:49.623 --> 00:18:57.920
remember, if you want to measure the 
error as the square difference between a 

236
00:18:57.920 --> 00:19:04.866
given pixel and it's representation, 
and we talk about the square. 

237
00:19:04.866 --> 00:19:09.979
So that's a way you decide. 
You say, I want to do the best possible 

238
00:19:09.979 --> 00:19:15.325
quantizer considering this error. 
And considering that I have certain 

239
00:19:15.325 --> 00:19:20.593
allocations of bits. Of course, 
if you say, I don't care how many bits 

240
00:19:20.593 --> 00:19:26.093
are used, then don't quantize at all. 
That would be basically 0 error. 

241
00:19:26.093 --> 00:19:30.500
But if you come and tell me, I can only 
use, basically. 

242
00:19:30.500 --> 00:19:34.758
256 levels. 
So I can only use eight bits. 

243
00:19:34.758 --> 00:19:39.121
So I can only have 256 of these 
intervals, 

244
00:19:39.121 --> 00:19:46.600
because I need to represent each interval 
by one of my strings of bits. 

245
00:19:46.600 --> 00:19:52.563
And so you predefine the number of levels 
that you are willing to use, the number 

246
00:19:52.563 --> 00:19:56.244
of intervals, 
and you predefine this as your error. 

247
00:19:56.244 --> 00:20:01.912
So you can show that basically what we 
have to do, and this is very intuitive. 

248
00:20:01.912 --> 00:20:05.834
You say, okay, 
what's the error I am making in every 

249
00:20:05.834 --> 00:20:09.579
interval? 
So you are going in every one of these 

250
00:20:09.579 --> 00:20:14.338
intervals, so I am going to do s sub I 
minus one over s sub i. 

251
00:20:14.338 --> 00:20:20.501
That's my integration, and you can show 
that if this is the error that you care 

252
00:20:20.501 --> 00:20:28.575
about, 
then here you have to put s minus, 

253
00:20:28.575 --> 00:20:36.640
basically it's only S, because I'm going 
to do an integral, minus T sub I. 

254
00:20:36.640 --> 00:20:41.521
So that's the error. 
You get S, you represent it with T. 

255
00:20:41.521 --> 00:20:47.035
So that's your error. 
But you have to also multiply it by the 

256
00:20:47.035 --> 00:20:49.896
probability. 
Of that value appearing. 

257
00:20:49.896 --> 00:20:55.817
If it never appears in your input data, 
then you don't care about it, because you 

258
00:20:55.817 --> 00:21:00.480
are never going to make an error, and 
then you integrate over S. 

259
00:21:00.480 --> 00:21:05.957
So, that's one equation looks how the 
unknowns which is the borders of our 

260
00:21:05.957 --> 00:21:09.510
interval that we are trying to find 
appear here. 

261
00:21:09.510 --> 00:21:15.742
In the integral part and the 
representative appears here, at, so this 

262
00:21:15.742 --> 00:21:22.708
is only one equation, but we can get a 
second equation, you can actually show 

263
00:21:22.708 --> 00:21:28.340
that the S I. 
Are they average? 

264
00:21:28.340 --> 00:21:32.159
Of the TI. 
And the TI+1. 

265
00:21:32.159 --> 00:21:37.059
And that comes, because you are trying to 
compute the mean square error. 

266
00:21:37.059 --> 00:21:41.545
And that leads to average. 
And then from these you're going to get a 

267
00:21:41.545 --> 00:21:45.341
second equation. 
So you get basically two equations for 

268
00:21:45.341 --> 00:21:50.103
every one of these concatenated 
intervals, and you have to solve them. 

269
00:21:50.103 --> 00:21:54.727
And that's not always easy. 
And closed solutions do not exceeds for 

270
00:21:54.727 --> 00:22:00.126
most of the probability distributions. 
But they do exist if we assume that the 

271
00:22:00.126 --> 00:22:04.903
probability distribution is uniform. 
And that's what basically JPEG is using. 

272
00:22:04.903 --> 00:22:09.164
It's saying,"Okay, okay, the product 
distribution is uniform so I'm just going 

273
00:22:09.164 --> 00:22:12.134
to just do the rounding," as I explained 
before. 

274
00:22:12.134 --> 00:22:17.428
But there is good theory represented here 
basically in this equations that if you 

275
00:22:17.428 --> 00:22:20.421
knew... 
The probability distribution, you can 

276
00:22:20.421 --> 00:22:23.856
actually do better than just uniform 
quantization. 

277
00:22:23.856 --> 00:22:27.635
But once again, jpeg decided to do 
uniform quantization. 

278
00:22:27.635 --> 00:22:32.237
And that's both for simplicity and also 
what's called universality. 

279
00:22:32.237 --> 00:22:35.672
I don't need to know the probability 
distribution. 

280
00:22:35.672 --> 00:22:40.215
I'm going to make jpeg work. 
Very good for basically almost any image. 

281
00:22:40.215 --> 00:22:45.452
Maybe I could have done it better for 
some distributions, but I'm going to just 

282
00:22:45.452 --> 00:22:48.484
make it basically work for any 
distribution. 

283
00:22:48.484 --> 00:22:53.790
And I should say to you, that you can 
modify JPEG, and that it's still part of 

284
00:22:53.790 --> 00:22:57.580
the standard into this your own 
quantisation tables. 

285
00:22:57.580 --> 00:23:00.888
Which might follow a distribution that 
you know. 

286
00:23:00.888 --> 00:23:05.573
So if you are compressing a very 
particular class of images, you can 

287
00:23:05.573 --> 00:23:10.190
basically tune your JPEG to do that. 
So with this basically, we have 

288
00:23:10.190 --> 00:23:13.650
concluded. 
The basic underlying concepts of Jpeg. 

289
00:23:13.650 --> 00:23:19.265
We start from a transform, which is DCT. 
We quantize uniform quantization with 

290
00:23:19.265 --> 00:23:21.598
Huffman coding. 
Very, very simple. 

291
00:23:21.598 --> 00:23:26.702
And you're going to have, as one of your 
optional programming exercise, 

292
00:23:26.702 --> 00:23:30.712
to actually build JPEG. 
It's not going to take you long. 

293
00:23:30.712 --> 00:23:34.140
If you use, for example, a software lilke 
MATLAB, 

294
00:23:34.140 --> 00:23:37.826
you're going to do a DCT, which is a very 
simple command. 

295
00:23:37.826 --> 00:23:42.763
You're going to do a quantization. 
Remember, it's nothing other than divide, 

296
00:23:42.763 --> 00:23:47.910
round, and, if you're already playing the 
decoder, multiply back, by the same 

297
00:23:47.910 --> 00:23:50.970
number. 
And then you can do a Huffman coding. 

298
00:23:50.970 --> 00:23:56.464
But, even without the Huffman coding, you 
will be able to see, when you divide by 

299
00:23:56.464 --> 00:24:01.124
larger numbers, you basically get more 
compression, but, less quality. 

300
00:24:01.124 --> 00:24:01.820
Thank you. 