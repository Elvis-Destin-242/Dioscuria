【未完成版本】欢迎回来 在这个视频里 我们将学习Roto Brush Roto Brush是After Effects (以下简称AE) 内置的视频分割算法 AE 是Adobe公司开发的视频处理软件 产品 Roto Brush 随着当时新版本的AE 在2010年4月发布 是那一版AE的亮点之一 所以我觉得学习Roto Brush背后的基本概念挺酷的 那让我们直奔主题吧 当我们进行视频分割时 如果被分割的对象是将要面世的产品素材 如广告业或电影行业中的素材 我们的分割需要具备 一些基本特征 比如 非常高的像素精度 我们需要在像素甚至次像素级别上对素材进行分割 可想见 高精度分割这一难题所面临的挑战 所以用户必须参与到处理过程中来 而且我们要确保 用户是以非常舒适的方式 参与到整个过程中的 另外 用户与计算机的交互必须实时完成 你不能要求用户操作完后回家 几小时之后再回来看结果 你需要让用户与计算机实时交互 这些就是这类算法所需要具备的基本特征 当然 Roto Brush具备这些特征 我们需要高质量的分割 并且让分割出来的视频精度能达到次像素级 然后 这是我们之前看过的一个视频例子 （我们想把其中的两个运动员分割出来） 为什么分割视频如此具有挑战性？ 有许多原因 其中一些我们已经了解了 其中的一些我们稍后再提及 这就是我们面临的一些挑战 先前我们在处理图像时遇到过它们 现在处理视频也一样 这也是这儿我仍然使用照片来描述的原因 什么是叠加着色分布？这是什么意思？ 在上一张幻灯片中提到了我想把这两位运动员分割出来 但注意看 这位运动员穿的是白色上衣 观众中也有人穿的是白色上衣 另一位选手穿的是蓝色上衣 这也有蓝色 那也有 这有蓝色 总之图里有很多重复的颜色 我们之前讨论过 颜色相近的前景和背景将导致 不再有足够的的边缘信息帮助我们准确地分割 这是另外一个边缘信息不足够导致无法准确分割的例子 在这里 几乎没有边界 当我们根本看不到车的轮廓的时 将车分割出来便无从谈起 同时也出现了新的挑战 特别是在视频领域 存在所谓的拓扑变化 我们来看看是怎样变化的 这的手臂是不触碰身体的 而在之后的几帧中 手臂触碰到了身体 同时生成了这个洞 所以 我们所关注物体的实际形状 或者说总体形状是在变化着的 在这 又改变了一次 换了一个新宿主 因而视频的动态衔接带来了许多可变性 这也使得视频分割这个难题 变得特别具有挑战性 Roto Brush有哪些特征 以及Roto Brush分割视频的特征中 有哪些是我们需要具备的 尤其是其他同类视频分割方法 也要具备的特征 精确度 我们之前已经提过 健壮性 健壮性除了指算法需要处理 变化的图像 而且指算法需要处理多种类型的数据 我们希望这个算法能很好地处理所有类型的数据 这算法可能…可能处理一些数据特别有效率 这意味着有时只需要很少的用户参与度 而在处理一些数据时却需要更多的用户参与度 但是我们希望这算法能适用于所有类型的数据 因此算法必须实用 这就涉及到用户的介入 所以我们 想确保用户的介入只会改善算法整体的运行 而不是使它变得更糟 举例来说 当用户说 哦 一切都不错除了这有点问题 然后这用户 做了一些事 我们不希望这些事把他或她满意的部分毁个彻底 所以整个算法流程必须是自然流畅 非常简单的 而且正如我们所说的 算法需要非常高的计算效率 因为你知道 在美国NTSC制式中 一秒大约包含30帧 类似地 我们知道从PAL制式到NTSC制式 影像大致从每秒24帧到每秒30帧 我们不希望每一帧的处理都要花几个小时 我们希望每一帧都能在 舒适的交互时间内处理完 所以我将要讲到的算法 有四个主要步骤 已经写在这里了 首先 我们要依次在每帧中做分割 然后我们将分割向后传递多帧 接着 我将演示第三步——局部矫正 我也将简要地 提到第四步——后期处理 这个概念是关于视频分割的 而不只限于静态图像 我们将列举非常多 很酷的例子 让我们从局部分类来开始 先让我解释下我说的局部分类 指的是什么 我们假定从分割这一帧 给定的图像开始 这个工作量是微不足道的 记住我们现在要做的是分割整个视频 所以我们当然偶尔可以让用户进行手动分割 但我们知道 我们不用那么做 因为我们已经学了很多种 处理这种静物分割的方法 所以我们从一个分割开始 之后我们会把这个分割传递到下一个 这将是我们面临的第一个挑战 现在我们看到的是局部分类器 我们要把窗口的中心正对分割的部分 卡在刚刚计算出来的边界周围 所有的窗口将把图像围起来 所以每个部分都有一个窗口 每个像素都有一个窗口 或者我们让一条曲线上每几个重叠的像素有一个窗口 正如我们在这儿展示的这样 这儿的每一个窗口 都告诉我们非常重要的信息 再重复一次 这只是局部窗口 也就是在这儿的窗口 我们现在已经获取了某一帧的分割信息 令它为第T帧 我们有了边界信息 也就能分出对象内部 和对象外部 因此 在窗口中我们拥有了两个 非常重要的特征信息 我们知道了形状先验的信息 也就是说 我们认为下一帧图像的形状与上一帧相似 记得一帧的时间是非常短的 所以一般说来 物体在帧与帧之间不会改变太多所以 形状先验成立 我们还拥有颜色模型 在这个模型中 我们可以预测在前景和背景中 将看到什么颜色 这是这些小窗格要做的事 让我们来看看如何使用吧 我们现在在第T帧 想把第T+1帧分割完成 正如我所说 这是我们手动操作的一帧 或者是根据算法分割好的一帧 我会在下一张幻灯片中讲到 这些窗格围绕着物体 现在我想把这位运动员 分割出来 我们首先要做的是 把这些窗格移动到新的一帧上 我们的移动不用做任何改变 并且结果不会太坏 或者可以遵循运动估计（Motion Estimation）来移动 回忆一下 以前讲视频压缩的时候 我们在当前帧选择一个块 再到前一帧图像中去寻找最相似的块儿 这就是我们正在做的事 比如 我们可以锁定每个区域 然后往前或往后找 看看哪个块与它最相近 哪个局部窗格 与它最接近 例如我们可以从这个 局部窗格开始 在另一帧中它周围的区域中寻找 然后移动到我们认为与其最接近的窗格 我们可以计算均方误 绝对误差 来衡量接近的程度 与我们先前讲到视频压缩时 判断误差的方法相同 我们让每个窗格都有了一个新的位置 再重复一次 如果你认为图像几乎没有移动 那你可以直接在同一位置上复制 所以要么我们直接复制窗格 要么遵循运动估计来移动窗格 现在我们在要分割的新一帧中也建立了窗格 还记得第三步吗？ 我将选择两个窗格 一个在当前一帧中 一个在另一帧中 这儿是我们已经完成的分割 这是我们要分割的部分 现在我们正在把红色的曲线转换为蓝色的 因为物体(或说这个区域)已经移动了 但是还不能采信蓝色曲线
这里还需要调整 我们把这张图片叫做“训练图”(training) 因为它是已有的东西 还有一张形状先验以及颜色分布 我们可以认为它大概就是这里的曲线 还有颜色分布 前景的 后景的 我为什么在这儿写上“GMM”呢？
因为它代表高斯混合模型 (Gaussian mixture models) 是一种模拟前景与后景分布的方法 再想一下直方图分布 这次不是用直方图来模拟 而是用参数函数 这就是我们采用Roto Brush高斯混合模型的原因 但这不是关键 
只要记得 你得到了前景颜色的分布 和后景颜色的分布 简单来说 想想直方图就行了 我们要结合这些 来确定蓝色曲线的准确位置 重新说一次 红色曲线要变换成蓝色的 而蓝色的可以出现在红色的附近(而不完全一样) 这些告诉我们蓝色曲线大概应该在哪里 我不会让蓝色曲线完全改变
因为不期望逐帧得到的形状 完全改变
我同样不期待 颜色 像素值会完全改变 这些是很好的颜色分布的先验
对这里的每个像素 可以指出更可能是前景还是后景 由此可以得到这样一副图像 而我们希望把二者结合起来 融合这个形状分布先验和颜色分布先验
至于如何将它们融合 则是后面将要解释的
关键在于从已知的东西 我们能得到所有区块 形状和颜色上的概率分布 融合二者 就得到了每个像素为前景或后景的概率 这发生在由前一帧得来的每一个区块 现在我们把它放回去 就得到了整个图像的概率分布
利用诸如Graph-Cuts算法 就可以得到这一帧的分割
由此又可以得到下一帧的 那之前 需要解释下如何融合 讲到融合 要记住 我们已知的是颜色和形状的先验分布 对于每一个区块 如何融合颜色和形状呢？ 基本想法写在这里
如果颜色分离得很好了 就采信颜色
否则就采信形状 如果二者矛盾
那就一并采信并融合它们 这里是前一帧得来的颜色分布 从前一帧得到一些信息 一个可信的分割 由此得到了形状分布先验 颜色分布先验 如果前景和后景在颜色分布上很好地分离了
就会看到诸如每种颜色的直方图 或者所有颜色的一个分布 能看到它们很好地分开来
可以有许多方法来测量这种分离程度 如果分割开了 那就相信颜色 相信概率 只有限地运用形状先验
假设原来的形状在这里 譬如说是这条曲线 由形状先验图可知 新的分割曲线所在的范围可以很大 可以得到这个相对很大的区域中每一个像素 总的来说你有两种概率 把它们融合 就得到了可信的映射 所有的概率 也就是上一页中我们看到的那个概率分布 以上是对颜色分布有信心的情况
假如分布出现更多的重叠 而无法非常采信
那要做的就是 把表示形状先验的这个窄带变得窄一些 我不希望这一区块里的边界 偏离我的预测太多
多少要在预测附近 重叠造成对颜色的不信任越严重
条带设置得就越窄 这是视频中的三个例子 是真实的例子 这里是运动员的背部
颜色很好地分离开了 这是另一个区域
分离得不是太好 再看这里 连图像上都 分辨不太出前景与后景 这些不同情况 其区别在于
给定形状先验 这里像这样
这儿像这样 而这里像这样
该让形状先验 给新曲线的位置施加多大的影响呢？ 若对颜色采信地多 就扩展形状先验决定的边界 就是说 随你想在哪里
颜色会帮助你的 对颜色采信地越少
形状边界就越窄 颜色分布给不出什么信息时 就靠缩小形状边界来救场
就是说 它不能变动地太多 所以这会是非常窄的条带
这些颜色边界取决于概率 取决于前一帧的颜色分布 形状先验的实际采信度 取决于颜色先验的采信度 把二者相加 并正规化 就得到了之前例子里的解答 例如 在这里没法采信颜色 它们太相近了
不过由于前一帧被良好地分割了 形状先验就能帮助我们接着做这一帧的分割 在结合多种信息 以得到想要的分割时
这是个很重要的理念 接下来演示下这有多重要 这是分割了的一帧 这匹马被分割出来了
接下来要分割下一帧 首先 为何是局部的？
记住 这一帧里 围绕马有一些区块
我们都是在局部操作 区块之间会共享信息
但所有操作都是局部的 如果没有那样做
如果把整帧当作一个区块 颜色就会太多变 分布就没有什么意义了 也就无法把马分割出来 如果在局部基于颜色分割 结果是这样的 得到的东西就会好太多
因为我们只关心 边界上每个像素点附近的情况 还有一些问题
我们看到这里 马是白的
马车也是白的 显然颜色就起不到太大作用了 问题来了 对吗？ 这时要靠形状先验了
做下一帧时颜色和形状都会用到 而这里就是形状起作用了 这里显示了把局部性、形状和颜色结合后
得到的东西 这是很好的边界先验分布 运用类似于Graph-Cuts的算法
马上就能得到很好的分割 由此还能得到下一帧的分割 因此 要获得准确的分割
局部性 形状和颜色 都很重要 我们很快将看到 局部分割的重要性不仅于此 它也有助于在图像处理上建立更友好的用户交互 以上就是如何从上一帧的分割得到这一帧的 不过我们不止想做一帧 而是想做多帧
要怎么做呢？ 基本思想是 第一帧的分割 到其下一帧
再从这帧 到下一帧
这一帧的分割 到下一帧 如此就可一直做下去 然而这种做法有个根本问题 问题出现在误差积累上
我们采信这一帧 我们很信任它
也许因为是手动分割的 也许因为花费的工作够多 而这一帧是靠我讲过的算法
从这一帧得出的 它也许不太完美 如果我把这传递给下一帧 那么在这儿产生的误差 传递给了下一个 这意味着我的 形状先验误差传递了  我的颜色分布 以及对这一帧的估计 (如果有错误)  也传递了 解决办法之一就是  为了稳定系统 为什么我们不让色彩先验亦在此产生影响呢 为什么我们不让他们保持前进? 这也是 这也是 这是我们很相信的朋友 所以让它继续向前 记住我们正在以块工作 所以在局部上 我们让它向前移 用这种方法 每一帧都会得到原始帧的一些信息 也从我们非常信任的原始分割中 得到信息 用这种方法 结果是 我们做的分割不仅传递了一帧 而且传播到后面的许多帧  所以又一次地 因为我们的操作是局部性的 所以我们信任的信息不必影响全局 只要对局部的影响是可信的就可以了 这种可以传递到多个帧的信息 有助于稳定系统 我们可以重复这样做 将当前分割作为初始状态 或者作为后面分割的先验等等 这种帧可以选择这样操作 但是关键部分是使用我们信任的信息 尽可能多的利用上先前的帧 在我举例之前 我们有几件事要做 一件是 我们如何让用户修复错误？ 不管我们写的算法多么完美 视频分割是一个非常非常难的问题 尤其当我们想分割一个两个小时的电影时 所以 我们要让用户帮助改善算法的效果 记住 当我们相信一个朋友 我们是真的相信  所以我们最好确定 所有的朋友一直处于良好的状态中 这有个例子 这里有一系列连续帧  然后我们发现 这很好 这很好 但是这里有一个错误 所以我们如何让用户修复这个错误？ 又一次 在局部块上的操作起了很大作用 所以我们想要这样操作 我们想去修复它 有很多帮助我们修复的包 我想再展示一下刚才的操作 这里有错误 现在修复好了 我们可以用很多不同的包修复它  PS  AE 你只需点一下就可以改变曲线  当然 要记住 它们是传递过的  这些分割都是传递来的 这个早已存在的误差 传递 传递 传递 现在 我希望刚才所做的这个修正  也像这样传递下去 既然之前的分割都是正确的 我不想它向后传播 我不想这里的校正 影响这里 因为我对这里已经很满意了 至此 我们学会了局部块 局部修复的所有内容 这很好 我们看看每一个块 或者每一个修补 都被最近的修复所影响 因为我们已经做过运动估计 我们知道 这些块在后续帧中的去向 也知道将来它们的位置 接下来我们只在块中做修复 或许我们可以扩展 到几个边 让修复更加连续 但是确定的是我们一定 不会让那个修正传递得太远 这就是我们局部控制的方法 所以这些块帮助我们得到局部特征 也助于我们更快地交互 所以看下修复后会发生什么 我们操作了 这是结果 我们把它们修复了 让我再演示一遍 我们遇到一个错误 但是我们修复了这个错误 我们让这个修正传递到后续帧中的相关块 这样我们把所有的都修复了 接下来继续 从这一帧开始 分割前面帧 所以 这非常酷 这是第三步 局部修复 最后的事情是 目前为止 我们已经逐帧进行了分割 这是一部电影  我们希望这些分割是逐帧连续且一致的 达到这种效果的方法之一是使之平滑化 我们每帧都有分割 我们要让这些分割的过渡是平滑的 规范化它们以使来让它们看上去更好些 接下来让你看看发生了什么 所以你看这里 这的边缘有点粗糙 这儿就好多了 我们将多个帧的分割一起平滑一下 使之从粗糙到平滑 这样就可以把这个物体放到其他电影里 或者做出其他效果 所以现在 是时候来展示下 这个很酷技术的例子 这是一个我们看过很多遍的例子 所以 在这我们有好几个例子 但是我现在不准备演示 我们已经对这个人做了分割  效果看上去非常好 他经过了各种处理  修复 光滑 所有的 看上去真的真的很好 这是个我们看过多次的例子 我们在背景模糊后 在背景模糊的实例中我们见过这个 这是我们以前看过的一个特效 在之前的一个介绍视频中出现过 我们把运动员分割 并把他们放到一个模糊的背景中 来增强运动员 将观看者的注意力吸引至运动员上 这还有其他的好例子 特效的例子 这是原始视频 这是经过滤波的 你可以看到冲浪的女士已经被筛选出了 所以首先我们要分割出这个 难点在于飞溅的水滴 以及这里的拓扑改变 一旦我们把它分割出来 我们可以对它做非常漂亮的特效  像这儿一样 我们改变了人身上的光照 正如你看的那样 我们不必影响背景 因为我们已经把前景分割了出来 这是我们见过的合成 一切从这个糟糕的原图开始 我想再给你们举些例子 我觉得这真的很酷 这又有个例子 我们把运动员从背景中分割出来 看这个问题多么困难 背景全是蓝色或白色的 或者说蓝色和灰色 跟运动员一样 一切都混淆在一起 但是我们有形状 这帮了我们不少 一旦把运动员分离出来 我们就可以修改背景 比如 将之模糊化  这也基于 刚才向你们解释过的 把前景抠出来的概念 对于本例 不仅要对前景色建模 我们也可以将背景色建模 我之前一直再讲 让我们给前景的颜色和形状建模 为什么不对背景研究下呢？ 这样对结果会有改善 但是 概念非常相似 我再举个例子 所以 这是一个特殊效果 我们将演员分割出来 在多个位置上重复 同样 这里的最大挑战是把他分割出来 这里的对比非常强烈 尤其在衬衫和背景之间 所以颜色对于分割是非常重要的 但是同样演员的形状在移动 但是不是完全地变形 所以形状先验很有用  所以这告诉我们 这个最受欢迎的视频分割技术的原理 尤其是旋转笔刷 旋转笔刷功能被合并进了 Adobe 的 AE 中 我们看到这个技术的实现有很多方法 它利用形状 利用颜色 利用局部结构 局部学习 这些都能有助于更精准地预测 当用户需要做修正时 这些方法也方便了用户操作 这些概念加在一起就形成了这种精度高 而且对用户友好的视频分割 非常感谢 希望你享受学习 下节视频见 谢谢【未完成版本】