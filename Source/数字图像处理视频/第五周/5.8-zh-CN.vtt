WEBVTT

1
00:00:00.000 --> 00:00:04.326
大家好 欢迎回来 在这节视频中 我们将讨论 

2
00:00:04.326 --> 00:00:09.490
一种应用于图像和视频分割 以及其他图像处理方法中的重要技术 

3
00:00:09.490 --> 00:00:13.816
如我们所见 那就是图像分割技术 

4
00:00:13.816 --> 00:00:17.445
接下来 我将用一幅简单的图像为大家阐述图像分割技术 

5
00:00:17.445 --> 00:00:21.771
然后给出几个例子 

6
00:00:21.771 --> 00:00:25.540
首先 什么是图像分割？让我们从一幅简单的图像说起 

7
00:00:25.540 --> 00:00:29.860
这是一幅黑白图像 图像分割的基本思想就是 

8
00:00:29.860 --> 00:00:35.860
借助图论的一些工具 将一幅图划分为前景和背景 

9
00:00:35.860 --> 00:00:39.871
为了更直观 我们将这幅图像倾斜 

10
00:00:39.871 --> 00:00:46.215
然后在图像中间取一条线 

11
00:00:46.215 --> 00:00:49.187
就像这样 我们取这一条线 

12
00:00:49.187 --> 00:00:53.696
然后 要把这条线表示出来 

13
00:00:53.696 --> 00:01:00.237
在我们将要构建的图像上 每一个像素都会表示为一个节点 

14
00:01:00.237 --> 00:01:04.657
这些节点粗略地表示每个像素 

15
00:01:04.657 --> 00:01:08.900
为了方便描述 图像中的每一个节点就代表一个像素 

16
00:01:08.900 --> 00:01:13.090
现在 我们要添加两种节点 

17
00:01:13.090 --> 00:01:19.922
一种被称为“汇节点” 用来代表背景像素 

18
00:01:19.922 --> 00:01:23.086
另一种被称为“源节点” 

19
00:01:23.086 --> 00:01:26.749
用来代表前景像素 

20
00:01:26.749 --> 00:01:31.739
重复一遍 图像中每个像素表示为一个节点 所以这里会出现很多节点 

21
00:01:31.739 --> 00:01:34.897
大家可以想象一幅平面的图像 

22
00:01:34.897 --> 00:01:36.966
像这个一样 

23
00:01:36.966 --> 00:01:42.417
然后在这里放了一个源节点和汇节点 

24
00:01:42.417 --> 00:01:49.087
我们有很多在平面上的节点 

25
00:01:49.087 --> 00:01:55.595
以及在顶部和底部的两个节点 现在我们已经有了图像中的节点 

26
00:01:55.595 --> 00:01:59.499
接下来要做的就是构造边 

27
00:01:59.499 --> 00:02:04.967
怎样把这些节点连起来呢 首先 我们要考虑 

28
00:02:04.967 --> 00:02:10.940
怎样把代表每个像素的节点 和代表前景的源节点 以及代表背景的汇节点连起来 

29
00:02:10.940 --> 00:02:14.647
基本思想就是 

30
00:02:14.647 --> 00:02:20.580
根据每一个像素点可能成为前景或者背景的概率 

31
00:02:20.580 --> 00:02:24.665
进行度量 然后将它们连起来 

32
00:02:24.665 --> 00:02:28.162
也就是说 图像中的每个像素点 都用一个节点来表示 

33
00:02:28.162 --> 00:02:32.158
然后观察这些节点 它成为前景的概率有多大 

34
00:02:32.158 --> 00:02:37.224
然后按照由概率所决定的权重 将其与源节点连起来 

35
00:02:37.224 --> 00:02:42.147
这也就是边的权重 

36
00:02:42.147 --> 00:02:46.429
同样的 我们考虑这个节点成为背景的概率有多大 

37
00:02:46.429 --> 00:02:51.923
然后用这个概率来决定 该节点与代表背景的汇节点相连的边的权重 

38
00:02:51.923 --> 00:02:56.990
那么 怎样来计算概率呢？ 

39
00:02:56.990 --> 00:03:02.719
举个例子 就像我们在前面的视频中看到的 如果这是一个交互式的系统 

40
00:03:02.719 --> 00:03:08.013
我们会得到不同的涂抹 参见上一个视频 

41
00:03:08.013 --> 00:03:13.162
我们可以利用这些周围像素的信息 所以这是很开放的 

42
00:03:13.162 --> 00:03:18.456
而且是算法设计中的一部分 但是就像前一个视频中所说 

43
00:03:18.456 --> 00:03:22.953
最简单的方法是利用那些涂抹的信息 

44
00:03:22.953 --> 00:03:28.030
现在我们连好了每一个节点 意味着每个像素和前景节点以及背景节点都连起来了 

45
00:03:28.030 --> 00:03:33.289
接下来 我们需要在像素点之间互相连接 

46
00:03:33.289 --> 00:03:38.272
也就是说 通过像素点之间的互相连接 

47
00:03:38.272 --> 00:03:43.708
来构造边 特别地 我们只需连接相邻的两个像素点 

48
00:03:43.708 --> 00:03:47.860
换句话说 就是连接相邻节点 

49
00:03:47.860 --> 00:03:50.650
也就是连接右面的点 或上面的点 

50
00:03:50.650 --> 00:03:56.093
下面的点 左面的点 或者是对角线上的点 

51
00:03:56.093 --> 00:03:59.063
在课程初期我们就谈论过4邻域和8邻域的概念 

52
00:03:59.063 --> 00:04:04.294
在这里 只用其中一种 现在的问题是 

53
00:04:04.294 --> 00:04:08.550
如何衡量边的权重 我希望你思考一下 

54
00:04:08.550 --> 00:04:13.367
你会怎么做  这个操作需要有助于你进行图像分割 

55
00:04:13.367 --> 00:04:17.236
为什么不先自己思考一会儿呢？ 

56
00:04:17.236 --> 00:04:22.929
然后在视频中的小测中写下来 告诉我 

57
00:04:22.929 --> 00:04:29.065
关于权重你是怎么想的 非常感谢大家思考这个问题 

58
00:04:29.065 --> 00:04:33.817
实际上 权重就是使得相似的像素点 

59
00:04:33.817 --> 00:04:39.420
尽量保持在同一个部分中 

60
00:04:39.420 --> 00:04:44.068
而不同的像素点尽量被分割到不同的部分中 

61
00:04:44.068 --> 00:04:47.065
从而区分前景和背景 

62
00:04:47.065 --> 00:04:51.795
举个例子 我们可以让权重与梯度成比例 

63
00:04:51.795 --> 00:04:57.256
我们可以设置权重 使其正比于像素值之差 

64
00:04:57.256 --> 00:05:01.519
或者具体的说 正比于该像素值与相邻像素值之差 

65
00:05:01.519 --> 00:05:06.715
因此 我们必须根据不同应用 来定义相似点 

66
00:05:06.715 --> 00:05:11.710
以确定哪些是相似的像素 使它们划分到一块 

67
00:05:11.710 --> 00:05:15.367
并区分不同像素 

68
00:05:15.367 --> 00:05:20.401
形成前景和背景 一旦构造出了整个图 

69
00:05:20.401 --> 00:05:25.379
然后我们应用图论 就可以分割图像了 

70
00:05:25.379 --> 00:05:29.150
接下来我们就可以构建最小割 (min cut) 

71
00:05:29.150 --> 00:05:35.927
这是一种花费最小的分割方法 它试图 

72
00:05:35.927 --> 00:05:42.528
从最弱的节点开始分割前景 意味着其成为背景的概率很大 

73
00:05:42.528 --> 00:05:49.217
而成为前景的概率很低 于是图像将从该点进行切割 

74
00:05:49.217 --> 00:05:53.530
再切割 并继续往下进行 

75
00:05:53.530 --> 00:05:59.430
当进行到 对应于像素值的节点平面上时 

76
00:05:59.430 --> 00:06:05.032
我们将尝试穿过像素之间的边 

77
00:06:05.032 --> 00:06:09.364
并且告知算法 这些边所连接的像素有很大差异 

78
00:06:09.364 --> 00:06:13.323
因此这些像素很可能需要分在不同的区域 

79
00:06:13.323 --> 00:06:18.700
所以 最小割试图切断弱连接的边 因为它会增加切割的代价 

80
00:06:18.700 --> 00:06:23.772
这个代价正是 被切割的边的权重之和 

81
00:06:23.772 --> 00:06:27.979
就这样 试图切断弱连接的边 

82
00:06:27.979 --> 00:06:33.028
以这种方式分离前景和背景 

83
00:06:33.028 --> 00:06:37.007
现在 我们有了很好的技术来实现这个过程 

84
00:06:37.007 --> 00:06:43.065
而且可以在多项式时间获得求解 

85
00:06:43.065 --> 00:06:47.520
也就是说 我们可以非常高效地解决这个最小割问题 

86
00:06:47.520 --> 00:06:52.774
然后通过这种方法 成功分离前景和背景 

87
00:06:52.774 --> 00:06:58.029
这种技术也可以扩展到 分割图像中的多种物体 

88
00:06:58.029 --> 00:07:01.782
不仅仅是前景和背景 还包括其他形式的输入数据 

89
00:07:01.782 --> 00:07:06.832
但是当我们考虑一个源节点和一个汇节点时 阐述起来会更简单 

90
00:07:06.832 --> 00:07:10.473
也就是前景和背景的分离 

91
00:07:10.473 --> 00:07:14.648
所以 只需两步 第一步 构造图 

92
00:07:14.648 --> 00:07:18.740
第二步 产生最小割 

93
00:07:18.740 --> 00:07:22.328
第二步中 会用到图论中一个很好的算法 

94
00:07:22.328 --> 00:07:28.334
第一步构造图是指 将图像处理的信息转化到图中 

95
00:07:28.334 --> 00:07:32.290
下面给大家讲几个例子 

96
00:07:32.290 --> 00:07:38.718
这里我们可以看到一些例子 

97
00:07:38.718 --> 00:07:45.226
像之前说的那样 通过基于背景涂抹的图割技术 

98
00:07:45.226 --> 00:07:50.530
得到这里所看到图像分割 

99
00:07:50.530 --> 00:07:54.950
第二个和第三个例子也是这样 

100
00:07:54.950 --> 00:07:59.371
再次提醒 这个运算过程会非常非常快速 

101
00:07:59.371 --> 00:08:05.484
下面我为大家展示一个非常棒的应用该技术的例子 

102
00:08:05.484 --> 00:08:10.940
现在我们在一次旅行中选取一张照片 将其分割 

103
00:08:12.120 --> 00:08:20.560
然后放入一张大图片里 下面的图像也这么做 

104
00:08:20.560 --> 00:08:27.380
用刚刚所讲的技术将其分割 继续放进这张大图中 

105
00:08:27.380 --> 00:08:31.367
然后对其他照片重复应用这个步骤 

106
00:08:31.367 --> 00:08:35.176
最后通过剪切和粘贴 

107
00:08:35.176 --> 00:08:41.304
得到一幅组合了许多图像的新的图像 

108
00:08:41.304 --> 00:08:47.260
我觉得这是很棒的例子 

109
00:08:47.260 --> 00:08:53.483
是交互式图像分割技术的一个很好的应用 

110
00:08:53.483 --> 00:08:59.176
在这里例子中 运用了有关最小割或图割技术的巧妙实现 

111
00:08:59.176 --> 00:09:02.440
来进行图像分割 

112
00:09:02.440 --> 00:09:07.956
我想总结的是 这种类型的技术 

113
00:09:07.956 --> 00:09:11.222
已经被并入了微软的Office软件中 

114
00:09:11.222 --> 00:09:16.956
所以 正如我们在一些例子中已经见到的 

115
00:09:16.956 --> 00:09:21.820
以及在之后的视频中将要见到的 

116
00:09:21.820 --> 00:09:27.570
这是一种非常现代化的图像处理技术 而且已经被一些人们常用的流行软件所采纳 

117
00:09:27.570 --> 00:09:31.563
非常感谢大家 

118
00:09:31.563 --> 00:09:33.640
我们下一个视频再见