WEBVTT

1
00:00:00.000 --> 00:00:04.679
Hello, and welcome back. 
I want to discuss now the Mumford-Shah 

2
00:00:04.679 --> 00:00:09.820
Image Segmentation technique, and I'm 
going to do that with one example. 

3
00:00:09.820 --> 00:00:14.877
Let's just look at this image. 
We talk that image segmentation means 

4
00:00:14.877 --> 00:00:19.245
labeling the image. 
We want to label every segment that has 

5
00:00:19.245 --> 00:00:24.379
some coherence in it with a different 
name, with a different number. 

6
00:00:24.379 --> 00:00:30.049
One way of doing that is, of course, 
basically, painting that segment with a 

7
00:00:30.049 --> 00:00:35.720
uniform, or a very smooth grey value. 
And that's the type of stuff that the 

8
00:00:35.720 --> 00:00:39.398
Mumford-Shah algorithm and technique 
tries to do. 

9
00:00:39.398 --> 00:00:44.080
Let's just discuss that. 
Here, we have an original image. 

10
00:00:44.080 --> 00:00:47.790
Don't pay attention to these two for the 
moment. 

11
00:00:47.790 --> 00:00:51.423
It's going to be very clear in just a few 
seconds. 

12
00:00:51.423 --> 00:00:56.525
And this is the result of one 
implementation of Mumford-Shah image 

13
00:00:56.525 --> 00:01:00.608
segmentation. 
So, very rich gray values become just a 

14
00:01:00.608 --> 00:01:05.423
few smooth segments. 
Looks like almost like quantization when 

15
00:01:05.423 --> 00:01:11.057
we talk about image compression. 
So, the first part is that we want to 

16
00:01:11.057 --> 00:01:17.944
approximate the original image by just a 
few segments that are either constant or 

17
00:01:17.944 --> 00:01:21.891
very smooth. 
Of course, we want an approximation. 

18
00:01:21.891 --> 00:01:27.434
So, one of the terms that this 
Mumford-Shah needs to include is a 

19
00:01:27.434 --> 00:01:32.137
penalty from deviating too much from the 
original image. 

20
00:01:32.137 --> 00:01:38.436
Of course, piece wise smooth, or piece 
wise constant, I could make this whole 

21
00:01:38.436 --> 00:01:42.378
image wide. 
So, that's one very smooth segment. 

22
00:01:42.378 --> 00:01:49.126
But it's very far, if I do that, it would 
be very far from the original image. 

23
00:01:49.126 --> 00:01:55.429
So, one of the things is we have to 
somehow penalize for the difference 

24
00:01:55.429 --> 00:01:58.714
between these two images. 
For example, the mean square error. 

25
00:02:02.040 --> 00:02:05.960
We already talk about it very early on in 
this class. 

26
00:02:05.960 --> 00:02:11.656
So, one penalty is the mean square error. 
We want to get the piece wise smooth 

27
00:02:11.656 --> 00:02:15.133
version of this image, but not very far 
from it. 

28
00:02:15.133 --> 00:02:19.867
Now, you might wonder, okay, 
if you're going to penalize for the mean 

29
00:02:19.867 --> 00:02:23.270
square error, why not to keep the image 
itself? 

30
00:02:23.270 --> 00:02:27.723
That's very clever, but we don't achieve 
any segmentation. 

31
00:02:27.723 --> 00:02:31.630
So, how do I know I don't achieve any 
segmentation? 

32
00:02:31.630 --> 00:02:38.633
Because I'm going to add a term that 
penalizes for having too many boundaries 

33
00:02:38.633 --> 00:02:44.423
in the segmented image. 
So, these are the regular edges of this 

34
00:02:44.423 --> 00:02:46.664
image. 
Very strong edges. 

35
00:02:46.664 --> 00:02:51.800
These are boundaries of the segments that 
we have here. 

36
00:02:51.800 --> 00:02:56.739
I don't want to have too many. 
I don't want to have all these. 

37
00:02:56.739 --> 00:03:03.161
I'm going to penalize for the number of 
edges for how many, how much do I pay for 

38
00:03:03.161 --> 00:03:07.113
having boundaries. 
So that would be another term. 

39
00:03:07.113 --> 00:03:12.547
I'm going to basically, on one hand, I 
want to penalize for very large 

40
00:03:12.547 --> 00:03:18.519
differences, and on the other hand, I'm 
going to penalize for edges. 

41
00:03:18.519 --> 00:03:24.865
So, if you have too much edges, you are 
going to pay a price. 

42
00:03:24.865 --> 00:03:33.477
Bec, so, if I keep the image as it is, 
I have no error here but I have lot of 

43
00:03:33.477 --> 00:03:38.660
edges. 
Basically, every pixel becomes a segment, 

44
00:03:38.660 --> 00:03:42.722
so I'm paying a very large penalty for 
edges. 

45
00:03:42.722 --> 00:03:49.853
If I have a flat image, I don't pay any 
penalty for edges, but I pay a very high 

46
00:03:49.853 --> 00:03:54.637
penalty for error. 
And then, I have to do a compromise 

47
00:03:54.637 --> 00:04:01.290
between these two and that's what 
Mumford-Shah basic concept is, to write 

48
00:04:01.290 --> 00:04:08.615
formulations that compromise between a 
representation of the image that is too 

49
00:04:08.615 --> 00:04:14.828
far from the original image. 
We want to simplify representation not 

50
00:04:14.828 --> 00:04:22.053
too far from the original image, and we 
also don't want to pay a high price and 

51
00:04:22.053 --> 00:04:26.937
get too many segments. 
Now, there are many ways of doing this. 

52
00:04:26.937 --> 00:04:33.286
There's some beautiful mathematical 
theory behind different formulations that 

53
00:04:33.286 --> 00:04:38.088
do this compromise. 
Some theory relates even to compression. 

54
00:04:38.088 --> 00:04:44.193
You have to compress this image and this 
edges, and then you try to optimize for 

55
00:04:44.193 --> 00:04:46.976
that, 
yours and my, need to compare for the 

56
00:04:46.976 --> 00:04:52.115
error. And some very beautiful techniques 
with, in the framework of what's called 

57
00:04:52.115 --> 00:04:56.739
variation and formulations, and, energy 
formulations really, a lot of very 

58
00:04:56.739 --> 00:05:01.428
beautiful mathematical theory, which 
actually relates to the mathematical 

59
00:05:01.428 --> 00:05:06.567
theory that we're going to be discussing 
next week when we talk about geometric 

60
00:05:06.567 --> 00:05:10.293
differential equations and geometric 
varation of problems. 

61
00:05:10.293 --> 00:05:12.202
But, 
here's the concept. 

62
00:05:12.202 --> 00:05:17.627
And very often in image processing, 
you have a concept and the multiple ways 

63
00:05:17.627 --> 00:05:22.129
of implementing that concept. 
And I want to make sure that you 

64
00:05:22.129 --> 00:05:26.850
basically learn during this class, the 
concept behind Mumford-Shah. 

65
00:05:26.850 --> 00:05:32.459
I should also mention to you that this 
concept of approximation and penalty for 

66
00:05:32.459 --> 00:05:36.246
too many edges applies also beyond image 
segmentation. 

67
00:05:36.246 --> 00:05:41.715
And people have extended the framework of 
Mumford-Shah type of formulations to 

68
00:05:41.715 --> 00:05:46.974
image registration and many, many other 
image and video processing problems. 

69
00:05:46.974 --> 00:05:50.200
Thank you very much. 
See you in the next video. 