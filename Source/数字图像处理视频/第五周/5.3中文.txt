大家好 欢迎回来 今天我们学习霍夫变换 (Hough Transform) 霍夫变换是一种很强的技术 可以用来检测和分割对象 尤其是对于你已知形状的物体 正如我们在前面例子里看到的 它也许是直线或者圆 比如我们要检测一个球 我们知道它是圆形的 所以在我们的检测和分割技术中 是否能包含这条信息 来检测圆形的对象？  我们能将检测对象是直线这条信息用上 来最终检测到一条直线吗？ 霍夫变换可以做到 它的方法非常简单也非常漂亮 让我来演示一下 基本思路相当简单 我将从检测直线开始讲解 然后讲解如何检测圆形 但从直线讲起会更加容易理解 在学校里 也许是小学或者中学 你已经学习了 如何在平面上表示一条直线 我会写下方程 并给你再讲解一下 这儿有一个平面 它是一个图像平面 这是x y 轴 平面上的直线上有许多点 比如直线可以是这条 或者这条 这儿表示平面上的一条直线 它能用如下的形式写出来 我们有 ρ 过一会再解释这些符号 ρ 等于 x cosθ 加上 y sinθ ρ 是坐标系统的原点到这条直线的距离 这儿应该是垂直的 它表示距离 视频里有点斜 但无论如何 它应该是一个90度的直角 ρ 是原点到直线的距离 而 θ 是这儿的一个角 是距离和某一条坐标轴所夹的角 这儿我们取 x轴和原点到直线的距离所夹的角表示 θ 直线上的每一点都满足这个方程 每一个单独的点 比如这点和这点 这条直线上所有点都将满足此方程 利用这个方程 这儿是霍夫变换的原理 选取图像上经过边缘检测得到的一点 对于由边缘检测所得到的每个点 都有一条边线经过它 对于每个点 有无穷条直线可以经过它 这是其中的一条直线 对应特定的 ρ 和 θ 让我们画条不同的直线 这条直线也有特定的 ρ 和 θ 这儿代表ρ 这儿代表θ 还可以画条不同的直线 所有的直线经过这个点 看这儿又是一条直线 它也有相应的 ρ 和 θ 我们可以一直这样画下去 比如 这儿再画一条 它也有相应的 ρ 和 θ 所以每个点都有无穷多条直线经过它 也能说这些直线对这样的点都是满足要求的 这个点将对应一系列的 ( ρ , θ ) 它应该对应于无穷多个对 但我们将进行离散化 因为用计算机操作 所以我们不会取无穷多的值 我们将映射出一个离散的 ρθ空间 这是一点 每条经过它的直线 都与它对应 好了 对于另外一点呢？ 另外一点也有许多直线相交于它 所以它也有对应它的直线 当然包括这条也与它对应 但它同时也会与这一条对应 这条直线有自己的ρ和θ 我不想画太多的直线 因为多了会看不清楚 但它的确还对应于这儿的一条直线 还有这儿的 等等 所以这点也对应了一系列的  ( ρ , θ ) 所有这些直线都会与一个点对应 这条直线同时经过两点 我们知道欧式空间中两点确定一条直线 所以这样的直线只有一条 我们需要检测的这条直线与两个有效点对应 这将有助于知道这条直线的ρ和θ 当然不仅仅只有两个有效点 因为这儿还有另外一点 它也对应一组ρ和θ 这点也投票给这条直线 所以这条直线现在对应有3个有效点 由边缘检测出的这些点 都在那条直线上 当然边缘检测也许会找到那条直线之外的点 它们也会进行投票 但幸运的是 只有对应最多有效点的直线才是我们感兴趣的直线 这就是霍夫变换的基本原理 过一会我将进一步讲解 但边缘检测器找到的每个点会使对应直线增加确定性 如果在一条直线上有许多这样的点 那么这条线就会得到很多投票 在实际中我们是如何做的呢 我们会建立XY坐标系统 也就是图像的坐标系 再映射到一个新的坐标系 即 ρθ 坐标系 这个新的坐标系和图像的坐标系一样 都是离散的 它们将被离散化 围绕圆周 θ 可以是任何值 离散化程度 取决于我们的需要或者内存大小 或者计算时间的限制 比如 我们精确到一度 同样地 我们对 ρ 进行离散化 我们知道 ρ 的长度不能超过图像的尺寸 所以它是有界的 然后我们可以对它进行离散化 接下来要进行的 我先再次写下这个方程 ρ 等于 xcosθ 加上 ysinθ 那么接下来我要做的是 我们遍历每个点 比如这个点 每点都对应 (x,y) 也就是这点的坐标 然后我们遍历 θ 值 比如某个角度 我们有坐标 (x,y)  我们有 cosθ sinθ 得到一个 ρ 在 ρθ 空间我们就投出一票给它 我们说得到一票 有时也叫累加器 然后计算下一个 现在  θ 等于2 我们知道 x y 固定 θ 等于2 求出 cos2 和 sin2 我们得到一个新的 ρ 我们投一票给它 继续为所有其他点投票 现在不难看出 一旦确定了 x 和 y 如果你改变这儿的 θ 值 则 ρ 会以正弦形式跟着变化 这非常容易理解 因为它依赖 cos 和 sin 对于每个点 你投票的离散点构成一条正弦曲线 记住 现在当我移动到第二点时 我将得到更多的投票 一条不同的正弦曲线 所以我得到了不同的投票曲线 这将有一个交点 这个交点就表示这条直线 我们开始累加投票了 对应每个点 我们有一条正弦曲线 我们对正弦曲线上的离散点进行投票 我们开始累加 下一步我们研究累加计数 选出峰值 如果有多条直线 就会有多个峰值 我们寻找并发现 许多点都对应这对 ( ρ , θ ) 这就是检测直线的方法 让我们再来看下饼图直线 你首先得到这副图像 然后你做边缘检测 得到每个点 其中一些点在你感兴趣的直线上 一些点在外面 每个点确定这样一个方程 每个点都有一个坐标 (x,y) 接着你研究累加数组空间 你对正弦曲线进行投票 或者在离散空间遍历 θ 通过这个方程得到对应的 ρ 对它进行投票 每个点对应一条曲线  当你做完这些 你看看累加数组中的哪些值比较大 那就意味着图像中有一条直线 关于投票的概念我们已经讲了很多了 你现在能做许多事了 除了识别直线之外 我们来看一个例子 这里有4 5个点 这是累加器 这里有条直线 这条线应该有三票 这里还有一条直线 也应该有三票 这条线有两票 这也是两票 等等 使用这个具体的例子是想说明 直线上的每个点所对应的正弦曲线是如何得到的 现在 我们实图演练一番 这是一张航拍地图 能够很清楚地看到有一些直线 这是边缘识别的结果 更精确地说 这是一个Canny边缘检测器 从这个图片上 我们想得到一条用参数表示的直线 我们想得到这条线的 ρ 和 θ ρ 和 θ 这是穿过了所有这些点的累加器 你没有必要使用直线上所有的点 从直线上抽样的选取几个点就可以了 直线上有许多的点 仅仅使用这些点中的一个子集就能得到很高的累加值 这里是累加器的结果 然后 在平面上找 最大值 并在平面内找到与最大值对应的 ρ 和 θ 记住这是以ρ 和 θ为坐标系的累加器 在得到最大值的同时 也能得到相应的ρ 和 θ的值 这与我们在这看到的相对应 然后可以把它放回到图像中 我们可以认为 基本上这就是最直的线 能得到的最显著的线 可能会有另外的最值 像这条 这条 和这条线肯定都有相应的最值与其对应 可以把它们全找出来 在这个例子中 我们仅仅标出了 图像中最明显的一条线 这是个非常简单但是非常强大的技术 还想向大家展示如何处理环形 但是在那之前 先用matlab展示下这个例子 我们一起来看下 现在已经打开了matlab 让我们来看下演示霍夫(Hough)变换所要做的运算 这里有一些命令语句 一会儿会为大家讲解 它们中的大多数只是为了作图好看 我将只描述一些重要的 hough 变换的基本用法 第一步 和以前一样 先载入图像文件 这是第一步 接下来 旋转图像 这只是为了增强趣味 我不想让你们认为霍夫变换只能 识别水平线或垂直线 所以我们旋转图像 然后识别边界 记住 第一件要做的事 是识别出图像里的边界线 边界是霍夫变换的输入参数 然后 这就是matlab里的hough 变换了 这行命令用于生成ρ 和 θ空间的计数器 这些行运算是为了可视化 现在只是简单描述下这些运算 接下来就运行程序 下一步 我们需要识别出计数器的峰值 需要识别出计数器中的最大值 这个运算就是为了这个目的 我们将把峰值标出来 现在找到了最大值 也意味着找到了与之相对应的ρ 和 θ 然后识别直线 并且需要把这些线画出来 这个运算就是要实现这一结果 大致讲来 就是找到这些线 然后把线画出来 实际效果图是以线段的形式画出来的 与原图像一起画出来 我将展示这一点是如何实现的 现在运行代码 看看结果 得到这两张图 能看出 运行的速度很快 这张图像是原始图像 这是累加器的图 这些正方形是峰值所在 或者说是 累加器中最重要的最大值 可以看到这些绿线 在累加器中 我们能得到ρ和θ 一旦得到这些参数 就可以回到图像平面（也就是x_y平面）中画线 现在你们可能有疑问 但是稍安勿躁 ρ 和 θ能得到直线 但是如果我们想得到线段 应该如何做呢 有很多方法可以实现 其中一个方法是将得到的直线放回到原图中 然后你可以检验这条线 看看这些点是否就是之前用边缘识别出的为这条直线投票的点 基本上通过这种方法 你能得到的是 真实的线段 而不是一整条线 这仅是诸多方法中的一种 就像我们看到的 现在得到了这些直线 整个过程的运算非常快捷且简练 非常迅速简单 这是其他线 只是其他方法的总票数较少 我们需要为累加器设定阈值 可以选择一个阈值 使得少于某一个投票值的直线 就不再显示 或者是只是让票数排名前十或者前五的直线显示 阈值可根据具体的应用进行调整 在这个例子中 我们看到了操作的整个流程 从读入图像、识别边缘 生成累加器 一直到找最值 得到这些线后放回原图中进行验证 另外 如果有需要 可以在放回原图进行验证时 通过找到图像中为相应直线投过票的点来找到线段 如果你要找的只是线段 现在我们回过头来 来讲解如何用霍夫变换检测环形 环形有什么不同？ 这是一张有很多环形的图片 接下来将要学习能否使用霍夫变换来检测圆边缘 思路完全相同 一个圆形可以写成如下表达式 x－x_0 x_0是圆心在x轴上的坐标 上式的平方 加上y-y_0的平方 等于圆形半径的平方 圆上所有的点都满足此方程 圆心是x_0 y_0 这是我们需要找到的圆心的坐标 同样需要求解的 还有未知的圆的半径 这里已经给出公式 如果你们已经忘记了公式 随便找一本基础几何书查找一下 或者是相信我 这就是平面上圆的正确表达式 就像直线的例子中需要找到ρ 和 θ 在圆的情况下需要找到圆心和半径 所以现在需要求解3个参数 因此累加器也不再是二维平面的累加器 而将会是三维空间内的累加器 但是要做的步骤完全一致 首先是边界识别 现在边界识别给出的每个点要为一个环形投票 并且给出自己的坐标 然后我们将依次累加圆心的x坐标 累加圆心的y轴坐标 然后得到半径 也就是我们遍历所有的坐标轴 先在x轴上累加 再y轴 之后计算半径 进行累加 挑出最大值 整个过程就基本完成了 这样就得到了圆心和半径 我们通过一个例子对这个过程进行详细说明 边界信息已经得到 但我想再重复一遍 这里的每一个点可以给多个圆心和半径投票 当然 由于事先知道空间维度 我们可以对圆心进行限制 我们也可以对半径的投票进行限制 因为我们事先知道 图像中要识别的对象会有多大 我们将据此进行投票 图像中实际出现的环形会有不同的票数 我们基本已将它们一一识别出来 这是结果 通过累加 我们可以找到最多的票数 然后得到结果  一般说来 霍夫变换能够用于 能够识别任意能用参数表示出的曲线 需要做的只是对曲线的参数进行投票 比如ρ 和 θ 再加上焦点 我们可以得到抛物线 只要是能用参数描述的曲线 我们都可以找到 曲线的参数越多 霍夫变换的代价就越大 因此 霍夫变换一般用于识别直线 圆和椭圆 这些参数较少的简单图形 否则 累加器的维度会十分庞大 占用很多内存和计算时间 不管是计算还是查找最大值 但对于简单图形来说 霍夫变换是最好的技术之一 希望你们喜欢这视频 再见 非常感谢