WEBVTT

1
00:00:00.000 --> 00:00:04.326
Hello, and welcome back. 
In this video, I want to discuss a very 

2
00:00:04.326 --> 00:00:09.490
important technique for image, and also 
video segmentation and other image 

3
00:00:09.490 --> 00:00:13.816
processing techniques. 
And that's what is called graph cats, as 

4
00:00:13.816 --> 00:00:17.445
we see here. 
And I'm going to illustrate that with a 

5
00:00:17.445 --> 00:00:21.771
very simple figure and then we're 
going to provide some examples. 

6
00:00:21.771 --> 00:00:25.540
So, what is graph cats? 
Let's start from a simple image. 

7
00:00:25.540 --> 00:00:29.860
White and black. 
And the basic idea of graph cut is to 

8
00:00:29.860 --> 00:00:35.860
borrow tools from graph theory to 
partition this image into foreground and 

9
00:00:35.860 --> 00:00:39.871
background. 
So we are going to tilt the image, just 

10
00:00:39.871 --> 00:00:46.215
for the sake of illustration, and we're 
going to take one line across the image, 

11
00:00:46.215 --> 00:00:49.187
as we see here. 
So we take one line. 

12
00:00:49.187 --> 00:00:53.696
And basically, we're going to represent 
that line here. 

13
00:00:53.696 --> 00:01:00.237
Every pixel is going to be a node on a 
graph that we are going to build in just 

14
00:01:00.237 --> 00:01:04.657
a second. 
So these represent pixels in a very cold 

15
00:01:04.657 --> 00:01:08.900
fashion. 
Just to illustrate, every pixel, one node 

16
00:01:08.900 --> 00:01:13.090
in the image. 
And now we're going to add two nodes. 

17
00:01:13.090 --> 00:01:19.922
One, which we call the sink and that's 
going to be represent by background 

18
00:01:19.922 --> 00:01:23.086
pixels. 
And the other is going to be the source, 

19
00:01:23.086 --> 00:01:26.749
and that's going to be representing the 
foreground pixels. 

20
00:01:26.749 --> 00:01:31.739
Once again, we have, for every pixel in 
the image a note, so there would be a lot 

21
00:01:31.739 --> 00:01:34.897
of notes here. 
You can think about a graph that is 

22
00:01:34.897 --> 00:01:36.966
planar, 
in, for those images, 

23
00:01:36.966 --> 00:01:42.417
and then you can think about basically 
putting a source and a sink. 

24
00:01:42.417 --> 00:01:49.087
So we have a lot of here, we have a lot 
of basically planar nodes and we have a 

25
00:01:49.087 --> 00:01:55.595
node on the top and a node on the bottom. 
So now we have the nodes on the graphs, 

26
00:01:55.595 --> 00:01:59.499
on the graph, we need now to construct 
the edges. 

27
00:01:59.499 --> 00:02:04.967
How do we connect these nodes? 
First of all, how do we connect every 

28
00:02:04.967 --> 00:02:10.940
node representing a pixel to the 
foreground, source, and to the background 

29
00:02:10.940 --> 00:02:14.647
sink? 
And the basic idea is that we connect 

30
00:02:14.647 --> 00:02:20.580
them with some measurement of the 
probability of the node, meaning the 

31
00:02:20.580 --> 00:02:24.665
pixel being background, 
or being foreground. 

32
00:02:24.665 --> 00:02:28.162
So for every pixel in the image, we've 
got a node, 

33
00:02:28.162 --> 00:02:32.158
and we look at that node, 
and somehow we say, what's your 

34
00:02:32.158 --> 00:02:37.224
probability of being foreground? 
And we connect that to the source with 

35
00:02:37.224 --> 00:02:42.147
the weight related to that probability. 
That's the weight of the edge. 

36
00:02:42.147 --> 00:02:46.429
And then we ask, what's your probability 
of being background? 

37
00:02:46.429 --> 00:02:51.923
And we use that probability to connect, 
to define the weight of the age that 

38
00:02:51.923 --> 00:02:56.990
connects to the background sink. 
How can we compute those probabilities? 

39
00:02:56.990 --> 00:03:02.719
For example as we saw in the previous 
video if we are in an interactive system 

40
00:03:02.719 --> 00:03:08.013
we can get different scribbles, exactly 
as we saw in the previous video. 

41
00:03:08.013 --> 00:03:13.162
You can use information of this 
surrounding pixels. So that's very open, 

42
00:03:13.162 --> 00:03:18.456
and it's part of the sign of the 
algorithm but the simplest is as we saw 

43
00:03:18.456 --> 00:03:22.953
in the previous video to use information 
from the scribbles. 

44
00:03:22.953 --> 00:03:28.030
So now we have connected every node, 
meaning every pixel to the source, 

45
00:03:28.030 --> 00:03:33.289
and to the background sink. 
Next, we need to connect the pixels among 

46
00:03:33.289 --> 00:03:38.272
themselves. 
So we are going to also construct edges 

47
00:03:38.272 --> 00:03:43.708
connecting pixels among themselves. 
In particular we are only going to 

48
00:03:43.708 --> 00:03:47.860
connect to the neighboring pixels, 
meaning the neighboring nodes. 

49
00:03:47.860 --> 00:03:50.650
So the one on your right, the one above 
you, 

50
00:03:50.650 --> 00:03:56.093
below you, on your left, maybe diagonals. 
We talked very early on in this class 

51
00:03:56.093 --> 00:03:59.063
about for neighborhood and a 
neighborhood. 

52
00:03:59.063 --> 00:04:04.294
We will probably use only one of those. 
And now the question is, what's the 

53
00:04:04.294 --> 00:04:08.550
weight on these edges? 
And I want you to think for a second, 

54
00:04:08.550 --> 00:04:13.367
what would you put here. 
Has to be something that helps you in the 

55
00:04:13.367 --> 00:04:17.236
segmentation. 
So why don't you think for a second, and 

56
00:04:17.236 --> 00:04:22.929
write it in the inline quiz that I'm 
presenting and tell me what do you think 

57
00:04:22.929 --> 00:04:29.065
should be there, the weights. 
Thank you very much for thinking about 

58
00:04:29.065 --> 00:04:33.817
the question I just asked. 
The weight basically has to be something 

59
00:04:33.817 --> 00:04:39.420
that promote pixels that are very similar 
to stay together to stay in the same 

60
00:04:39.420 --> 00:04:44.068
segment, and pixels that are very 
different promotes them to become 

61
00:04:44.068 --> 00:04:47.065
different segments, foreground and 
background. 

62
00:04:47.065 --> 00:04:51.795
For example, we could put weights that 
are proportional to the gradient. 

63
00:04:51.795 --> 00:04:57.256
We can put weights that are proportional 
to the difference of pixel values or the 

64
00:04:57.256 --> 00:05:01.519
difference of the pixel values in the 
neighborhood of the pixel. 

65
00:05:01.519 --> 00:05:06.715
So anything that will promote similar 
pixels, and we have to define similarity 

66
00:05:06.715 --> 00:05:11.710
depending on the application, anything 
that promotes similar pixels to stay 

67
00:05:11.710 --> 00:05:15.367
together, 
and different pixels to become a part 

68
00:05:15.367 --> 00:05:20.401
foreground and background. 
Once we have constructed a whole graph, 

69
00:05:20.401 --> 00:05:25.379
then we call graph theory, 
and we're going to partition that graph. 

70
00:05:25.379 --> 00:05:29.150
So we're going to create what's called a 
mint cut. 

71
00:05:29.150 --> 00:05:35.927
That's a cut with minimal effort, minimal 
price, and it's going to try, to cut, 

72
00:05:35.927 --> 00:05:42.528
foreground from, notes, that are very 
weak, so this had a high probability of 

73
00:05:42.528 --> 00:05:49.217
being back ground, low, of being fore 
ground, so the graph can is going to try 

74
00:05:49.217 --> 00:05:53.530
to cut it out, cut it out, it's going to 
try to go. 

75
00:05:53.530 --> 00:05:59.430
Once we are on the plane of the plane 
that corresponds to the pixels values is 

76
00:05:59.430 --> 00:06:05.032
going to try to go through edges that 
basically, we told the algorithm that 

77
00:06:05.032 --> 00:06:09.364
those edges are connecting pixels that 
are very different. 

78
00:06:09.364 --> 00:06:13.323
And they are probably should be in 
different regions. 

79
00:06:13.323 --> 00:06:18.700
So it's going to try to cut the weak 
edges, because it's going to add the 

80
00:06:18.700 --> 00:06:23.772
price the cut pace, is the addition of 
the weights of the edges it's. 

81
00:06:23.772 --> 00:06:27.979
cutting through. So it's going to try to 
cut through weak edges, 

82
00:06:27.979 --> 00:06:33.028
and in that, and in that way, it's 
going to separate the foreground from the 

83
00:06:33.028 --> 00:06:37.007
background. 
Now, there are good techniques to do 

84
00:06:37.007 --> 00:06:43.065
that, and that can achieve this in 
polynomial time, so there are very 

85
00:06:43.065 --> 00:06:47.520
efficient ways to solve this mean cut 
problem, and. 

86
00:06:47.520 --> 00:06:52.774
By that, we got the seperation between 
the foreground and the background, this 

87
00:06:52.774 --> 00:06:58.029
technique, can be actually extended, to 
multiple objects in the image, not just 

88
00:06:58.029 --> 00:07:01.782
foreground and background, and, other 
type of input data. 

89
00:07:01.782 --> 00:07:06.832
But it's easier to illustrate when we 
think about just, one source and one 

90
00:07:06.832 --> 00:07:10.473
sink, meaning foreground. 
And background separate. 

91
00:07:10.473 --> 00:07:14.648
So, two steps, basically. 
One is construct the graph. 

92
00:07:14.648 --> 00:07:18.740
Second step, produce the main cut. 
The second step, 

93
00:07:18.740 --> 00:07:22.328
basically, a very good algorithms in 
graph theory. 

94
00:07:22.328 --> 00:07:28.334
The first step of constructing the graph 
is what the image processing information 

95
00:07:28.334 --> 00:07:32.290
comes into the graph. 
Let us illustrate a few examples. 

96
00:07:32.290 --> 00:07:38.718
So, here we see examples where basically 
in the examples I'm showing they borrow, 

97
00:07:38.718 --> 00:07:45.226
as I say at the very beginning, from the 
graph cut technique, that provides kind 

98
00:07:45.226 --> 00:07:50.530
of a scribble in the background, and here 
we see the segmentation. 

99
00:07:50.530 --> 00:07:54.950
A second example here and a third example 
here. 

100
00:07:54.950 --> 00:07:59.371
And once again, these can be run very, 
very fast. 

101
00:07:59.371 --> 00:08:05.484
And here I'm going to illustrate a very 
nice example an application of this. 

102
00:08:05.484 --> 00:08:10.940
So we go into one picture of this trip 
and segment it out. 

103
00:08:12.120 --> 00:08:20.560
And put it in the large picture and then 
you do the same for the next one. 

104
00:08:20.560 --> 00:08:27.380
Segment it out using the technique I just 
explained and go and put it in the 

105
00:08:27.380 --> 00:08:31.367
picture. 
And then you repeat it for the other 

106
00:08:31.367 --> 00:08:35.176
ones. 
And you end up having, a new, image that 

107
00:08:35.176 --> 00:08:41.304
is basically a composite of multiple 
images through this, cut and paste. 

108
00:08:41.304 --> 00:08:47.260
I think it's a very nice example, and a 
very nice application of this. 

109
00:08:47.260 --> 00:08:53.483
Interactive type of image segmentation in 
this particular case through prod cards 

110
00:08:53.483 --> 00:08:59.176
which is a particular implementation a 
very smart technique really to this 

111
00:08:59.176 --> 00:09:02.440
minimum card or this graph cards 
technique. 

112
00:09:02.440 --> 00:09:07.956
What I want to conclude is by explaining 
to you that this type of technique 

113
00:09:07.956 --> 00:09:11.222
actually is incorporated in Microsoft 
Office. 

114
00:09:11.222 --> 00:09:16.956
So this is very modern image processing 
that as we have seen in other examples 

115
00:09:16.956 --> 00:09:21.820
and we are going to see in future 
examples actually right after, 

116
00:09:21.820 --> 00:09:27.570
this video, these techniques get into 
some of the very popular pieces of 

117
00:09:27.570 --> 00:09:31.563
software that many people use. 
Thank you very much. 

118
00:09:31.563 --> 00:09:33.640
See you in the next video. 