WEBVTT

1
00:00:00.000 --> 00:00:04.679
大家好 欢迎回来 今天我想讨论下 Mumford-Shah 图像分割技术 

2
00:00:04.679 --> 00:00:09.820
我将借助一个例子来讲解这种技术 

3
00:00:09.820 --> 00:00:14.877
我们看看这些图像 当我们提到图像分割 这意味着 

4
00:00:14.877 --> 00:00:19.245
对图像进行标记 我们为每个有一定连贯性的分割段 

5
00:00:19.245 --> 00:00:24.379
标记上不同的名字 不同的编号 

6
00:00:24.379 --> 00:00:30.049
当然 其中一种方法是 

7
00:00:30.049 --> 00:00:35.720
用一致或平滑过渡的灰度值 填充每个分割段 

8
00:00:35.720 --> 00:00:39.398
而这正是 Mumford-Shah算法做的事情 

9
00:00:39.398 --> 00:00:44.080
我们来探讨一下 这里有一幅原始图像 

10
00:00:44.080 --> 00:00:47.790
暂时不要管这两幅图 

11
00:00:47.790 --> 00:00:51.423
过一会儿你就知道这两幅图的意义了 

12
00:00:51.423 --> 00:00:56.525
这就是用 Mumford-Shah 图像分割技术实现的效果 

13
00:00:56.525 --> 00:01:00.608
图像中非常丰富的灰度值变成了一些平滑的分割段 

14
00:01:00.608 --> 00:01:05.423
这很像图像压缩中的量化 

15
00:01:05.423 --> 00:01:11.057
所以 我们要做的第一步是 

16
00:01:11.057 --> 00:01:17.944
用一些恒定灰度或平滑过渡的分割段 去近似原始图像 

17
00:01:17.944 --> 00:01:21.891
当然 我们想要的是原图的近似 

18
00:01:21.891 --> 00:01:27.434
所以 Mumford-Shah算法需要包含的一项是 

19
00:01:27.434 --> 00:01:32.137
对处理结果与原始图像之间偏差的约束 

20
00:01:32.137 --> 00:01:38.436
当然 逐点平滑或逐点恒定可以将整个图像变得很白 

21
00:01:38.436 --> 00:01:42.378
于是得到了一个非常平滑的分割段 

22
00:01:42.378 --> 00:01:49.126
但是这样一来 处理结果会和原始图像相差太大 

23
00:01:49.126 --> 00:01:55.429
所以 我们必须以某种方法 约束两者之间的差距 

24
00:01:55.429 --> 00:01:58.714
例如 使用均方误差 

25
00:02:02.040 --> 00:02:05.960
我们在前几周的视频中已经学过这个概念 

26
00:02:05.960 --> 00:02:11.656
所以 均方误差可以作为一种约束 

27
00:02:11.656 --> 00:02:15.133
我们希望得到分段平滑的图像 但是不要和原图像差别太大 

28
00:02:15.133 --> 00:02:19.867
现在 你也许会问 既然我们想降低均方误差 

29
00:02:19.867 --> 00:02:23.270
那为什么不保留原来的图像呢？ 

30
00:02:23.270 --> 00:02:27.723
这个想法很聪明 不过 这样我们就没有对图像做任何分割 

31
00:02:27.723 --> 00:02:31.630
那么 我怎么知道我没做任何分割？ 

32
00:02:31.630 --> 00:02:38.633
对此 我要加入一个规定 就是对分割图像中过多的边界进行约束 

33
00:02:38.633 --> 00:02:44.423
这些是这个图像的正常边缘 

34
00:02:44.423 --> 00:02:46.664
非常复杂的边缘 

35
00:02:46.664 --> 00:02:51.800
这些是这个结果中分割段的边界 

36
00:02:51.800 --> 00:02:56.739
我不想要过多的边缘 不想保留所有这些边缘 

37
00:02:56.739 --> 00:03:03.161
我要约束边缘的数量 约束这些边界带来的代价 

38
00:03:03.161 --> 00:03:07.113
这是算法所包含的另一部分 

39
00:03:07.113 --> 00:03:12.547
一方面 我需要约束偏差量 

40
00:03:12.547 --> 00:03:18.519
另一方面 我需要约束边缘数 

41
00:03:18.519 --> 00:03:24.865
所以 如果图像中有过多的边缘 付出的代价也会更多 

42
00:03:24.865 --> 00:03:33.477
如果让图像保持原样 虽然没有误差 但是会有过多的边缘  

43
00:03:33.477 --> 00:03:38.660
可以说是几乎每个像素都成为一个分割段 

44
00:03:38.660 --> 00:03:42.722
那么 就要为大量的边缘付出很大的代价 

45
00:03:42.722 --> 00:03:49.853
如果处理得到一个纯色图像 就不用为边缘付出任何代价 

46
00:03:49.853 --> 00:03:54.637
但是会为误差付出很大代价 所以 我们必须在这两种代价中 

47
00:03:54.637 --> 00:04:01.290
作一个折衷 这就是 Mumford-Shah 的基本思想 

48
00:04:01.290 --> 00:04:08.615
它将这种折衷公式化 避免结果与原图差别过大 

49
00:04:08.615 --> 00:04:14.828
我们希望简化图像 但同时与原图差别不太大 

50
00:04:14.828 --> 00:04:22.053
我们也不想为分割出太多区域付出过多的代价 

51
00:04:22.053 --> 00:04:26.937
现在 有很多方法可以做到这些 

52
00:04:26.937 --> 00:04:33.286
已经有很多优美的数学理论提出了不同的公式 

53
00:04:33.286 --> 00:04:38.088
来做这种折衷处理 有些理论甚至和压缩相关 

54
00:04:38.088 --> 00:04:44.193
你必须压缩这个图像和这些边缘 然后尽量优化 

55
00:04:44.193 --> 00:04:46.976
可能还需要对误差进行比较 

56
00:04:46.976 --> 00:04:52.115
在变分方程和能量方程的框架中有一些优秀的技术 

57
00:04:52.115 --> 00:04:56.739
它们涉及到许多优秀的数学理论 

58
00:04:56.739 --> 00:05:01.428
这些理论与下周将要讨论的 

59
00:05:01.428 --> 00:05:06.567
几何微分方程 

60
00:05:06.567 --> 00:05:10.293
以及几何变分问题有关 

61
00:05:10.293 --> 00:05:12.202
这里是概念 

62
00:05:12.202 --> 00:05:17.627
我们经常见到 图像处理中的概念 

63
00:05:17.627 --> 00:05:22.129
有很多种实现方式 

64
00:05:22.129 --> 00:05:26.850
我希望大家在课上学会Mumford-Shah的概念 

65
00:05:26.850 --> 00:05:32.459
我还想提醒大家 近似的概念 以及对边缘数量的约束 

66
00:05:32.459 --> 00:05:36.246
其应用远远超过图像分割领域 

67
00:05:36.246 --> 00:05:41.715
人们已经把类似Mumford-Shah模型中的公式扩展到 

68
00:05:41.715 --> 00:05:46.974
图像配准以及很多其他图像和视频处理问题中去 

69
00:05:46.974 --> 00:05:50.200
非常感谢大家 我们下个视频见
//果壳教育无边界字幕组 | wocow | luoyetx | 某音某莹 