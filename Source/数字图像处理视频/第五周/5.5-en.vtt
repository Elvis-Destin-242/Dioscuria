WEBVTT

1
00:00:00.000 --> 00:00:04.440
Hello, and welcome back. 
We just spent a couple of videos talking 

2
00:00:04.440 --> 00:00:09.851
about edges, and how important it is to 
compute edges in order to obtain image 

3
00:00:09.851 --> 00:00:13.181
segmentation. 
In this video, we are going to present 

4
00:00:13.181 --> 00:00:19.144
Otsu's method. 
Otsu, basically looks at the histogram of 

5
00:00:19.144 --> 00:00:22.762
the image. 
It looks at the pixel values and looks at 

6
00:00:22.762 --> 00:00:28.188
the property that in order to maintain 
segments, we need kind of uniform pixel 

7
00:00:28.188 --> 00:00:31.041
values. 
So it's not looking at edges, it's 

8
00:00:31.041 --> 00:00:36.259
looking at the regions inside the 
segments that we want to segment out the 

9
00:00:36.259 --> 00:00:41.477
objects that we want to object out. 
Let's look at the basic underlying idea 

10
00:00:41.477 --> 00:00:46.068
behind Otsu what motivates this 
algorithm, and then we're going to 

11
00:00:46.068 --> 00:00:50.378
explain how it works. 
If we look at this image of a finger 

12
00:00:50.378 --> 00:00:53.407
print. 
Let, we plot the histogram, and the 

13
00:00:53.407 --> 00:00:59.239
histogram is what's called bimodal. 
A lot of pixels values are here, which is 

14
00:00:59.239 --> 00:01:05.152
basically a lot of the fingerprint. 
And a lot of pixel values are here, which 

15
00:01:05.152 --> 00:01:10.286
is basically the background. 
Very clear, two modes in the histogram. 

16
00:01:10.286 --> 00:01:15.576
So this is a multi-modal histogram. 
And the basic idea is that if we 

17
00:01:15.576 --> 00:01:21.489
threshold here, we can obtain a very 
simple segmentation, which has separated 

18
00:01:21.489 --> 00:01:27.713
the fingerprint marks from the background 
by a simple threshold because we have 

19
00:01:27.713 --> 00:01:33.282
these bimodal distribution. 
Otsu, it's going to help us to find 

20
00:01:33.282 --> 00:01:37.818
basically the threshold in an automatic 
fashion. 

21
00:01:37.818 --> 00:01:45.000
Now of course, not all the time images 
are as nicely distributed as this one. 

22
00:01:45.000 --> 00:01:51.531
Let us look at this very simple example. 
Here we have a binary image, so we have 

23
00:01:51.531 --> 00:01:56.410
still bimodal distribution, but just to 
the other functions. 

24
00:01:56.410 --> 00:02:01.537
If we add a little bit of noise, then 
we're going to still get, so this is 

25
00:02:01.537 --> 00:02:05.346
Gaussian noise, we're still going to get 
two modalities. 

26
00:02:05.346 --> 00:02:10.693
And Otsu it's going to be able to, 
without any problem, Otsu's method is 

27
00:02:10.693 --> 00:02:16.041
going to be able to segment this out with 
no problem, it's going to find the 

28
00:02:16.041 --> 00:02:19.264
threshold. 
Now if we add much more noise, the 

29
00:02:19.264 --> 00:02:22.926
variance is about five times going from 
here to here. 

30
00:02:22.926 --> 00:02:26.076
Now the histogram, is much more 
distributed. 

31
00:02:26.076 --> 00:02:30.723
We don't have this multi-modality and 
Otsu is not going to. 

32
00:02:30.723 --> 00:02:35.449
Otsu's method is going to, not going to 
be able to find a nice threshold. 

33
00:02:35.449 --> 00:02:38.245
I haven't explained to you the method 
yet. 

34
00:02:38.245 --> 00:02:42.905
But if we apply the method to this image, 
because of this distribution, 

35
00:02:42.905 --> 00:02:47.498
this is what we are going to get. 
We are not going to be able to segment it 

36
00:02:47.498 --> 00:02:50.294
out. 
But of course, at this time, fifth week 

37
00:02:50.294 --> 00:02:53.822
in image processing. 
We're not really scared of noise. 

38
00:02:53.822 --> 00:02:57.350
We see a noisy image, we can denoise it. 
If we denoise, 

39
00:02:57.350 --> 00:03:02.906
we might be able to get back in this 
case, we get back to this bimodal 

40
00:03:02.906 --> 00:03:08.492
distribution and then Otsu's Automatic 
threshold algorithm is going to be able 

41
00:03:08.492 --> 00:03:12.382
to segment it back. 
So it's a very powerful technique as 

42
00:03:12.382 --> 00:03:16.550
we're going to see. 
This is a simple image to illustrate the 

43
00:03:16.550 --> 00:03:19.328
idea. 
So what is the method trying to do? 

44
00:03:19.328 --> 00:03:24.676
The method is trying to find a threshold 
such that the in class variability is 

45
00:03:24.676 --> 00:03:29.747
very small, so we want to find a 
threshold here such that the variance on 

46
00:03:29.747 --> 00:03:35.164
each one of the classes is as small as 
possible so the class is as compact as 

47
00:03:35.164 --> 00:03:38.686
possible. 
And the methods start from the histogram, 

48
00:03:38.686 --> 00:03:43.914
there is no spacial relationship here. 
So we lost the special relationship. 

49
00:03:43.914 --> 00:03:49.849
So regions that have similar pixel values 
but are in completely different positions 

50
00:03:49.849 --> 00:03:53.594
in the image. 
Will kind of be, merged in the histogram 

51
00:03:53.594 --> 00:03:57.928
and then Otsu's algorithm is going to 
treat them as the same. 

52
00:03:57.928 --> 00:04:03.455
So, we're going to see later on how 
algorithms that take into account this 

53
00:04:03.455 --> 00:04:08.320
special relationship between the pixels, 
but this doesn't. 

54
00:04:08.320 --> 00:04:14.213
The basic idea is very simple. 
We need to minimize the weighted within 

55
00:04:14.213 --> 00:04:18.843
class variants. 
We have seen two classes and we need to 

56
00:04:18.843 --> 00:04:22.547
minimize the weighted within class 
variants. 

57
00:04:22.547 --> 00:04:26.420
So what's that class variants is defined 
here. 

58
00:04:26.420 --> 00:04:31.827
T is going to be the threshold. 
That's the threshold that we are looking 

59
00:04:31.827 --> 00:04:38.254
for it's going to be if we have a regular 
image somebody between zero and 255, and 

60
00:04:38.254 --> 00:04:44.054
this is the value we're trying to 
minimize for and let me define each one 

61
00:04:44.054 --> 00:04:48.600
of these variables here, although they 
are pretty clear. 

62
00:04:48.600 --> 00:04:53.955
So this is basically the probability of 
each one of the classes. 

63
00:04:53.955 --> 00:04:58.503
P is what we get from the histogram. 
We start from the histogram. 

64
00:04:58.503 --> 00:05:01.629
We have a probability for every pixel 
value. 

65
00:05:01.629 --> 00:05:06.817
So we compute the histogram and we 
normalize it, so it's a probability, as 

66
00:05:06.817 --> 00:05:11.862
we have taught, a few weeks before. 
And then we have, we go from one to T. 

67
00:05:11.862 --> 00:05:17.191
That's where we put the threshold, 
or from T plus one to the end of the, the 

68
00:05:17.191 --> 00:05:22.023
largest pixel value to 55. 
And then we get the probability for class 

69
00:05:22.023 --> 00:05:24.440
one, 
the probability for class two. 

70
00:05:24.440 --> 00:05:32.934
Then, we simply get the means for class 
one and for class two, and then we also 

71
00:05:32.934 --> 00:05:37.491
get the variance for class one, and the 
variance for class two. 

72
00:05:37.491 --> 00:05:43.289
And in such a way, we obtain the weighted 
within class variance, which is here and 

73
00:05:43.289 --> 00:05:48.156
that's what we wang to minimize. 
Once again, this measurement, basically, 

74
00:05:48.156 --> 00:05:53.524
it has the compactness of the classes. 
If we put the threshold in the wrong 

75
00:05:53.524 --> 00:05:59.179
place, there's going to be large variance 
for one of the classes, and we don't want 

76
00:05:59.179 --> 00:06:02.042
that. 
So, that's what we need to optimize. 

77
00:06:02.042 --> 00:06:05.120
That's what Otsu's algorithm does. 
Now. 

78
00:06:05.120 --> 00:06:09.324
How to implement this? 
One way is extremely trivial. 

79
00:06:09.324 --> 00:06:13.281
You just try. 
You go for T equals zero you compute 

80
00:06:13.281 --> 00:06:14.435
this, 
not hard. 

81
00:06:14.435 --> 00:06:19.876
And then you compute this value. 
You do the same thing for one, two, 

82
00:06:19.876 --> 00:06:24.740
everything up to 255. 
You remember which one was the lowest. 

83
00:06:24.740 --> 00:06:31.508
You keep that threshold, and you're done. 
That by itself would already be very 

84
00:06:31.508 --> 00:06:34.145
fast. 
Very efficient, very fast. 

85
00:06:34.145 --> 00:06:40.210
If you do some algebra, you can actually 
find out very simple algebra. 

86
00:06:40.210 --> 00:06:46.890
Just plug in the formulas from the 
previous slide here, and you can find out 

87
00:06:46.890 --> 00:06:53.271
that this, which is the total, variance 
of the image, is basically the sum, of 

88
00:06:53.271 --> 00:06:57.231
the within class, and the between class 
variance. 

89
00:06:57.231 --> 00:07:03.007
Now, this is of course constant, it 
doesn't depend on the threshold, the 

90
00:07:03.007 --> 00:07:08.536
image is just one image and the variance 
of that image is constant. 

91
00:07:08.536 --> 00:07:13.899
So we want to minimize this, this is 
constant, this is equivalent to 

92
00:07:13.899 --> 00:07:18.451
maximizing this. 
Now the probabilities and the means 

93
00:07:18.451 --> 00:07:25.401
basically are very, very easy to update 
as we move the threshold in a very simple 

94
00:07:25.401 --> 00:07:30.292
recursive formula. 
Which is you know, add one more, add one 

95
00:07:30.292 --> 00:07:36.996
more when we are moving the threshold. 
So basically, this can be computed very 

96
00:07:36.996 --> 00:07:44.077
efficiently in a recursive fashion as we 
go from let's say, T plus ten, to eleven, 

97
00:07:44.077 --> 00:07:48.945
twelve, thirteen. 
We basically keep adding here and then, 

98
00:07:48.945 --> 00:07:54.521
very fast, we compute. 
We once again run from zero to 255 on the 

99
00:07:54.521 --> 00:07:58.150
Ts. 
The difference is that, computing this 

100
00:07:58.150 --> 00:08:04.623
cannot be done explicitly in a recursive 
fashion, but this can be done explicitly 

101
00:08:04.623 --> 00:08:10.138
in a recursive fashion where the T1 plus 
one depends on the T in a very simple 

102
00:08:10.138 --> 00:08:14.054
formula. 
It just, you know means and probabilities 

103
00:08:14.054 --> 00:08:17.811
very simple. 
You keep adding and you get to the 

104
00:08:17.811 --> 00:08:21.327
result. 
So very simple either if you just do 

105
00:08:21.327 --> 00:08:27.322
direct computation or if you use the 
recursive computation, you run through 

106
00:08:27.322 --> 00:08:32.682
all the possible values of T. 
You pick the one that either minimizes 

107
00:08:32.682 --> 00:08:35.880
these, or maximizes these, and you're 
done. 

108
00:08:35.880 --> 00:08:40.488
So, 
before I show you some examples inside 

109
00:08:40.488 --> 00:08:46.744
MATLAB, I want to tell you something. 
If you have a non-uniform background like 

110
00:08:46.744 --> 00:08:53.000
in this image, then Otsu is not going to 
help. Otsu's algorithm is not going to 

111
00:08:53.000 --> 00:08:56.900
help because you may have a binary 
distribution. 

112
00:08:58.360 --> 00:09:03.191
Like we draw here, 
but then because of the bias of the 

113
00:09:03.191 --> 00:09:09.722
background, this will not be basic binary 
bimodal type of distribution. 

114
00:09:09.722 --> 00:09:15.358
So I just explained you how to do Otsu's 
algorithm in the whole image. 

115
00:09:16.432 --> 00:09:20.190
You can also do it in blocks of the 
image, 

116
00:09:20.190 --> 00:09:26.175
to try to get rid of the problem with 
basically a non-uniform background. 

117
00:09:26.175 --> 00:09:32.653
And then you're going to get a different 
threshold for every single one of the 

118
00:09:32.653 --> 00:09:36.096
region. 
Or if you want, you can actually do 

119
00:09:36.096 --> 00:09:40.524
what's called a moving window. 
You can just do it here. 

120
00:09:40.524 --> 00:09:43.804
Sorry, let me just get the pen. 
You do it here, 

121
00:09:43.804 --> 00:09:51.104
then you do it in a narrow window like 
this, and then you basically do it in a 

122
00:09:51.104 --> 00:09:56.092
narrow window like this. 
And then you can, for example if you 

123
00:09:56.092 --> 00:10:01.713
want, you can average the thresholds that 
you get in the overlapping windows. 

124
00:10:01.713 --> 00:10:05.190
Or you can create a function of the 
thresholds. 

125
00:10:05.190 --> 00:10:10.589
So once again, as in many of the 
algorithms that I have explained, there's 

126
00:10:10.589 --> 00:10:15.914
the underlying concept, which is to 
separate the images to minimize that 

127
00:10:15.914 --> 00:10:21.609
within variance that we just explained. 
Now that concept you can implement in 

128
00:10:21.609 --> 00:10:25.530
many different fashions in the whole 
image in blocks, 

129
00:10:25.530 --> 00:10:28.315
overlapping blocks, non-overlapping 
blocks. 

130
00:10:28.315 --> 00:10:33.817
You know, there, there's a lot of art and 
basically depending on the application, 

131
00:10:33.817 --> 00:10:37.229
what to apply. 
Once you do it, for example, as here. 

132
00:10:37.229 --> 00:10:41.616
If you do it globally, 
let me just erase the annotation so it's 

133
00:10:41.616 --> 00:10:44.820
easier. 
If you do Otsu in the whole image, this 

134
00:10:44.820 --> 00:10:49.440
is what you're going to get, 
this is very dark. 

135
00:10:49.440 --> 00:10:54.907
So you got confused with the letters in 
the distribution and in the optimization 

136
00:10:54.907 --> 00:11:00.105
and then it basically the threshold put 
it together with the letters and the 

137
00:11:00.105 --> 00:11:05.167
writing has been it's basically gone. 
Now if you do it with a moving window, 

138
00:11:05.167 --> 00:11:10.162
you get this beautiful resolve back. 
Once again extremely, extremely simple 

139
00:11:10.162 --> 00:11:15.292
all of what we are doing is to segment 
out the letters here we're computing 

140
00:11:15.292 --> 00:11:18.880
thresholds we move a window we just move 
regions. 

141
00:11:18.880 --> 00:11:24.037
We move it and we are completing 
thresholds with the formulas that I just 

142
00:11:24.037 --> 00:11:27.800
explained to you. 
Now let's see an application of this 

143
00:11:27.800 --> 00:11:32.261
running inside MATLAB. 
In order to illustrate Otsu's method in 

144
00:11:32.261 --> 00:11:37.139
side MATLAB the first thing we have to do 
always is to load the image. 

145
00:11:37.139 --> 00:11:41.600
So here we have, we are loading the 
image, this is the separation. 

146
00:11:41.600 --> 00:11:46.858
The next operation is what actually does 
the complication of the optimal 

147
00:11:46.858 --> 00:11:50.387
threshold. 
The Otsu's algorithm that we just 

148
00:11:50.387 --> 00:11:53.412
described. 
That's this operation in MATLAB, 

149
00:11:53.412 --> 00:11:58.742
that it gives us the level, it gives us 
the value of the optimal threshold. 

150
00:11:58.742 --> 00:12:04.000
And then we are basically going to 
threshold the image following that value. 

151
00:12:04.000 --> 00:12:07.530
So, let's see the results of all these 
operations. 

152
00:12:07.530 --> 00:12:15.800
We have link here, and let me just move 
the window so we can observe them better. 

153
00:12:17.160 --> 00:12:20.758
This is the image, 
this is the histogram. 

154
00:12:20.758 --> 00:12:26.555
Now you're an expert in Otsu's method. 
So the moment you see this histogram, you 

155
00:12:26.555 --> 00:12:30.695
say wow, that's great. 
I can do a pretty decent job if I just 

156
00:12:30.695 --> 00:12:34.698
compute that optimal threshold that 
should be around here. 

157
00:12:34.698 --> 00:12:40.150
And that's a result of threshold in the 
image, with that optimal threshold. 

158
00:12:40.150 --> 00:12:44.550
Looks pretty nice, 
remember no special information. 

159
00:12:44.550 --> 00:12:50.666
So for example, you might be able to see 
a few pixels here that were included as 

160
00:12:50.666 --> 00:12:53.403
part of the background. 
Of course, 

161
00:12:53.403 --> 00:12:59.017
without any type of smoothing, you will 
get read and get a very, very nice white 

162
00:12:59.017 --> 00:13:02.925
object inside here. 
Here things are a bit different and 

163
00:13:02.925 --> 00:13:08.397
that's because as you see this part of 
the coin is relatively dark, almost as 

164
00:13:08.397 --> 00:13:12.803
dark as the background, or basically as 
dark as the background. 

165
00:13:12.803 --> 00:13:16.854
And that's why it was included as part of 
the background. 

166
00:13:16.854 --> 00:13:23.030
Situation might have been different if we 
do Otsu's method in a local window or 

167
00:13:23.030 --> 00:13:29.772
some other variant of Otsu's method. 
But the idea is very clear for most of 

168
00:13:29.772 --> 00:13:35.335
the image, wish a, which, with a simple 
threshold we get a very nice 

169
00:13:35.335 --> 00:13:39.465
segmentation. 
And that threshold we don't need to 

170
00:13:39.465 --> 00:13:44.691
specify by hand, 
Otsu's method automatically computes for 

171
00:13:44.691 --> 00:13:48.400
us. 
So let's go back to the slides and we'll 

172
00:13:48.400 --> 00:13:50.760
finish this video, 
thank you. 

173
00:13:50.760 --> 00:13:57.499
In this video we have seen another 
classical standard, very simple and very 

174
00:13:57.499 --> 00:14:04.150
powerful image segmentation algorithm. 
Unfortunately, not all the images are 

175
00:14:04.150 --> 00:14:09.509
easy enough for Otsu or segment or for 
the half transform to segment and we're 

176
00:14:09.509 --> 00:14:13.715
going to need more advanced techniques to 
be able to handle them. 

177
00:14:13.715 --> 00:14:18.057
And that's going to be the topic of the 
future videos in this week. 

178
00:14:18.057 --> 00:14:23.281
I'm looking forward to seeing you then 
and to having a lot of fun and I hope 

179
00:14:23.281 --> 00:14:25.520
that you are having to. 
Thank you. 