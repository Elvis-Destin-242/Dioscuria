WEBVTT

1
00:00:00.000 --> 00:00:05.390
大家好 欢迎回来 今天我们学习霍夫变换 (Hough Transform) 

2
00:00:05.390 --> 00:00:10.901
霍夫变换是一种很强的技术 可以用来检测和分割对象 

3
00:00:10.901 --> 00:00:14.061
尤其是对于你已知形状的物体 

4
00:00:14.061 --> 00:00:19.720
正如我们在前面例子里看到的 它也许是直线或者圆 

5
00:00:19.720 --> 00:00:23.997
比如我们要检测一个球 我们知道它是圆形的 

6
00:00:23.997 --> 00:00:29.803
所以在我们的检测和分割技术中 是否能包含这条信息 

7
00:00:29.803 --> 00:00:35.184
来检测圆形的对象？  我们能将检测对象是直线这条信息用上 

8
00:00:35.184 --> 00:00:39.999
来最终检测到一条直线吗？ 

9
00:00:39.999 --> 00:00:45.592
霍夫变换可以做到 它的方法非常简单也非常漂亮 

10
00:00:45.592 --> 00:00:48.000
让我来演示一下 

11
00:00:48.000 --> 00:00:53.139
基本思路相当简单 我将从检测直线开始讲解 

12
00:00:53.139 --> 00:00:57.277
然后讲解如何检测圆形 

13
00:00:57.277 --> 00:01:02.150
但从直线讲起会更加容易理解 

14
00:01:02.150 --> 00:01:08.063
在学校里 也许是小学或者中学 你已经学习了 

15
00:01:08.063 --> 00:01:11.348
如何在平面上表示一条直线 

16
00:01:11.348 --> 00:01:16.604
我会写下方程 并给你再讲解一下 

17
00:01:16.604 --> 00:01:20.692
这儿有一个平面 它是一个图像平面 这是x y 轴 

18
00:01:20.692 --> 00:01:26.167
平面上的直线上有许多点 

19
00:01:26.167 --> 00:01:30.620
比如直线可以是这条 或者这条 

20
00:01:30.620 --> 00:01:36.234
这儿表示平面上的一条直线 它能用如下的形式写出来 

21
00:01:36.234 --> 00:01:40.233
我们有 ρ 过一会再解释这些符号 

22
00:01:40.233 --> 00:01:51.060
ρ 等于 x cosθ 加上 y sinθ 

23
00:01:51.060 --> 00:01:56.501
ρ 是坐标系统的原点到这条直线的距离 

24
00:01:56.501 --> 00:02:01.201
这儿应该是垂直的 

25
00:02:01.201 --> 00:02:05.736
它表示距离 视频里有点斜 

26
00:02:05.736 --> 00:02:09.199
但无论如何 它应该是一个90度的直角 

27
00:02:09.199 --> 00:02:15.631
ρ 是原点到直线的距离 而 θ 是这儿的一个角 

28
00:02:15.631 --> 00:02:21.980
是距离和某一条坐标轴所夹的角 

29
00:02:21.980 --> 00:02:28.358
这儿我们取 x轴和原点到直线的距离所夹的角表示 θ 

30
00:02:28.358 --> 00:02:32.965
直线上的每一点都满足这个方程 

31
00:02:32.965 --> 00:02:38.191
每一个单独的点 比如这点和这点 

32
00:02:38.191 --> 00:02:42.011
这条直线上所有点都将满足此方程 

33
00:02:42.011 --> 00:02:45.684
利用这个方程 这儿是霍夫变换的原理 

34
00:02:45.684 --> 00:02:50.679
选取图像上经过边缘检测得到的一点 

35
00:02:50.679 --> 00:02:56.262
对于由边缘检测所得到的每个点 都有一条边线经过它 

36
00:02:56.262 --> 00:02:59.518
对于每个点 

37
00:02:59.518 --> 00:03:02.547
有无穷条直线可以经过它 

38
00:03:02.547 --> 00:03:07.234
这是其中的一条直线 对应特定的 ρ 和 θ 

39
00:03:07.234 --> 00:03:12.882
让我们画条不同的直线 这条直线也有特定的 ρ 和 θ 

40
00:03:12.882 --> 00:03:16.654
这儿代表ρ 这儿代表θ 

41
00:03:16.654 --> 00:03:23.300
还可以画条不同的直线 所有的直线经过这个点 

42
00:03:23.300 --> 00:03:28.688
看这儿又是一条直线 它也有相应的 ρ 和 θ 

43
00:03:28.688 --> 00:03:32.729
我们可以一直这样画下去   

44
00:03:32.729 --> 00:03:37.130
比如 这儿再画一条 

45
00:03:37.130 --> 00:03:42.671
它也有相应的 ρ 和 θ 

46
00:03:42.671 --> 00:03:47.901
所以每个点都有无穷多条直线经过它 

47
00:03:47.901 --> 00:03:56.470
也能说这些直线对这样的点都是满足要求的 

48
00:03:56.470 --> 00:04:01.710
这个点将对应一系列的 ( ρ , θ ) 

49
00:04:01.710 --> 00:04:07.133
它应该对应于无穷多个对 

50
00:04:07.133 --> 00:04:11.880
但我们将进行离散化 因为用计算机操作 

51
00:04:11.880 --> 00:04:14.764
所以我们不会取无穷多的值 

52
00:04:14.764 --> 00:04:18.070
我们将映射出一个离散的 ρθ空间 

53
00:04:18.070 --> 00:04:23.839
这是一点 每条经过它的直线 

54
00:04:23.839 --> 00:04:26.354
都与它对应 好了 

55
00:04:26.354 --> 00:04:32.271
对于另外一点呢？ 另外一点也有许多直线相交于它 

56
00:04:32.271 --> 00:04:36.191
所以它也有对应它的直线 

57
00:04:36.191 --> 00:04:39.002
当然包括这条也与它对应 

58
00:04:39.002 --> 00:04:43.066
但它同时也会与这一条对应 

59
00:04:43.066 --> 00:04:47.027
这条直线有自己的ρ和θ 

60
00:04:47.027 --> 00:04:52.968
我不想画太多的直线 因为多了会看不清楚 

61
00:04:52.968 --> 00:04:57.920
但它的确还对应于这儿的一条直线 还有这儿的 等等 

62
00:04:57.920 --> 00:05:03.861
所以这点也对应了一系列的  ( ρ , θ ) 

63
00:05:03.861 --> 00:05:08.873
所有这些直线都会与一个点对应 

64
00:05:08.873 --> 00:05:13.032
这条直线同时经过两点 

65
00:05:13.032 --> 00:05:18.503
我们知道欧式空间中两点确定一条直线 

66
00:05:18.503 --> 00:05:20.765
所以这样的直线只有一条 

67
00:05:20.765 --> 00:05:25.070
我们需要检测的这条直线与两个有效点对应 

68
00:05:25.070 --> 00:05:30.524
这将有助于知道这条直线的ρ和θ 

69
00:05:30.524 --> 00:05:34.014
当然不仅仅只有两个有效点 

70
00:05:34.014 --> 00:05:39.323
因为这儿还有另外一点 它也对应一组ρ和θ 

71
00:05:39.323 --> 00:05:43.323
这点也投票给这条直线 

72
00:05:43.323 --> 00:05:49.213
所以这条直线现在对应有3个有效点 由边缘检测出的这些点 

73
00:05:49.213 --> 00:05:51.325
都在那条直线上 

74
00:05:51.325 --> 00:05:57.307
当然边缘检测也许会找到那条直线之外的点 

75
00:05:57.307 --> 00:06:03.561
它们也会进行投票 但幸运的是 

76
00:06:03.561 --> 00:06:07.290
只有对应最多有效点的直线才是我们感兴趣的直线 

77
00:06:07.290 --> 00:06:12.354
这就是霍夫变换的基本原理 过一会我将进一步讲解 

78
00:06:12.354 --> 00:06:18.193
但边缘检测器找到的每个点会使对应直线增加确定性 

79
00:06:18.193 --> 00:06:23.258
如果在一条直线上有许多这样的点 

80
00:06:23.258 --> 00:06:26.212
那么这条线就会得到很多投票 

81
00:06:26.212 --> 00:06:31.481
在实际中我们是如何做的呢 我们会建立XY坐标系统 

82
00:06:31.481 --> 00:06:37.582
也就是图像的坐标系 

83
00:06:37.582 --> 00:06:41.540
再映射到一个新的坐标系 即 ρθ 坐标系 

84
00:06:41.540 --> 00:06:47.040
这个新的坐标系和图像的坐标系一样 都是离散的 

85
00:06:47.040 --> 00:06:52.213
它们将被离散化 围绕圆周 θ 可以是任何值 

86
00:06:52.213 --> 00:06:58.701
离散化程度 取决于我们的需要或者内存大小 

87
00:06:58.701 --> 00:07:05.025
或者计算时间的限制 比如 我们精确到一度 

88
00:07:05.025 --> 00:07:08.529
同样地 我们对 ρ 进行离散化 

89
00:07:08.529 --> 00:07:13.654
我们知道 ρ 的长度不能超过图像的尺寸 所以它是有界的 

90
00:07:13.654 --> 00:07:16.950
然后我们可以对它进行离散化 

91
00:07:16.950 --> 00:07:22.661
接下来要进行的 我先再次写下这个方程   

92
00:07:22.661 --> 00:07:29.985
ρ 等于 xcosθ 加上 ysinθ 

93
00:07:29.985 --> 00:07:32.619
那么接下来我要做的是 

94
00:07:32.619 --> 00:07:35.794
我们遍历每个点 比如这个点 

95
00:07:35.794 --> 00:07:40.560
每点都对应 (x,y) 也就是这点的坐标 

96
00:07:40.560 --> 00:07:44.990
然后我们遍历 θ 值 比如某个角度 

97
00:07:44.990 --> 00:07:50.398
我们有坐标 (x,y)  我们有 cosθ sinθ 

98
00:07:50.398 --> 00:07:54.272
得到一个 ρ 在 ρθ 空间我们就投出一票给它 

99
00:07:54.272 --> 00:07:59.680
我们说得到一票 有时也叫累加器 

100
00:07:59.680 --> 00:08:04.098
然后计算下一个 现在  θ 等于2 

101
00:08:04.098 --> 00:08:06.946
我们知道 x y 固定 θ 等于2 

102
00:08:06.946 --> 00:08:12.444
求出 cos2 和 sin2 我们得到一个新的 ρ 

103
00:08:12.444 --> 00:08:19.514
我们投一票给它 继续为所有其他点投票 

104
00:08:19.514 --> 00:08:24.031
现在不难看出 一旦确定了 x 和 y 

105
00:08:24.031 --> 00:08:30.904
如果你改变这儿的 θ 值 则 ρ 会以正弦形式跟着变化    

106
00:08:30.904 --> 00:08:35.912
这非常容易理解 因为它依赖 cos 和 sin 

107
00:08:35.912 --> 00:08:40.511
对于每个点 你投票的离散点构成一条正弦曲线 

108
00:08:40.511 --> 00:08:46.030
记住 现在当我移动到第二点时 

109
00:08:46.030 --> 00:08:50.399
我将得到更多的投票 一条不同的正弦曲线 

110
00:08:50.399 --> 00:08:56.607
所以我得到了不同的投票曲线 这将有一个交点   

111
00:08:56.607 --> 00:09:01.130
这个交点就表示这条直线 我们开始累加投票了 

112
00:09:01.130 --> 00:09:04.759
对应每个点 我们有一条正弦曲线 

113
00:09:04.759 --> 00:09:08.686
我们对正弦曲线上的离散点进行投票 

114
00:09:08.686 --> 00:09:13.651
我们开始累加 下一步我们研究累加计数 

115
00:09:13.651 --> 00:09:19.061
选出峰值 如果有多条直线 就会有多个峰值 

116
00:09:19.061 --> 00:09:22.395
我们寻找并发现   

117
00:09:22.395 --> 00:09:25.211
许多点都对应这对 ( ρ , θ ) 

118
00:09:25.211 --> 00:09:30.546
这就是检测直线的方法 让我们再来看下饼图直线 

119
00:09:30.546 --> 00:09:34.548
你首先得到这副图像 

120
00:09:34.548 --> 00:09:36.565
然后你做边缘检测 得到每个点 

121
00:09:36.565 --> 00:09:40.035
其中一些点在你感兴趣的直线上 

122
00:09:40.035 --> 00:09:44.410
一些点在外面 每个点确定这样一个方程 

123
00:09:44.410 --> 00:09:47.050
每个点都有一个坐标 (x,y) 

124
00:09:47.050 --> 00:09:51.047
接着你研究累加数组空间 

125
00:09:51.047 --> 00:09:56.681
你对正弦曲线进行投票 或者在离散空间遍历 θ 

126
00:09:56.681 --> 00:10:02.451
通过这个方程得到对应的 ρ 对它进行投票 

127
00:10:02.451 --> 00:10:08.221
每个点对应一条曲线  当你做完这些   

128
00:10:08.221 --> 00:10:13.991
你看看累加数组中的哪些值比较大 

129
00:10:13.991 --> 00:10:17.663
那就意味着图像中有一条直线 

130
00:10:17.663 --> 00:10:23.882
关于投票的概念我们已经讲了很多了 你现在能做许多事了 

131
00:10:23.882 --> 00:10:29.760
除了识别直线之外 我们来看一个例子 

132
00:10:31.340 --> 00:10:38.086
这里有4 5个点 这是累加器 

133
00:10:38.086 --> 00:10:43.340
这里有条直线 这条线应该有三票 

134
00:10:43.340 --> 00:10:48.595
这里还有一条直线 也应该有三票 

135
00:10:48.595 --> 00:10:51.551
这条线有两票 这也是两票 等等 

136
00:10:51.551 --> 00:10:57.736
使用这个具体的例子是想说明 

137
00:10:57.736 --> 00:11:02.820
直线上的每个点所对应的正弦曲线是如何得到的 

138
00:11:02.820 --> 00:11:09.090
现在 我们实图演练一番 这是一张航拍地图 

139
00:11:09.090 --> 00:11:12.649
能够很清楚地看到有一些直线 

140
00:11:12.649 --> 00:11:16.661
这是边缘识别的结果 

141
00:11:16.661 --> 00:11:19.698
更精确地说 这是一个Canny边缘检测器 

142
00:11:19.698 --> 00:11:24.514
 从这个图片上 我们想得到一条用参数表示的直线  

143
00:11:24.514 --> 00:11:28.589
我们想得到这条线的 ρ 和 θ   

144
00:11:28.589 --> 00:11:33.118
 ρ 和 θ 这是穿过了所有这些点的累加器  

145
00:11:33.118 --> 00:11:37.733
你没有必要使用直线上所有的点 

146
00:11:37.733 --> 00:11:42.474
从直线上抽样的选取几个点就可以了 直线上有许多的点 

147
00:11:42.474 --> 00:11:46.835
仅仅使用这些点中的一个子集就能得到很高的累加值 

148
00:11:46.835 --> 00:11:49.048
这里是累加器的结果   

149
00:11:49.048 --> 00:11:52.461
然后 在平面上找 

150
00:11:52.461 --> 00:11:56.158
最大值 并在平面内找到与最大值对应的 

151
00:11:56.158 --> 00:11:59.558
ρ 和 θ 

152
00:11:59.558 --> 00:12:04.310
记住这是以ρ 和 θ为坐标系的累加器 

153
00:12:04.310 --> 00:12:09.804
在得到最大值的同时 也能得到相应的ρ 和 θ的值 

154
00:12:09.804 --> 00:12:15.679
这与我们在这看到的相对应 然后可以把它放回到图像中 

155
00:12:15.679 --> 00:12:21.249
我们可以认为 基本上这就是最直的线 能得到的最显著的线 

156
00:12:21.249 --> 00:12:24.149
可能会有另外的最值 

157
00:12:24.149 --> 00:12:30.024
像这条 这条 和这条线肯定都有相应的最值与其对应 

158
00:12:30.024 --> 00:12:34.450
可以把它们全找出来 在这个例子中 我们仅仅标出了 

159
00:12:34.450 --> 00:12:38.982
图像中最明显的一条线 这是个非常简单但是非常强大的技术 

160
00:12:38.982 --> 00:12:44.099
还想向大家展示如何处理环形 但是在那之前 

161
00:12:44.099 --> 00:12:46.920
先用matlab展示下这个例子 我们一起来看下 

162
00:12:46.920 --> 00:12:50.266
现在已经打开了matlab 

163
00:12:50.266 --> 00:12:55.350
让我们来看下演示霍夫(Hough)变换所要做的运算 

164
00:12:55.350 --> 00:13:00.498
这里有一些命令语句 

165
00:13:00.498 --> 00:13:05.325
一会儿会为大家讲解 它们中的大多数只是为了作图好看 

166
00:13:05.325 --> 00:13:10.022
我将只描述一些重要的 

167
00:13:10.022 --> 00:13:12.790
hough 变换的基本用法 

168
00:13:12.790 --> 00:13:17.354
第一步 和以前一样 先载入图像文件 

169
00:13:17.354 --> 00:13:21.711
这是第一步 接下来 旋转图像 

170
00:13:21.711 --> 00:13:26.829
这只是为了增强趣味 我不想让你们认为霍夫变换只能 

171
00:13:26.829 --> 00:13:31.947
识别水平线或垂直线 所以我们旋转图像 

172
00:13:31.947 --> 00:13:35.820
然后识别边界 记住 第一件要做的事 

173
00:13:35.820 --> 00:13:40.800
是识别出图像里的边界线 边界是霍夫变换的输入参数 

174
00:13:40.800 --> 00:13:44.950
然后 这就是matlab里的hough 变换了 

175
00:13:44.950 --> 00:13:50.710
这行命令用于生成ρ 和 θ空间的计数器 

176
00:13:50.710 --> 00:13:55.211
这些行运算是为了可视化 

177
00:13:55.211 --> 00:14:00.111
现在只是简单描述下这些运算 接下来就运行程序 

178
00:14:00.111 --> 00:14:02.891
下一步 我们需要识别出计数器的峰值 

179
00:14:02.891 --> 00:14:06.069
需要识别出计数器中的最大值 

180
00:14:06.069 --> 00:14:09.380
这个运算就是为了这个目的 我们将把峰值标出来 

181
00:14:09.380 --> 00:14:14.720
现在找到了最大值 也意味着找到了与之相对应的ρ 和 θ 

182
00:14:14.720 --> 00:14:19.020
然后识别直线 并且需要把这些线画出来 

183
00:14:19.020 --> 00:14:24.429
这个运算就是要实现这一结果 大致讲来 就是找到这些线 

184
00:14:24.429 --> 00:14:29.561
然后把线画出来 实际效果图是以线段的形式画出来的   

185
00:14:29.561 --> 00:14:33.445
与原图像一起画出来 我将展示这一点是如何实现的 

186
00:14:33.445 --> 00:14:39.140
现在运行代码 看看结果 

187
00:14:39.140 --> 00:14:46.299
得到这两张图 能看出 运行的速度很快   

188
00:14:46.299 --> 00:14:52.250
这张图像是原始图像 这是累加器的图 

189
00:14:52.250 --> 00:14:58.615
这些正方形是峰值所在 或者说是 

190
00:14:58.615 --> 00:15:05.334
累加器中最重要的最大值 可以看到这些绿线 

191
00:15:05.334 --> 00:15:09.072
在累加器中 我们能得到ρ和θ 

192
00:15:09.072 --> 00:15:13.445
一旦得到这些参数 就可以回到图像平面（也就是x_y平面）中画线 

193
00:15:13.445 --> 00:15:18.852
现在你们可能有疑问 但是稍安勿躁 

194
00:15:18.852 --> 00:15:24.489
ρ 和 θ能得到直线 但是如果我们想得到线段 

195
00:15:24.489 --> 00:15:27.700
应该如何做呢 

196
00:15:27.700 --> 00:15:31.874
有很多方法可以实现 

197
00:15:31.874 --> 00:15:37.486
其中一个方法是将得到的直线放回到原图中 

198
00:15:37.486 --> 00:15:40.635
然后你可以检验这条线 

199
00:15:40.635 --> 00:15:46.110
看看这些点是否就是之前用边缘识别出的为这条直线投票的点 

200
00:15:46.110 --> 00:15:50.558
基本上通过这种方法 你能得到的是   

201
00:15:50.558 --> 00:15:54.460
真实的线段 而不是一整条线 

202
00:15:54.460 --> 00:16:00.024
这仅是诸多方法中的一种 就像我们看到的 现在得到了这些直线 

203
00:16:00.024 --> 00:16:03.408
整个过程的运算非常快捷且简练 

204
00:16:03.408 --> 00:16:06.116
非常迅速简单 这是其他线 

205
00:16:06.116 --> 00:16:11.831
只是其他方法的总票数较少 我们需要为累加器设定阈值 

206
00:16:11.831 --> 00:16:15.470
可以选择一个阈值 使得少于某一个投票值的直线 

207
00:16:15.470 --> 00:16:20.278
就不再显示 

208
00:16:20.278 --> 00:16:26.529
或者是只是让票数排名前十或者前五的直线显示 

209
00:16:26.529 --> 00:16:32.940
阈值可根据具体的应用进行调整 在这个例子中 

210
00:16:32.940 --> 00:16:37.507
我们看到了操作的整个流程 从读入图像、识别边缘 

211
00:16:37.507 --> 00:16:40.392
生成累加器 一直到找最值   

212
00:16:40.392 --> 00:16:44.720
得到这些线后放回原图中进行验证 另外 如果有需要 

213
00:16:44.720 --> 00:16:50.057
可以在放回原图进行验证时 通过找到图像中为相应直线投过票的点来找到线段 

214
00:16:50.057 --> 00:16:53.939
如果你要找的只是线段 

215
00:16:53.939 --> 00:16:59.720
现在我们回过头来 来讲解如何用霍夫变换检测环形 

216
00:16:59.720 --> 00:17:06.883
环形有什么不同？ 这是一张有很多环形的图片 

217
00:17:06.883 --> 00:17:15.542
接下来将要学习能否使用霍夫变换来检测圆边缘 

218
00:17:15.542 --> 00:17:22.828
思路完全相同 一个圆形可以写成如下表达式 

219
00:17:22.828 --> 00:17:28.108
x－x_0 x_0是圆心在x轴上的坐标 

220
00:17:28.108 --> 00:17:34.548
上式的平方 加上y-y_0的平方 

221
00:17:34.548 --> 00:17:44.976
等于圆形半径的平方 圆上所有的点都满足此方程 

222
00:17:44.976 --> 00:17:49.881
圆心是x_0 y_0 

223
00:17:49.881 --> 00:17:55.047
这是我们需要找到的圆心的坐标 

224
00:17:55.047 --> 00:17:59.620
同样需要求解的 还有未知的圆的半径   

225
00:17:59.620 --> 00:18:04.262
这里已经给出公式 如果你们已经忘记了公式 

226
00:18:04.262 --> 00:18:10.147
随便找一本基础几何书查找一下 或者是相信我 

227
00:18:10.147 --> 00:18:14.706
这就是平面上圆的正确表达式 

228
00:18:14.706 --> 00:18:21.503
就像直线的例子中需要找到ρ 和 θ 

229
00:18:21.503 --> 00:18:25.980
在圆的情况下需要找到圆心和半径 所以现在需要求解3个参数 

230
00:18:25.980 --> 00:18:30.918
因此累加器也不再是二维平面的累加器   

231
00:18:30.918 --> 00:18:35.270
而将会是三维空间内的累加器 

232
00:18:35.270 --> 00:18:41.130
但是要做的步骤完全一致 首先是边界识别 

233
00:18:41.130 --> 00:18:46.540
现在边界识别给出的每个点要为一个环形投票 并且给出自己的坐标 

234
00:18:46.540 --> 00:18:50.713
然后我们将依次累加圆心的x坐标 

235
00:18:50.713 --> 00:18:56.663
累加圆心的y轴坐标 

236
00:18:56.663 --> 00:19:00.682
然后得到半径 也就是我们遍历所有的坐标轴 

237
00:19:00.682 --> 00:19:05.662
先在x轴上累加 再y轴 之后计算半径 

238
00:19:05.662 --> 00:19:11.937
进行累加 挑出最大值 整个过程就基本完成了 

239
00:19:11.937 --> 00:19:17.490
这样就得到了圆心和半径 我们通过一个例子对这个过程进行详细说明 

240
00:19:17.490 --> 00:19:22.324
边界信息已经得到 但我想再重复一遍 

241
00:19:22.324 --> 00:19:27.482
这里的每一个点可以给多个圆心和半径投票 

242
00:19:27.482 --> 00:19:32.800
当然 由于事先知道空间维度 我们可以对圆心进行限制 

243
00:19:32.800 --> 00:19:38.763
我们也可以对半径的投票进行限制 因为我们事先知道 

244
00:19:38.763 --> 00:19:43.760
图像中要识别的对象会有多大 我们将据此进行投票 

245
00:19:43.760 --> 00:19:49.018
图像中实际出现的环形会有不同的票数 

246
00:19:49.018 --> 00:19:51.810
我们基本已将它们一一识别出来 这是结果 

247
00:19:51.810 --> 00:19:57.615
通过累加 我们可以找到最多的票数 

248
00:19:57.615 --> 00:20:02.901
然后得到结果  一般说来 霍夫变换能够用于 

249
00:20:02.901 --> 00:20:07.945
能够识别任意能用参数表示出的曲线 需要做的只是对曲线的参数进行投票 

250
00:20:07.945 --> 00:20:13.147
比如ρ 和 θ 再加上焦点 我们可以得到抛物线 

251
00:20:13.147 --> 00:20:18.663
只要是能用参数描述的曲线 我们都可以找到 

252
00:20:18.663 --> 00:20:24.180
曲线的参数越多 霍夫变换的代价就越大 

253
00:20:24.180 --> 00:20:30.170
因此 霍夫变换一般用于识别直线 圆和椭圆 

254
00:20:30.170 --> 00:20:33.807
这些参数较少的简单图形 

255
00:20:33.807 --> 00:20:39.201
否则 累加器的维度会十分庞大 

256
00:20:39.201 --> 00:20:44.826
占用很多内存和计算时间 

257
00:20:44.826 --> 00:20:50.220
不管是计算还是查找最大值 但对于简单图形来说 

258
00:20:50.220 --> 00:20:53.961
霍夫变换是最好的技术之一 

259
00:20:53.961 --> 00:20:58.146
希望你们喜欢这视频 再见 

260
00:20:58.146 --> 00:20:59.415
非常感谢