WEBVTT

1
00:00:00.000 --> 00:00:04.627
欢迎回到局部滤波部分 我们要介绍另一个非常重要 

2
00:00:04.627 --> 00:00:07.966
并且用途广泛的局部滤波器 那就是中值滤波器 

3
00:00:07.966 --> 00:00:12.126
接下来我们将对其进行详细的讲解 这是一种很棒的滤波器 

4
00:00:12.126 --> 00:00:15.699
因为它不会使边缘变得模糊不清 而且尽管它是一种很经典的滤波器 

5
00:00:15.699 --> 00:00:18.980
但是在今天仍然很常用 那下面就开始中值滤波的学习 

6
00:00:18.980 --> 00:00:23.237
在正式讲解中值滤波器之前 先来看一个实物图像的例子 

7
00:00:23.237 --> 00:00:27.790
这里有一幅被椒盐噪声污染的图像 

8
00:00:27.790 --> 00:00:30.392
下周 我们会为大家 

9
00:00:30.392 --> 00:00:35.300
进一步讲解不同的噪声模型 这个椒盐噪声 

10
00:00:35.300 --> 00:00:39.676
是一种比较剧烈的噪声 分别加在各个像素上 

11
00:00:39.676 --> 00:00:41.041
请看这里 

12
00:00:41.041 --> 00:00:43.767
这是局部均值滤波的结果 

13
00:00:43.767 --> 00:00:47.698
是在此前的视频中看到过的   

14
00:00:47.698 --> 00:00:52.771
就是一个 3×3 的局部平均 可以观察到 

15
00:00:52.771 --> 00:00:57.020
是有一些噪声的减少 但并不是很多 

16
00:00:57.020 --> 00:01:02.677
再看这里 是 3×3 中值滤波的结果 

17
00:01:02.677 --> 00:01:05.230
可以观察到一个很好的效果 并没有出现模糊 

18
00:01:05.230 --> 00:01:09.036
可以观察到大多数的噪声的确都被滤掉了 

19
00:01:09.036 --> 00:01:13.911
我们可以通过一个比 3×3 大的局部均值滤波器 

20
00:01:13.911 --> 00:01:18.519
来过滤掉更多的噪声 像 5×5 或者 9×9 

21
00:01:18.519 --> 00:01:24.129
就像在之前的视频中提到过的 在均值滤波的过程中 

22
00:01:24.129 --> 00:01:28.269
我们对平方个个数的像素值进行了平均 

23
00:01:28.269 --> 00:01:33.411
但是 如果增大滤波时的邻域 可以发现 

24
00:01:33.411 --> 00:01:36.350
有很多细节都被模糊了 而另一方面 

25
00:01:36.350 --> 00:01:42.956
用一个 3×3 邻域的中值滤波器依然能够达到很好的去噪效果 

26
00:01:42.956 --> 00:01:47.168
那么什么是中值滤波器呢？ 

27
00:01:47.168 --> 00:01:50.862
很简单 就是这样 

28
00:01:50.862 --> 00:01:54.880
如果选取一个 3×3 的领域 

29
00:01:54.880 --> 00:02:01.027
将这个模板里的所有像素按照从小到大的顺序排列 

30
00:02:01.027 --> 00:02:04.652
然后选取最中间的那个 

31
00:02:04.652 --> 00:02:08.041
明白了吗？就是将所有的像素排序 

32
00:02:08.041 --> 00:02:14.189
然后提取出最中间的那个 这个运算是大家小学就学过的吧 

33
00:02:14.189 --> 00:02:18.603
这个功能相当强大 

34
00:02:18.603 --> 00:02:24.580
用排在最中间的那个值代替了待处理的像素点 举个例子 

35
00:02:24.580 --> 00:02:29.380
如果这儿有一些这样的像素点 其中的一个有很高的噪声 

36
00:02:29.380 --> 00:02:34.856
当排序的时候 这个点就会被这些等值的点的值替换 

37
00:02:34.856 --> 00:02:40.182
也就是说 这个像素点的值会被替换掉 

38
00:02:40.182 --> 00:02:41.127
这个值就会变小 

39
00:02:41.127 --> 00:02:45.118
就这样 噪声就被清除掉了 非常的干净   

40
00:02:45.118 --> 00:02:48.652
没有出现之前在高斯滤波或者均值滤波中的模糊的效果 

41
00:02:48.652 --> 00:02:53.167
均值滤波器是一种非常简单的滤波器 只需排序 然后挑选出最中间的元素 

42
00:02:53.167 --> 00:02:55.916
按从小到大排序 

43
00:02:55.916 --> 00:02:58.730
然后挑选出排在最中间的那个 

44
00:02:58.730 --> 00:03:02.917
然后移到下一个窗口 所以就只需每次处理一个 3×3 的窗口 

45
00:03:02.917 --> 00:03:06.885
然后移到下一个窗口处理 再下一个窗口 再下一个 

46
00:03:06.885 --> 00:03:10.136
这样 大家就掌握了这个非常简单的 中值滤波器 

47
00:03:10.136 --> 00:03:14.434
在我使用 MATLAB 来给大家实时演示 

48
00:03:14.434 --> 00:03:18.566
 中值滤波器的实例之前 先来看一下  

49
00:03:18.566 --> 00:03:25.110
中值滤波器的一个很有趣的性质 在之前的视频中 

50
00:03:25.110 --> 00:03:33.651
已经了解到 均值滤波器按 (a-ai)^2 的方式来减少噪声   

51
00:03:33.651 --> 00:03:41.291
这里均值就是这个a 它使得这个式子取最小值 将所有的像素点都加起来 

52
00:03:41.291 --> 00:03:48.741
现在 我要问大家一个问题 我们可不可以把中值滤波器也写成这样的形式呢？ 

53
00:03:48.741 --> 00:03:52.752
也许是另外一个函数 

54
00:03:52.752 --> 00:03:58.233
就像这样 f(a-ai) 可以写成这样的函数吗？ 

55
00:03:58.233 --> 00:04:06.920
思考一下 如果想到了答案 告诉我可不可以 

56
00:04:06.920 --> 00:04:12.328
那么 答案是什么呢？很有趣 

57
00:04:12.328 --> 00:04:20.775
这是均值 使这个平方误差取得最小值的 a 就是均值 

58
00:04:20.775 --> 00:04:25.145
那什么是中值呢？ 

59
00:04:25.145 --> 00:04:33.080
中值可以使得 (a-ai) 的绝对值取得最小值 

60
00:04:33.080 --> 00:04:37.376
这里没有平方 而是差值的绝对值 

61
00:04:37.376 --> 00:04:42.652
非常有趣的是 仅仅是将这个平方符号 

62
00:04:42.652 --> 00:04:46.120
换成绝对值 就得到了中值 

63
00:04:46.120 --> 00:04:50.901
依旧 大家可以自己证明一下 可能会有一点困难 

64
00:04:50.901 --> 00:04:56.324
因为当讨论怎样证明均值的时候 会对这个式子求导 

65
00:04:56.324 --> 00:05:01.748
使导数等于0 可以发现 a 就是所有 ai 的均值 

66
00:05:01.748 --> 00:05:04.887
但是在这里不能求导 

67
00:05:04.887 --> 00:05:10.757
因为在0点 绝对值不存在导数 

68
00:05:10.757 --> 00:05:14.141
所以 这个证明会用到更多技巧 

69
00:05:14.141 --> 00:05:17.885
但是我相信大家可以做到 这个作为大家额外的奖励作业 

70
00:05:17.885 --> 00:05:23.428
大家不用考虑太多 如果不想自己证明 

71
00:05:23.428 --> 00:05:28.828
可以先相信我的结论 使得这个式子最小的 

72
00:05:28.828 --> 00:05:32.356
就是中值滤波器 一个特别有趣的运算 

73
00:05:32.356 --> 00:05:36.820
对于熟悉稳健统计这个领域的人而言 

74
00:05:36.820 --> 00:05:43.150
这个是平方误差 鲁棒性并不太强 所以均值滤波会有模糊 

75
00:05:43.150 --> 00:05:48.678
而相比之下这个误差鲁棒性比刚才的强 这也是中值滤波能够完全消除 

76
00:05:48.678 --> 00:05:54.514
像椒盐噪声之类噪声的原因 而不使图像其它部分模糊 

77
00:05:54.514 --> 00:05:58.046
我想提到的 最后一个关于中值的有趣性质就是 

78
00:05:58.046 --> 00:06:03.651
在均值中 得到的结果并不是模板中的某个像素值 

79
00:06:03.651 --> 00:06:08.027
举个例子 如果算 1 和 2 的均值 

80
00:06:08.027 --> 00:06:11.560
得到的是1.5 而既不是1 也不是2 

81
00:06:11.560 --> 00:06:14.825
当计算均值的时候 比如一个 3×3 的模板 

82
00:06:14.825 --> 00:06:17.946
当计算完这个 3×3 的均值后 

83
00:06:17.946 --> 00:06:23.606
用均值代替了中间的那个像素 

84
00:06:23.606 --> 00:06:27.380
也许就用一个根本没有出现过的值代替了这个像素 

85
00:06:27.380 --> 00:06:32.542
这个值可能没有在这个 3×3 的窗口中出现过 甚至可能在整个图像中也都没出现过 

86
00:06:32.542 --> 00:06:36.625
再说一遍 1和2的均值是1.5 

87
00:06:36.625 --> 00:06:40.229
是一个新值 从这个角度而言 当进行中值滤波的时候 

88
00:06:40.229 --> 00:06:45.653
总是用一个在 3×3 的窗口中存在的值来进行替换 

89
00:06:45.653 --> 00:06:49.873
也就是说 并没有弄出一个新的像素值出来 

90
00:06:49.873 --> 00:06:53.088
而这是其中的部分过程 

91
00:06:53.088 --> 00:06:56.370
这个性质确实十分有趣 

92
00:06:56.370 --> 00:06:59.249
用的是已有值 没有新值出现 

93
00:06:59.249 --> 00:07:04.540
只是这个像素点周围邻域像素点的中值 

94
00:07:04.540 --> 00:07:07.452
被选择来替代它的值 

95
00:07:07.452 --> 00:07:11.815
既然已经学习了中值 以及它的一些有趣的性质 

96
00:07:11.815 --> 00:07:15.596
接下来 就来看一些关于中值滤波器的操作实例 

97
00:07:15.596 --> 00:07:19.594
下一个视频再见 

98
00:07:19.594 --> 00:07:20.260
谢谢大家