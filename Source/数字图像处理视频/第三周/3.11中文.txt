大家好 欢迎回到我们的图像与视频处理课程上来 我们能从这些图片中得到很有趣的效果 仅通过这些十分简单的 局部邻域操作 让我们通过这个视频来看看其它操作 尤其是 我们将说到导数 我们如何对邻域求导数 重要的是 这些导数操作将让图片产生 非常非常有趣的效果 让我们接下来深入探讨 这里有一幅图 这是一幅一维的图像 这里是平的 然后下降 再是平的 接着陡升 然后又是平直的 我们来看看在对它求导数后会变成怎样 我将求导后的图形画在这儿 在那之前你可能会问 求导应该是在连续性条件下的运算 我们怎么在电脑上进行 有很多很多种方式能够做到 但我展示一种非常简单的 如果我想要对一幅 图像在 x方向 进行求导的话 我只要用离散的形式写成 f(x+1) - f(x) 非常简单 我仅需将两个相邻的像素值相减 如果我想对邻域进行操作的话 假设是一个 3x3 区域 就是说 f(x+1) 在这儿有个1 而对应-f(x) 在这儿有个-1 我将其它的都用0替代 基本上就是这样表示的 于是我就得到了 x方向 的一阶导数 类似的 我能得到 y方向的一阶导数 我们看这儿 是这条折线的假设值 所以从此处的 6 开始 在下降区减少 然后一直是1 再是陡升 一阶导数是第一行的数 用这个方法能很容易算出 我们这有几个0 因为这里没有导数 这些值是常数 接着得到-1 -1意味着像素值 以恒定的跃变值1下降 它是负的 因此是下降 接下来与之前一样 是平的 然后这里有个大的跃变 我们用 (6 - 1) 得到5 后面又一次变平缓 我们已经看到如果考虑一阶导数 我们可以理解 比如这是下降区 像素值平缓下降 接着是一个大的跃变 非常有趣的是 我们能通过导数 来感知跃变 然后我们实际上能够求二阶导数 同样的 我们能够写一个具体的方程 还有模板 来表示二阶导数 于是我们来求这个图像的二阶导数 同样也是 x方向 也是有很多很多种方式来求 其中一种求取二阶导数的方法 就是取 f(x+1) 加上 f(x-1) 再减去2乘以此处的像素值 即 2f(x) 对普通的 3x3 来说 实现起来也很简单 此时在这儿为-2 两边各一个1 代表这两个数 然后其它处均为0 如果我们这样做 就是对一阶导数再求导 这是非常简单的操作 我们对这些进行求导 我们可以直接对最初的数值进行这种求导 但是这样会更简单 连续的像素中 相邻的两个相减 当有较大变化时我们会看见跃变 而这里 (0 - 0) 还是0 而这里 (-1 - (-1))时 又是0 但当这里有变化时 我们会看见跃变 这儿是1 这里还有一个跃变 所以二阶导数很清楚地 表明在我们的图像中何处有大的变化 这是十分有效的 我们通过求导数 来检验大的变化 以最简单的形式 运用像这样的掩模来实现 我们继续 来看一些例子 这些是不同的掩模 可以用于计算不同类型的导数 我想问问你们 例如 看这个掩模 能告诉我这个实际上是计算什么吗？ 是用来计算 x方向的三阶导数吗？ 还是计算在 y方向的三阶导数？ 又或者是计算一阶导数 在 x方向和y方向的和？ 或者是计算 在 x方向和 y方向的二阶导数之和呢？ 一个非常有趣的性质 那这个掩模是怎么用呢？ 我觉得它对你们而言应该不难 所以把它作为你们的练习 但我只是写出来了 这实际上是计算 x方向 和 y方向的二阶导数之和 所以这是计算 f 在x方向的二阶导数 加上 在y方向的二阶导数 对不起 是f在y方向上的二阶导数 这大概就是我们从之前的课中所知道的 因为我们能计算出 x方向和y方向的二阶导数 并且将它们相加 我们知道它实际上就是 f(x+1) + f(x-1)-2f(x) 我就不写y方向的了 因为它们基本没变 这是y 这也是y 这个也一样 把它们加到前面 这是x方向的 我们现在写出y方向的 就是 f(y + 1) + f(y - 1) - 2f(y) 同样 这些都是对于常量x而言 这些都是对于常量y而言 这些都是对于常量x而言 当我们把它们相加 我们就得到了这个 这实际上就被称作 f 的拉普拉斯算子 我们简要的介绍过这个 当我们谈论 均值处理、高斯滤波以及热方程之间的关系时 所以这就是图像的拉普拉斯算子 是x方向与y方向上的二阶导数之和 这些是拉普拉斯算子的不同实现形式 在此 我们使得变化更为明显 我们将其加强 便能看到它的效果 基本的原理是这样 周围的像素值取同一种符号 这个像素取不同的符号 而我们基本上都以此方式计算它的二阶导数 这些是不同类型的计算二阶导数的方法 那么在一幅图中 这会产生什么效果呢？ 很有趣 这里是一幅月球的图像 接下来我们看到的就是这幅图像的拉普拉斯算子 就是x方向的二阶导数 加上y方向的二阶导数 我们看到应用这个拉普拉斯算子后的效果 我们将其加强 记得我们已经知道如何修正直方图 类似于拉伸操作 接下来 我们把这个和它相叠加 也就是我们有一幅图像 用拉普拉斯算子处理 将其强化后 然后将它们加起来 就得到了这幅图像 你能看到它被锐化了 基本上一些细节部分 在这幅图像中比之前的更为清晰 现在我们能使这些细节更加清晰 通过计算不同的拉普拉斯算子 相比较于用 -4 这个值 这里用了-8 因此它能进一步对差异进行强化 过程是一样的 我们拿这个图像 用此方法计算每个像素点的拉普拉斯算子 于是每个像素点都被它自身的负值与 周围像素点的正值之和取代 接着我们把它和原图片比较 你看 我们得到了一个锐化的渲染效果 在这儿你能看到很多细节 而原来这儿是很模糊的 这个操作很简单 图像叠加上它的拉普拉斯算子 给我们带来了非常好的效果 有很多类似的组合可以达成目的 我们用另外的图片来试试 又是一张看上去有点模糊的图片 这是它经拉普拉斯操作后的图像 或许有点难看出是什么 我们所做的处理是 求了二阶导数并将它们相加 看看这幅图像比之前的锐化了多少 真的锐化了很多 我们能从中看到许多的细节 而之前不太清楚 通过简单地将原始图像 叠加到拉普拉斯处理后的图像上 这儿就是所谓的 用于边缘检测的索贝尔算子 这是导数的另一种计算方式 就像这样 会产生很有趣的效果 图像与图像中不同方向上的导数相结合 加上求导后的那个图所产生的效果 真的很有趣 在这些效果中 有一种效果被称作反锐化掩模 (unsharp masking) 是一个很著名而又很简单的概念 在这里也有反锐化掩模效果 原理很简单 将图像平滑处理 比如 我们如何平滑一幅图像呢？ 我们已经知道了很多方法 其中一种就是取局部均值 反映在掩模中 就是全部都为1 然后再用 1/9 进行归一化处理 这样处理后 我们将其减去 原始图像 减去 模糊化的图像 那么原始图像对应的掩模是什么呢？ 很简单 如果是不起任何作用的掩模 它这里为1 其余为0 其他地方也是1和0 所以原始图像对应这个掩模 而模糊图像对应这个掩膜  我们取其差异 所以是用这个掩模减去这个掩模 就得到了这个图 注意符号 那么如果我从这个掩模中减去这个模糊图像掩模 中间得到0 这是我将得到的 那么如果做了归一化 就不会得到0 而将得到 8/9 在用正数进行归一化的情况下 并且 其它处为-1/9 是负数 这是一种导数 和我们之前看的一样 水平方向和垂直方向结合在一起的 导数的实现方法 我们将此结果和原图像相加 看看我们得到的 实际上边界被强化了 和我们在之前的例子中所见的一样 图像被锐化了 这是因为我们模糊化是通过 削弱边界得到的 当我们将边界叠加回去后 就得到了更加锐化的边界 以及锐化的图像 这就是所谓的反锐化掩模 一个虽简单但强大的操作 我接下来总结下 实际上下一个视频 将在 MATLAB 中给你们演示我们如何进行这些操作 怎样进行平滑处理 并叠加图像 很简单的操作 并能给我们的图像带来明显的效果 那么下个视频 会有 MATLAB 演示 再见
// 果壳教育无边界字幕组 | Coowesome | Mosesdc | 小白_远游