WEBVTT

1
00:00:00.000 --> 00:00:05.380
As we just saw, local averaging has some 
very interesting mathematical properties. 

2
00:00:05.380 --> 00:00:10.894
It's a very simple operation as well and 
is very useful as we saw a few examples 

3
00:00:10.894 --> 00:00:13.883
before. 
But we have also observed that it can 

4
00:00:13.883 --> 00:00:17.603
blur the information in the image, 
it can blur the edges. 

5
00:00:17.603 --> 00:00:21.921
So, how do we solve that? 
We have a number of different directions 

6
00:00:21.921 --> 00:00:24.911
to go. 
One is to basically replace this local 

7
00:00:24.911 --> 00:00:29.959
averaging by a different local operation 
and we're going to see that very soon. 

8
00:00:29.959 --> 00:00:35.079
The other is, we may ask ourself, are we 
only limited to average in the local 

9
00:00:35.079 --> 00:00:38.561
neighborhood? 
Maybe we can do a smarter average. 

10
00:00:38.561 --> 00:00:41.969
Remember that averaging is like a heat 
flow. 

11
00:00:41.969 --> 00:00:47.542
So, shall we basically average between a 
very hot pixel and a very cold pixel or 

12
00:00:47.542 --> 00:00:52.368
shall we try only to average between 
pixels that are similar and try to stop 

13
00:00:52.368 --> 00:00:57.319
averaging pixels that are very different. 
And that's, a very interesting concept 

14
00:00:57.319 --> 00:01:02.459
that can actually be implementing a very, 
very variety of ways in a very different 

15
00:01:02.459 --> 00:01:06.031
number of directions. 
But let's just explain one which is 

16
00:01:06.031 --> 00:01:09.603
extremely elegant. 
In part it's elegant because it's very 

17
00:01:09.603 --> 00:01:12.612
simple and it's actually called non-local 
means. 

18
00:01:12.612 --> 00:01:17.437
Instead of looking at averages in the 
local neighborhood, we're going to look 

19
00:01:17.437 --> 00:01:21.835
at averages in the whole image. 
Let's see why we can do that and how we 

20
00:01:21.835 --> 00:01:23.967
do that. 
The idea is very simple. 

21
00:01:23.967 --> 00:01:28.264
Let's just observe this image. 
We actually see that images have 

22
00:01:28.264 --> 00:01:31.197
repetition. 
Sometimes these are called 

23
00:01:31.197 --> 00:01:34.812
self-similarities. 
So for example, if we look at this local 

24
00:01:34.812 --> 00:01:40.132
neighborhood, it's very similar to this 
local neighborhood, and very similar to 

25
00:01:40.132 --> 00:01:44.477
this local neighborhood. 
We also observed that here this local 

26
00:01:44.477 --> 00:01:48.689
neighborhood is very similar to this 
local neighborhood, 

27
00:01:48.689 --> 00:01:52.825
even similar to this. 
They're far away, but they're very 

28
00:01:52.825 --> 00:01:54.480
similar, 
the same here. 

29
00:01:54.480 --> 00:01:59.953
So, before, we were thinking about 
averaging only pixels inside here, maybe 

30
00:01:59.953 --> 00:02:04.302
we should actually average neighborhoods 
that are similar. 

31
00:02:04.302 --> 00:02:10.001
Maybe we should average these three, so 
we can replace this pixel by certain 

32
00:02:10.001 --> 00:02:16.075
relationship with others, but we should 
not mix this with these because the local 

33
00:02:16.075 --> 00:02:21.496
neighborhoods are very different. 
So, the basic idea of non local means or 

34
00:02:21.496 --> 00:02:27.616
non local averaging is to try to average, 
try to enjoy the properties of averaging 

35
00:02:27.616 --> 00:02:31.166
but not restrict that to a local 
neighbourhood. 

36
00:02:31.166 --> 00:02:35.020
So why are we doing that, and how are we 
doing that? 

37
00:02:35.020 --> 00:02:41.441
So, the basic idea is that if we assume 
that these are identical things, 

38
00:02:41.441 --> 00:02:45.106
identical structures, but maybe with 
different noise. 

39
00:02:45.106 --> 00:02:49.758
Let's see the effects of that. 
Let's assume that we have a certain 

40
00:02:49.758 --> 00:02:53.260
pixel, lets call it P, that's what we 
observed. 

41
00:02:53.260 --> 00:03:02.314
It's the clean pixel plus some noise. 
But the noise, basically is a random 

42
00:03:02.314 --> 00:03:05.915
variable, 
so it's always slightly different. 

43
00:03:05.915 --> 00:03:09.683
So, we observed the pixel a number of 
times. 

44
00:03:09.683 --> 00:03:16.460
We observed one with a certain noise. 
We observe it again, same pixel, 

45
00:03:16.460 --> 00:03:22.510
but with a different noise. 
And we can observe it multiple times, 

46
00:03:22.510 --> 00:03:29.364
let's say that we observe this n times, 
always the same pixel but with different 

47
00:03:29.364 --> 00:03:35.450
realizations of the noise. 
If we average all these, 

48
00:03:35.450 --> 00:03:41.145
we can easily show these are basically 
properties of signal analysis, 

49
00:03:41.145 --> 00:03:47.749
that the noise goes down proportional the 
square of the number of times that we 

50
00:03:47.749 --> 00:03:51.381
average. 
So we are averaging always the same 

51
00:03:51.381 --> 00:03:54.682
pixels, 
the noise is the random variable, 

52
00:03:54.682 --> 00:03:59.635
and basically, the noise goes down 
proportional to n^. 

53
00:03:59.635 --> 00:04:03.350
The more we average, the more we reduce 
noise. 

54
00:04:03.350 --> 00:04:09.494
Of course, it's very important that we 
always average exactly the same pixel. 

55
00:04:09.494 --> 00:04:16.286
The noise is the only thing that changes. 
So this is one of the motivations of non 

56
00:04:16.286 --> 00:04:22.997
local means to say, okay maybe I can find 
repeated structures that are identical or 

57
00:04:22.997 --> 00:04:28.899
at least very similar, the noise is 
different all around and I can reduce 

58
00:04:28.899 --> 00:04:32.784
that noise by averaging just because of 
this. 

59
00:04:32.784 --> 00:04:40.097
And the basic idea then, is to look for 
similar neighborhoods first and average 

60
00:04:40.097 --> 00:04:44.612
them. 
So if I want to replace this pixel in the 

61
00:04:44.612 --> 00:04:50.762
center, here, I look at the neighborhood. 
I look for similar neighborhoods and I 

62
00:04:50.762 --> 00:04:56.756
replace the pixel by the center, by the 
average of the center of the similar 

63
00:04:56.756 --> 00:05:00.863
neighborhoods. 
And how do I find similar neighborhoods? 

64
00:05:00.863 --> 00:05:04.542
So there's a whole literature on non 
local means, 

65
00:05:04.542 --> 00:05:09.798
that basically includes two parts. 
How do I find similar neighborhoods? 

66
00:05:09.798 --> 00:05:14.679
That's the first part. 
Once I found them, how do I average them? 

67
00:05:14.679 --> 00:05:20.535
Do I weighted average them? Do I compute 
a different relationship between them? 

68
00:05:20.535 --> 00:05:25.933
But once again, the simplest for both 
options is look for neighborhoods by 

69
00:05:25.933 --> 00:05:31.036
comparing, let's say, the mean square 
error between them and make sure that 

70
00:05:31.036 --> 00:05:34.565
it's very small. 
That's a very, very simple operation. 

71
00:05:34.565 --> 00:05:40.290
You go around the image you look at 
neighborhoods, lets say 3x3 or 5x5 or 

72
00:05:41.435 --> 00:05:42.702
7x7. 
And you say, okay, 

73
00:05:42.702 --> 00:05:45.689
who is similar to this? 
You go to around. 

74
00:05:45.689 --> 00:05:49.074
You find a set of them. 
You can include all of them. 

75
00:05:49.074 --> 00:05:51.928
You can include just the most similar 
ones. 

76
00:05:51.928 --> 00:05:56.175
Once you find them, you go into the 
center of every neighborhood, 

77
00:05:56.175 --> 00:06:00.888
and lets say you average that, and you 
replace the pixel by the average. 

78
00:06:00.888 --> 00:06:05.910
Then, if you want to actually clean a 
pixel that is here, you look for similar 

79
00:06:05.910 --> 00:06:09.747
pixel, similar neighborhoods to what's 
running that pixel, 

80
00:06:09.747 --> 00:06:13.786
you go around the image, 
you find a few, and you replace this 

81
00:06:13.786 --> 00:06:18.430
pixel by the average of the centers of 
all the similar neighborhoods. 

82
00:06:18.430 --> 00:06:23.613
Once again, this is just one example. 
You could look for similar neighborhoods 

83
00:06:23.613 --> 00:06:27.719
in a different fashion. 
You could, actually, once you find them, 

84
00:06:27.719 --> 00:06:32.902
instead of doing average do a weighted 
average or do other functions but the 

85
00:06:32.902 --> 00:06:37.741
concept is always the same. 
Instead of just averaging to rep, instead 

86
00:06:37.741 --> 00:06:43.785
of just averaging around the neighborhood 
to replace this pixel, we basically look 

87
00:06:43.785 --> 00:06:48.715
all around the image for similar 
neighborhoods with some measure of 

88
00:06:48.715 --> 00:06:52.133
similarity. 
And once we find them, we combine them 

89
00:06:52.133 --> 00:06:57.436
and in such a way we denoise the pixel 
base on the concept I just explained. 

90
00:06:57.436 --> 00:07:02.878
This is an extremely similar operation. 
Once again, basically one or two common 

91
00:07:02.878 --> 00:07:07.553
lines in [INAUDIBLE] for example. 
You can actually perform this operation 

92
00:07:07.553 --> 00:07:12.925
an extremely, extremely powerful and has 
opened a lot of research, very modern 

93
00:07:12.925 --> 00:07:17.600
research in image processing basically in 
the last couple of years. 

94
00:07:17.600 --> 00:07:22.335
What we're going to do next is I'm going 
to actually run some of these examples on 

95
00:07:22.335 --> 00:07:25.349
real images. 
I'm going to be doing this on real time. 

96
00:07:25.349 --> 00:07:27.686
So, see you in the next video for that. 