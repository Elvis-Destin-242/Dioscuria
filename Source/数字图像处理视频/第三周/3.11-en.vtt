WEBVTT

1
00:00:00.000 --> 00:00:03.095
Hello. 
And welcome back to our Image and Video 

2
00:00:03.095 --> 00:00:06.796
Processing Class. 
We have seen very interesting effects 

3
00:00:06.796 --> 00:00:11.641
that we can obtain in images just by 
doing these very, very simple local 

4
00:00:11.641 --> 00:00:15.948
neighborhood operations. 
Let's use this video to see a couple of 

5
00:00:15.948 --> 00:00:19.514
additional ones. 
In particular, we're going to talk about 

6
00:00:19.514 --> 00:00:23.013
derivatives. 
How we implement those derivatives with 

7
00:00:23.013 --> 00:00:28.329
local neighborhoods, and what important 
are, how important are those derivatives 

8
00:00:28.329 --> 00:00:31.425
to do very, very interesting effects in 
images. 

9
00:00:31.425 --> 00:00:35.492
So let's dive into that. 
Here we have a picture. 

10
00:00:35.492 --> 00:00:41.067
It's a one dimensional image that has 
flat, rump, flat and a very, very sharp 

11
00:00:41.067 --> 00:00:45.586
jump and flat again. 
And let's see what happens when we take 

12
00:00:45.586 --> 00:00:49.127
the derivatives of this. 
I have drawn this here. 

13
00:00:49.127 --> 00:00:54.475
But before that you might ask yourself, 
derivatives, that's a continuous 

14
00:00:54.475 --> 00:00:57.715
operation. 
How can we implement that in our 

15
00:00:57.715 --> 00:01:01.330
computer? 
There are many, many ways of doing that. 

16
00:01:01.330 --> 00:01:07.555
But let me illustrate a very simple one. 
If I want to take the derivative of an 

17
00:01:07.555 --> 00:01:15.289
image, in the x direction, 
I can basically write that in discrete 

18
00:01:15.289 --> 00:01:23.510
fashion as f, 
add the pixel x1-fx. 

19
00:01:23.510 --> 00:01:26.349
+ 1 - f(x). 
Very simple. 

20
00:01:26.349 --> 00:01:32.535
I just subtract two consecutive pixels. 
If I want to write the neighborhood 

21
00:01:32.535 --> 00:01:38.399
operation. 
Let's say in a 3x3 that would mean f(x + 

22
00:01:38.399 --> 00:01:46.363
1), I have a 1 here, - f(x). 
I have a minus one here, and I replace as 

23
00:01:46.363 --> 00:01:52.736
a zero. 
So that's basically how I represent that. 

24
00:01:52.736 --> 00:01:57.183
I get, a one dimensional derivative in 
the x direction. 

25
00:01:57.183 --> 00:02:02.783
Similarly, I can get a one dimensional 
derivative in the y direction. 

26
00:02:02.783 --> 00:02:08.630
So we see here that, simulated values of 
this rump, flat, jump and flat. 

27
00:02:08.630 --> 00:02:13.160
So we start with flat 6 we have a, 
decrease in rump, 

28
00:02:13.160 --> 00:02:18.622
flat 1 and then a big jump. 
The first derivative is this first row 

29
00:02:18.622 --> 00:02:22.880
that we see here. 
Very easy to compute following this 

30
00:02:22.880 --> 00:02:26.897
operation. 
We have actually a couple of 0s because 

31
00:02:26.897 --> 00:02:30.593
there's no derivative. 
The values are constant. 

32
00:02:30.593 --> 00:02:37.180
Then basically we have a -1, -1 that 
means that the pixel values are 

33
00:02:37.180 --> 00:02:40.876
decreasing in jumps and constant jumps of 
one. 

34
00:02:40.876 --> 00:02:46.500
It's negative, so they are decreasing. 
And then once again, we have flat. 

35
00:02:46.500 --> 00:02:50.713
And then there's a big jump here when we 
do 6 - 1, 

36
00:02:50.713 --> 00:02:54.490
we're going to get 5 and then it flattens 
out again. 

37
00:02:54.490 --> 00:03:00.229
So we already see that considering the 
first derivative, we can understand that 

38
00:03:00.229 --> 00:03:05.314
for example there is a rump, 
a smooth decline of pixel values and then 

39
00:03:05.314 --> 00:03:09.745
there's a big jump. 
Very interesting with a derivative we can 

40
00:03:09.745 --> 00:03:14.384
detect jumps as we expected. 
Then we can take actually the second 

41
00:03:14.384 --> 00:03:17.975
derivative. 
And once again we can write an explicit 

42
00:03:17.975 --> 00:03:21.213
formula and a mask for this second 
derivative. 

43
00:03:21.213 --> 00:03:26.282
So we are going to do this second 
derivative of our image, once again in 

44
00:03:26.282 --> 00:03:30.084
the x direction. 
And once again there are many ways of 

45
00:03:30.084 --> 00:03:40.548
implementing the second derivative but 
one of them is to take f at x + 1 + f(x - 

46
00:03:40.548 --> 00:03:47.197
1) and subtract 2 times f at the actual 
pixel. 

47
00:03:47.197 --> 00:03:56.819
And that's, once again, very simple to do 
with our, ubiquitous 3x3. 

48
00:03:56.819 --> 00:04:03.725
Now we have a -2 here. 
A 1 and a 1 on each one of the sides 

49
00:04:03.725 --> 00:04:09.940
representing these two. 
And then we have a 0 everyplace else. 

50
00:04:09.940 --> 00:04:14.640
if we do that, 
so that's kind of an addition derivative 

51
00:04:14.640 --> 00:04:18.854
to the first derivative. 
It's a very simple exercise. 

52
00:04:18.854 --> 00:04:22.177
We are, have to take derivatives of 
these. 

53
00:04:22.177 --> 00:04:27.040
We could directly apply this to the 
original one if we want. 

54
00:04:27.040 --> 00:04:34.010
But it's easier just to take, you know, 
continuous pixel subtraction to the next 

55
00:04:34.010 --> 00:04:37.251
one. 
And we see jumps when there are big 

56
00:04:37.251 --> 00:04:39.683
changes. 
So, 0 - 0 is 0. 

57
00:04:39.683 --> 00:04:46.191
For example -1 - -1, once again, 0. 
But when there are changes, we see a 

58
00:04:46.191 --> 00:04:47.801
jump. 
We see 1 here. 

59
00:04:47.801 --> 00:04:52.246
We see another here. 
So the second derivative very clearly 

60
00:04:52.246 --> 00:04:55.772
marks when there are big changes in our 
image. 

61
00:04:55.772 --> 00:05:00.983
And that's extremely powerful. 
We are detecting big changes by doing 

62
00:05:00.983 --> 00:05:07.115
derivatives which are, at least in their 
simplest fashion, implemented with masks 

63
00:05:07.115 --> 00:05:11.330
like this one. 
So let's just continue with this, and see 

64
00:05:11.330 --> 00:05:17.649
some of the examples in a second. 
Here are different masks that compute 

65
00:05:17.649 --> 00:05:22.899
different types of derivatives. 
So I'm going to ask you, look at this 

66
00:05:22.899 --> 00:05:28.230
mask, for example, and tell me what is 
this mask actually computing? 

67
00:05:28.230 --> 00:05:33.583
Is it computing the third derivative for 
example in the x direction? 

68
00:05:33.583 --> 00:05:37.991
Is it computing the third derivative in 
the y direction? 

69
00:05:37.991 --> 00:05:43.659
Or is it computing the sum of the 
derivatives in the first the first 

70
00:05:43.659 --> 00:05:49.878
derivatives in the x and y directions? 
Or is it computing the sum of the second 

71
00:05:49.878 --> 00:05:55.074
derivatives in the x and the second 
derivative in the y direction. 

72
00:05:55.074 --> 00:05:59.640
An interesting property. 
So what is this mask implementing? 

73
00:06:00.820 --> 00:06:06.770
I thought that, that wasn't too hard for 
you, so I gave you that as an exercise, 

74
00:06:06.770 --> 00:06:11.882
but I just write it down. 
This is actually computing the sum of the 

75
00:06:11.882 --> 00:06:17.375
second derivative in the x direction and 
the second derivative, in the y 

76
00:06:17.375 --> 00:06:20.579
direction. 
So this is computing, the second 

77
00:06:20.579 --> 00:06:28.117
derivative of f in the x direction plus 
the second derivative of y. 

78
00:06:28.117 --> 00:06:31.585
Of f, I apologize, 
in the y direction. 

79
00:06:31.585 --> 00:06:37.366
And that's basically we know, either from 
the previous slide, 

80
00:06:37.366 --> 00:06:44.688
because we can compute the second 
derivative in x and the second derivative 

81
00:06:44.688 --> 00:06:49.602
in y, and add them. 
And we actually know that that's 

82
00:06:49.602 --> 00:07:04.208
basically f(x + 1) + f(x - 1) - 2f(x). 
And I am not writing the ys, because they 

83
00:07:04.208 --> 00:07:10.426
haven't changed. 
It should be at y, y and y and plus. 

84
00:07:10.426 --> 00:07:15.302
So this was x and now we are going to do 
y. 

85
00:07:15.302 --> 00:07:29.329
That's f(y + 1) + f(y - 1) - 2f(y). 
And once again, all these are for a 

86
00:07:29.329 --> 00:07:35.141
constant x. 
So all these are for a constant y. 

87
00:07:35.141 --> 00:07:43.407
And all these are for a constant x. 
When we add them, we get this. 

88
00:07:43.407 --> 00:07:48.917
And this is actually what's called the 
Laplacian of f. 

89
00:07:48.917 --> 00:07:54.443
And we briefly talked about this when we 
were talking about the relationships 

90
00:07:54.443 --> 00:07:59.190
between averaging and the Guassian 
filtering, and the heat equation. 

91
00:07:59.190 --> 00:08:02.874
So this is what's called the Laplacian of 
the image, 

92
00:08:02.874 --> 00:08:07.550
is the sum of the second derivatives in 
the x and in the y direction. 

93
00:08:07.550 --> 00:08:11.281
These are different implementations of 
the laplacian. 

94
00:08:11.281 --> 00:08:14.945
Here for example we make the difference 
even stronger. 

95
00:08:14.945 --> 00:08:18.270
We stretch it. 
And we're going to see the effects of 

96
00:08:18.270 --> 00:08:20.645
that. 
The basic idea is that in the 

97
00:08:20.645 --> 00:08:25.801
surrounding, basically we have one sign 
and in the pixel we have a different 

98
00:08:25.801 --> 00:08:28.787
sign. 
And we are basic computing in that way 

99
00:08:28.787 --> 00:08:32.722
second derivatives. 
Just different implementations of this 

100
00:08:32.722 --> 00:08:37.879
type of second derivative, derivatives. 
So what are the effects of this in an 

101
00:08:37.879 --> 00:08:40.300
image? 
Very interesting. 

102
00:08:40.300 --> 00:08:49.220
Here we see an image of the moon. 
What we see next in this image is the 

103
00:08:49.220 --> 00:08:56.214
laplacian It's the second derivative in 
the x direction, plus second derivative 

104
00:08:56.214 --> 00:09:01.308
in the y direction. 
And we actually see it implemented with 

105
00:09:01.308 --> 00:09:04.671
this. 
Here, we basically just stretch it. 

106
00:09:04.671 --> 00:09:10.208
Remember, that we know how to modify 
histograms so we are stretching it. 

107
00:09:10.208 --> 00:09:14.973
And what we are doing next, is we are 
adding this to this. 

108
00:09:14.973 --> 00:09:20.292
So we basically take an image, 
takes the laplacian. 

109
00:09:20.292 --> 00:09:26.621
We stretch it, and then we add them. 
And we get this image, which you can 

110
00:09:26.621 --> 00:09:32.326
observe, is a bit sharper. 
Basically, some of the details are much 

111
00:09:32.326 --> 00:09:37.140
more clear in this image than they were 
in this image. 

112
00:09:37.140 --> 00:09:43.515
Now, we can actually make those details 
even more clear by computing a laplacian 

113
00:09:43.515 --> 00:09:46.305
that takes in contrast with only a -4, a 
-8. 

114
00:09:47.500 --> 00:09:51.724
So it actually stretches the differences 
even more. 

115
00:09:51.724 --> 00:09:55.550
The process would be the same. 
We take the image, 

116
00:09:55.550 --> 00:10:00.191
we compute the laplacian with this, at 
every pixel. 

117
00:10:00.191 --> 00:10:07.339
So every pixel is replaced by minus its 
own value, and plus the values of the 

118
00:10:07.339 --> 00:10:14.858
surrounding pixels and then that we owe 
to the original image and look, we have a 

119
00:10:14.858 --> 00:10:21.825
very sharp rendering of these image, you 
see a lot of details here that were very 

120
00:10:21.825 --> 00:10:24.714
blurry here. 
Very simple operation. 

121
00:10:24.714 --> 00:10:29.725
Image plus its reflection gives us a 
very, very nice effect. 

122
00:10:29.725 --> 00:10:33.463
Many, many of these combinations can be 
done. 

123
00:10:33.463 --> 00:10:38.050
And here we see another example for a 
different image. 

124
00:10:38.050 --> 00:10:46.888
Again an image that looks a bit blurry. 
We see once again it's a laplacian. 

125
00:10:46.888 --> 00:10:51.384
It might be hard to notice. 
All what we have done from here to here 

126
00:10:51.384 --> 00:10:55.545
is once again to take second derivatives, 
and then we add them. 

127
00:10:55.545 --> 00:11:00.770
And look how much sharper this image is 
than this one. 

128
00:11:00.770 --> 00:11:05.756
Much, much sharper image. 
We can see a lot of the details that were 

129
00:11:05.756 --> 00:11:10.365
not very clear here. 
By a very simple operation of adding the 

130
00:11:10.365 --> 00:11:15.200
image to it's laplacian. 
And here, we see basically what's called 

131
00:11:15.200 --> 00:11:20.791
a Sobel edges that are basically a 
different way of computing these 

132
00:11:20.791 --> 00:11:24.795
derivatives. 
So, very interesting effects in images by 

133
00:11:24.795 --> 00:11:29.404
combining derivatives with the image in 
different directions. 

134
00:11:29.404 --> 00:11:33.560
Additions of derivatives, 
very, very interesting effects. 

135
00:11:33.560 --> 00:11:38.354
One of those effects is what's called, 
Unsharp masking. 

136
00:11:38.354 --> 00:11:42.705
It's a very, very famous concept. 
Very, very simple. 

137
00:11:42.705 --> 00:11:47.688
It's call Unsharp masking. 
We have it here. 

138
00:11:47.688 --> 00:11:53.774
The idea is very simple. 
You take the image and you smooth it out. 

139
00:11:53.774 --> 00:12:01.170
For example, how can we smooth an image? 
We already know many ways of doing that. 

140
00:12:01.170 --> 00:12:08.754
One of them is by doing local averages. 
So that's the response to a mask which is 

141
00:12:08.754 --> 00:12:13.675
all 1s. 
And, you know, 1 / 9 just to basically 

142
00:12:13.675 --> 00:12:18.035
normalize. 
We do that, and then we subtract the 

143
00:12:18.035 --> 00:12:24.860
original, minus the blurry image. 
Now, what's the mask correspondent to the 

144
00:12:24.860 --> 00:12:28.340
original image? 
Very simple. 

145
00:12:28.340 --> 00:12:35.440
A mask that does nothing, has a one here 
and a zero. 

146
00:12:35.440 --> 00:12:41.059
And replace X. 
So originally match is this mask, blurry 

147
00:12:41.059 --> 00:12:45.816
matches this mask. 
We take the differences, so it's this 

148
00:12:45.816 --> 00:12:49.220
mask minus this. 
Would produce this. 

149
00:12:49.220 --> 00:12:54.460
Remember signs. 
So, if I subtract from this, this, I will 

150
00:12:54.460 --> 00:13:00.672
get a zero in the middle. 
And I will get, basically I won't get a 

151
00:13:00.672 --> 00:13:06.271
zero if I normalize. 
But I will basically get eight ninth, if 

152
00:13:06.271 --> 00:13:12.678
I do the normalization by the positive 
number, and every place else I will get 

153
00:13:12.678 --> 00:13:18.591
-1/9 a negative number. 
That's kind of a derivative, as we saw 

154
00:13:18.591 --> 00:13:24.340
before, kind of an implementation of 
derivatives, in the, horizontal and 

155
00:13:24.340 --> 00:13:30.337
vertical direction combined. 
We take that result and we add it to the 

156
00:13:30.337 --> 00:13:34.884
original image. 
And look what we have, we basically are 

157
00:13:34.884 --> 00:13:41.438
enhancing the bandwidth as we have seen 
in the previous examples that basically 

158
00:13:41.438 --> 00:13:47.500
things become sharper because what we 
managed to do with the blurring was 

159
00:13:47.500 --> 00:13:53.971
reduce the boundaries and then when we 
add that back we had sharper boundaries 

160
00:13:53.971 --> 00:14:00.197
are very sharp image and that's what 
that's called Unsharp masking, a very 

161
00:14:00.197 --> 00:14:04.395
simple operation and very powerful as 
well. 

162
00:14:04.395 --> 00:14:09.489
So I'm going to conclude this video. 
In actually the next video by showing you 

163
00:14:09.489 --> 00:14:14.191
once again inside math lab how we play 
with these type of operations of 

164
00:14:14.191 --> 00:14:19.153
smoothing added images very simple 
operations that produce very interesting 

165
00:14:19.153 --> 00:14:23.072
effects in our images. 
So see you in the next video with our 

166
00:14:23.072 --> 00:14:24.574
math lab demonstration. 