WEBVTT

1
00:00:00.000 --> 00:00:03.637
大家好 欢迎回来 现在我们已经知道了 

2
00:00:03.637 --> 00:00:07.671
非局部均值 (non-local means) 的基本内容 让我们来实时演示一下 

3
00:00:07.671 --> 00:00:13.226
例子中的非局部均值降噪采用在线图像处理学报网 (Image Processing On Line Journal) 上的资源实现 

4
00:00:13.226 --> 00:00:16.599
我已经把这个网站的链接 

5
00:00:16.599 --> 00:00:21.889
放到了课程网页上 这个网站上有大量在线的 

6
00:00:21.889 --> 00:00:26.519
图像处理算法 我强烈建议你访问这里 

7
00:00:26.519 --> 00:00:31.112
可以在这里尝试许多前沿的图像处理技术 

8
00:00:31.112 --> 00:00:35.578
网站首先描述了整个算法 

9
00:00:35.578 --> 00:00:40.548
并提供了可下载的代码 代码可在自己计算机上使用 还有在线演示 

10
00:00:40.548 --> 00:00:43.191
这也就是我们接下来要做的事 

11
00:00:43.191 --> 00:00:47.909
你可以上传自己的图片 或者使用网站提供的图片 

12
00:00:47.909 --> 00:00:52.628
这些图片只是用来演示 并帮助你更好地理解算法 

13
00:00:52.628 --> 00:00:55.836
那么我们选这张图作为例子 

14
00:00:55.836 --> 00:00:57.181
它在这里 

15
00:00:57.181 --> 00:01:01.269
我们将运行这个算法 我们先给这张图加点噪声 

16
00:01:01.269 --> 00:01:07.298
看看非局部均值如何降噪 然后点击运行 

17
00:01:07.298 --> 00:01:09.777
现在算法正在运行 我们能看到这个 

18
00:01:09.777 --> 00:01:14.480
这个算法可以运行得很快 但现在它运行在服务器上 

19
00:01:14.480 --> 00:01:18.866
而且没有对此做相应的优化 

20
00:01:18.866 --> 00:01:22.871
不过我们还是得到了结果 我们来看一下细节 

21
00:01:22.871 --> 00:01:25.477
这个是噪声图像 

22
00:01:25.477 --> 00:01:30.550
它是原来的图像加上了噪声 现在看到的是降噪后的图像 

23
00:01:30.550 --> 00:01:33.436
再来一遍 这是噪声图像 

24
00:01:33.436 --> 00:01:36.389
这是降噪后的图像 这是原来的图像 

25
00:01:36.389 --> 00:01:41.572
我们可以看出有差别 但显然降噪后的图像比 

26
00:01:41.572 --> 00:01:45.967
噪声图像要好很多 现在我们能看到 

27
00:01:45.967 --> 00:01:49.313
降噪后的图像与原来的图像的差别 

28
00:01:49.313 --> 00:01:55.052
再来一次 这是噪声图像 这是降噪后的图像 这是原来的图像 

29
00:01:55.052 --> 00:01:59.459
以及两者相差的图像 我们换别的图来运行一下 

30
00:01:59.459 --> 00:02:04.337
我们在这里选一个新的输入 我们可以选一张不同的图 

31
00:02:04.337 --> 00:02:08.320
比如这个骰子图 我们可以选不同程度的噪声 

32
00:02:08.320 --> 00:02:13.413
加上较大的噪声看看会发生什么 接着我们来点击运行 

33
00:02:13.413 --> 00:02:16.126
趁它在运行 再重申一下 

34
00:02:16.126 --> 00:02:19.854
非局部均值的目标是找到一些区域 

35
00:02:19.854 --> 00:02:24.380
如果我想给这个区域降噪 我会在周围寻找 

36
00:02:24.380 --> 00:02:28.773
相近的区域并对它们求平均 噪声越大 

37
00:02:28.773 --> 00:02:33.831
算法所用到的区域就越多 因为它要设法对更多的小块求平均 

38
00:02:33.831 --> 00:02:37.226
以此来帮助我们进一步地降低噪声 

39
00:02:37.226 --> 00:02:41.220
算法运行完了 我们又看到了噪声图像 

40
00:02:41.220 --> 00:02:44.282
这是噪声图像 这是降噪后的图像 

41
00:02:44.282 --> 00:02:47.397
这是原来的图像 而这个图像显示出它们的差异 

42
00:02:47.397 --> 00:02:53.260
这张图像的降噪效果非常好 

43
00:02:53.260 --> 00:02:55.060
噪声图像 降噪后的图像 

44
00:02:55.060 --> 00:02:58.262
噪声图像 降噪后的图像 原来的图像 以及差异的图像 

45
00:02:58.262 --> 00:03:03.450
这张图没有很多的纹理 这也是为什么这类算法 

46
00:03:03.450 --> 00:03:07.357
能够处理得非常好 当图像有很多纹理时 

47
00:03:07.357 --> 00:03:12.097
算法依旧表现得很好 但对所有的图像降噪算法来说 

48
00:03:12.097 --> 00:03:15.620
处理纹理会比较难 

49
00:03:15.620 --> 00:03:19.602
让我们再看一遍作为总结 

50
00:03:19.602 --> 00:03:22.354
噪声图像 降噪后的图像 原来的图像 以及差异的图像 

51
00:03:22.354 --> 00:03:28.220
再提一下 你可以上 ipol.im 网站试试这个示例 

52
00:03:28.220 --> 00:03:33.941
或者网站提供的任何一个算法 你可以上传你自己的图像 

53
00:03:33.941 --> 00:03:38.069
看它如何处理 谢谢大家 下个视频再见
// 果壳教育无边界字幕组 | nblintao |  luoyetx | 小白_远游