WEBVTT

1
00:00:00.000 --> 00:00:04.521
现在我们介绍直方图均衡化的一个简单拓展 

2
00:00:04.521 --> 00:00:08.540
它就是直方图匹配 我们列举一些例子 

3
00:00:08.540 --> 00:00:13.341
之前看到过 在直方图均衡化中 我们对任意直方图   

4
00:00:13.341 --> 00:00:17.503
任意像素分布 都尽可能与均匀分布的直方图匹配 

5
00:00:17.503 --> 00:00:20.384
但是设想我们有这样一个像素分布 

6
00:00:20.384 --> 00:00:25.442
就是我们之前看到的分布图 而有人告诉我们 

7
00:00:25.442 --> 00:00:29.155
这个是我们的匹配目标 我不需要做均衡化 

8
00:00:29.155 --> 00:00:34.021
我只要处理后的直方图尽可能与这个分布相近 

9
00:00:34.021 --> 00:00:36.645
匹配的思想与前面提到的均衡化一样 

10
00:00:36.645 --> 00:00:39.270
我们要找到一个映射 就写在这里 

11
00:00:39.270 --> 00:00:42.280
这正是我们之前所做的映射 

12
00:00:42.280 --> 00:00:47.432
这个映射可以让我们将这个分布转换到 

13
00:00:47.432 --> 00:00:52.304
与这个直方图尽量接近 本例中 是变成这个图 很快我会解释这个方法 

14
00:00:52.304 --> 00:00:55.187
我们将会获得这样的分布 

15
00:00:55.187 --> 00:00:58.774
这与目标分布非常相似 并不是完全一致 但是非常的相似 

16
00:00:58.774 --> 00:01:03.579
从前面的视频中可以知道 很多情况下我们没办法完全得到指定的直方图 

17
00:01:03.579 --> 00:01:07.166
在前一个视频中 目标是均衡直方图 

18
00:01:07.166 --> 00:01:11.074
但是我们可以得到很相近的结果 正如这个直方图 

19
00:01:11.074 --> 00:01:14.790
那么如何匹配呢？ 大家已经掌握了所有方法 

20
00:01:14.790 --> 00:01:16.840
现在我来举例说明 

21
00:01:16.840 --> 00:01:21.991
我们从现有图像的像素值分布开始 

22
00:01:21.991 --> 00:01:28.530
无论分布怎样 这就是给定的图像 

23
00:01:28.530 --> 00:01:33.582
我们知道怎样把它映射到均匀分布 

24
00:01:33.582 --> 00:01:38.840
现在 给定一个分布 

25
00:01:38.840 --> 00:01:44.569
我们也知道如何把这个目标分布 

26
00:01:44.569 --> 00:01:50.135
映射为一个均匀分布 因此 如果知道了怎样从这里映射到这里 

27
00:01:50.135 --> 00:01:56.110
和如何从这里映射到这里 如果反转这个过程 我们便能知道 

28
00:01:56.110 --> 00:02:01.251
整个过程 这是我们的目标 于是我们将一个像素值从这里映射到这里 

29
00:02:01.251 --> 00:02:05.158
也许你想问 

30
00:02:05.158 --> 00:02:10.573
当我们想获得这个分布时 这一像素值从何而来 

31
00:02:10.573 --> 00:02:14.689
而我们只需求逆映射 所以我们有了一个映射和我们的映射 

32
00:02:14.689 --> 00:02:20.803
而我们只要反转第二个映射 假设这个是像素值 

33
00:02:20.803 --> 00:02:27.132
这一像素的灰度值7 转换为这里的10 然后你想问 从这里 

34
00:02:27.132 --> 00:02:32.752
哪一个像素值转换到10 然后这个映射会告诉你 是15 

35
00:02:32.752 --> 00:02:36.392
那么我们就完成了 7 到 10 的转换 

36
00:02:36.392 --> 00:02:41.446
而 10 求逆得到15 所以我们得到了 7 到 15 的映射 

37
00:02:41.446 --> 00:02:45.710
这就是直方图匹配的方法 

38
00:02:45.710 --> 00:02:50.942
通过直方图均衡化 现在我们知道 

39
00:02:50.942 --> 00:02:55.948
如何匹配任意两个给定的分布 这里提醒一下 

40
00:02:55.948 --> 00:03:00.195
正如前一个视频了解的 这个映射不需要是一对一的 

41
00:03:00.195 --> 00:03:06.262
所以 可能这里有一个以上的不同像素值 映射到那边的同一个像素值 

42
00:03:06.262 --> 00:03:10.130
所以 从像素值7 假如映射到10 

43
00:03:10.130 --> 00:03:15.880
可能也有一个像素值15 从这里映射到10 

44
00:03:15.880 --> 00:03:20.600
可能像素值 20 也会映射到 10 

45
00:03:20.600 --> 00:03:24.821
我要将 7 映射到 15 还是 20呢？ 

46
00:03:24.821 --> 00:03:29.821
这需要我们决定 最常用的决策是 

47
00:03:29.821 --> 00:03:35.017
挑选最接近原始值的值 所以我们可以对图像中的像素值做最小的变换 

48
00:03:35.017 --> 00:03:38.978
但是我们也可以做其他决策 

49
00:03:38.978 --> 00:03:44.174
只要这些决策保持一致 并且保证 

50
00:03:44.174 --> 00:03:49.369
最后得到一个递增函数 记住我们并不想出现像素值翻转 

51
00:03:49.369 --> 00:03:52.097
我们再重复一遍 先进行两次直方图均衡化 

52
00:03:52.097 --> 00:03:57.554
并且对其中一次均衡化求逆 然后完成直方图匹配 

53
00:03:57.554 --> 00:04:00.840
我们来看一下匹配的效果 

54
00:04:00.840 --> 00:04:04.905
这里是一个具体例子 这里有一幅灰暗的图像 

55
00:04:04.905 --> 00:04:09.039
可以看到 直方图中大多是暗灰度值 

56
00:04:09.039 --> 00:04:14.190
所以我们也难以看到图像的细节 因为它的颜色太暗了 

57
00:04:14.190 --> 00:04:19.029
如果我们进行直方图均衡化 会得到一个太明亮的图像 如图所示 

58
00:04:19.029 --> 00:04:24.067
这正是我们通常寻找的 T(r) 映射 

59
00:04:24.067 --> 00:04:26.652
而这是新的直方图 

60
00:04:26.652 --> 00:04:31.889
我们可以从直方图和图像中看到 处理后的图像太亮了 

61
00:04:31.889 --> 00:04:34.872
所以我们并没有获得真正想要的图像 

62
00:04:34.872 --> 00:04:39.578
我们需要的是一幅更容易观察到不同区域的图像 

63
00:04:39.578 --> 00:04:44.369
还是这幅图像 

64
00:04:44.369 --> 00:04:49.846
如果有人告诉我们 这个分布可以改善图像 

65
00:04:49.846 --> 00:04:55.253
我们就可以做直方图匹配 然后再来一次 

66
00:04:55.253 --> 00:05:02.132
我们从原始分布得到均衡化分布 再从这个新的分布 

67
00:05:02.132 --> 00:05:08.490
我们进行均衡化 得到这个映射 

68
00:05:08.490 --> 00:05:12.160
反转这个映射 这就是反映射 

69
00:05:12.160 --> 00:05:18.410
然后我们可以通过两个步骤 先将原始直方图转换为这个均衡化直方图 

70
00:05:18.410 --> 00:05:23.563
然后将均衡化的直方图通过这个逆映射转换为新的像素值 

71
00:05:23.563 --> 00:05:29.305
于是我们得到了这个分布 得到了比这张更清晰的图像 

72
00:05:29.305 --> 00:05:33.870
这个新的图像便于我们观察其中的细节 

73
00:05:33.870 --> 00:05:39.554
所以我们通过两次直方图均衡化完成了直方图匹配 

74
00:05:39.554 --> 00:05:42.802
一次是直接均衡化 而另一次需要求逆 

75
00:05:42.802 --> 00:05:48.856
而再一次 如果这里出现了多个映射 我们需要决定用哪种映射 

76
00:05:48.856 --> 00:05:53.950
比如说可以选择最接近原始图像的像素值 

77
00:05:53.950 --> 00:05:58.298
真是一箭双雕 如果我们知道怎么做直方图均衡 

78
00:05:58.298 --> 00:06:01.880
也就知道了怎么做直方图匹配 

79
00:06:01.880 --> 00:06:06.909
当然 设计目标直方图也是一门艺术 

80
00:06:06.909 --> 00:06:12.226
这个取决于实际需求 让我们提出直方图均衡化 

81
00:06:12.226 --> 00:06:15.100
或者直方图匹配的最后一个问题 

82
00:06:15.100 --> 00:06:20.238
到目前为止 我们考虑的都是整幅图像 我们就看整幅图像 

83
00:06:20.238 --> 00:06:25.509
关注整体分布 并把这些像素分布匹配到新的分布 

84
00:06:25.509 --> 00:06:30.381
进行均衡化或者某一特定分布 

85
00:06:30.381 --> 00:06:35.519
我们也可以在局部作同样的操作 比如 

86
00:06:35.519 --> 00:06:39.790
我们对这幅图像 做全局直方图均衡化 将得到这一图像 

87
00:06:39.790 --> 00:06:44.024
有时候它已经看起来好多了 但是效果不甚完美 

88
00:06:44.024 --> 00:06:49.207
在整幅图像中 我只有256个像素值来分布 

89
00:06:49.207 --> 00:06:55.121
我可能无法同时在这里和这里都得到较高的对比度 

90
00:06:55.121 --> 00:06:59.940
所以 解决这个问题的方法是 考虑不同区域 

91
00:06:59.940 --> 00:07:04.792
比如 我们只对这个区域做直方图均衡 

92
00:07:04.792 --> 00:07:09.952
并且对这个区域也进行直方图均衡化 它们可以是重叠的 

93
00:07:09.952 --> 00:07:12.850
我们会对每个区域进行单独处理 

94
00:07:12.850 --> 00:07:18.003
也许通过这个方法 当图像中有很大的灰度变化时 正如这个特殊图像 

95
00:07:18.003 --> 00:07:22.383
我们也可以提高图像中每个区域的对比度 

96
00:07:22.383 --> 00:07:25.474
这就是处理结果 

97
00:07:25.474 --> 00:07:28.180
比如说 注意这个区域 

98
00:07:28.180 --> 00:07:32.870
这里确实难以看到细节 

99
00:07:32.870 --> 00:07:38.100
这里也没有改善很多 但是这里看起来好多了 

100
00:07:38.100 --> 00:07:42.400
现在看这个区域 这里看不到很多细节 

101
00:07:42.400 --> 00:07:47.900
全局直方图均衡化确实有效 但这个区域没有多少改善 

102
00:07:47.900 --> 00:07:52.414
全局直方图均衡或者全局直方图匹配是一种折中方案 

103
00:07:52.414 --> 00:07:55.292
它们对图像的整体进行调节 

104
00:07:55.292 --> 00:08:00.002
我们可以通过局部操作 尝试克服 至少是部分克服这种折中处理的不足 

105
00:08:00.002 --> 00:08:03.666
现在我们可以看到 这里有明显的细节 

106
00:08:03.666 --> 00:08:08.180
这个区域也有明显细节 所以在图像的不同区域   

107
00:08:08.180 --> 00:08:13.283
它们有不同的像素值 我们仍然可以进行直方图拉伸 

108
00:08:13.283 --> 00:08:18.190
在不同的区域都得到更好的对比度 

109
00:08:18.190 --> 00:08:24.184
至此 我们结束了本单元对直方图均衡 

110
00:08:24.184 --> 00:08:28.551
和直方图匹配的学习 这是非常简单而有效的操作 

111
00:08:28.551 --> 00:08:31.216
下次视频见 谢谢
// 果壳教育无边界字幕组 | leafsherry | 风过成伤 | zeadoit