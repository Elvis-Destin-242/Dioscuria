大家好 欢迎回到我们的图像与视频处理课程上来 在前一个视频里 我们演示了一个实时的直方图均衡化例子 我们见识了它是如何提高图像质量 并成功地将一个非均衡直方图 转换成均衡直方图的 现在让我们深入地探索这是如何实现的 当我讲解过它背后的数学原理后 大家就会发现它其实如此简单 如果大家愿意的话 应该马上就可以在自己的电脑上将其编写出来 让我们深入这个问题 首先 我们再讲讲直方图 这里是一张很暗的图像 这里是它的直方图 我们可以看到 像素值多是分布在直方图低值端 比较亮的值并不多 在这个直方图上我们可以看到 这些区域的像素数量非常非常少 这里我们看到的是相反的情况 这是一张非常亮的图像 在这个直方图上 大量像素集中在高值端 所以这里较低的像素值并不多 这里 是一张灰蒙蒙的对比度很低的图像 我们可以看到它的像素 实际上集中在中间 这是一张看起来 好很多的图像 它们都是同一张图像 这一张看起来 清楚很多 其对应的分布是比较均匀的 用到了全部范围的像素值 几乎是均匀的 这样这张图像看起来就清楚了许多 所以我们想要学习 如何将一个这样的分布转换成这样的分布 如前所述 这是一个非常非常简单的操作 我们等一下就能弄懂它 我们的目标是从一个给定的分布 转换到一个均匀的分布 假设像素的值是从 0到L-1 例如标准的 L是256 那么像素值 是从0 也就是黑色 到255 也就是非常亮或者白色 我们希望得到一个均匀的分布 所以它的概率 如果我们没有对数量归一化 但是方便起见 我们仅仅考虑归一化的情形 这个概率是 1/(L-1) 这就是一个像素达到这个灰度值的概率 我们希望从这里到这里 这就是我们的目标 为了达成这个目标 我们需要 找到一个以原图的像素值作为输入的变换 使它们转换成另一个图像的像素值 所以有了一张图像之后 对于图像中的每一个像素 我要得到像素的值 之后变换成一个新的值 放在同样的地方 提醒大家一下 目前为止 我们只根据这一点的像素值来作出决定 跟它周围的像素点无关 只根据它自己的值 如果这个值是7 我们需要确定 7要转换成什么值 而不受周围像素值影响 所以 我们需要一个变换 将任何像素值变换到一个新的像素值 从而得到一个均匀分布 对于这样的一个变换有一个要求 我们将要做出 一个递增的变换 这样做的原因是我们不想反转像素值 我们希望它是一个 单调递增的变换 如果7对应的是10 8对应的就应该至少是10 也可能大于10 但是我们不希望它小于10 否则我们就反转了图像的内容 这样并非是直方图均衡化的目的 所以我们需要 一个递增的函数 我们的目标就是要找到这样的函数 有时我们可以得到严格单调递增的函数 每一个(不同的)像素值 都对应一个不同的像素值 有时我们会得到单调递增函数 其中一些像素值有可能对应相同的像素值 大家会发现 我们主要用这种直方图均衡方法 尤其是当我们处理这样的离散图像和离散的像素值时 我们会采用这种形式的变换 而不是这种形式的变换 这是计算机做离散型数据的直方图均衡化过程中存在的一个问题 有时候我们无法避免这种情况 我们接下来就会看到 那么我们如何来达成这个目标呢？ 基本思想其实很简单 我们可以把直方图看作 一个分布s 所以这里我们需要一点点 概率论的基础 但是如果你没有这方面的基础 也别担心 这部分内容基本上是很浅显易懂的 我接下来要讲解的是 那么我们有一个分布 直方图就是一个分布 那么给定像素值的概率是多少？ 我们现在想要得到一个新的分布 我们其实已经有了当前的分布 所以我们有了一个新的不同的分布 提醒大家一下 我们要找的是一个从 r到s 的映射 我们要找的是这个变换 其实概率中有一个基本的结论 如果这个映射存在 那么这两个分布之间的 关系就是这样 这就是它们之间的关系 所以这个新的概率分布就是原概率分布乘以 这个导数的绝对值 这是一个概率分布中的著名结论 大家只要知道这个就可以理解之后的推导了 所以我们先假设一下  我将要证明 这个变换就是我们要找的 我们先假设这个就是我们要的变换 那么 s是一个变换 对于任意的一个像素值 我们会得到一个新的像素值 让我们把它写作 L-1 乘以 现在的直方图 或者说现在的概率分布 从0到r的积分 也就是 P(w)dw 我等一下就会解释我现在写的是什么意思 那么我在这里做了什么呢？ 我对这一块 也就是达到特定灰度值的像素数量 从0到r积分 接下来我要做这一步 因为我在使用概率函数 所以我把它们归一化在0到1之间 之后再变回灰度值 让我们再看一次这个变换 我们先数一下 如果我们是在一个离散空间中 我们就会数一下 如果我们想要知道 当 r=7时 应该变换到哪一个像素值 我们就要数 有多少像素值为0 有多少像素值为1 有多少为2 有多少为3 这样一直到7 就会得到 这个变换 我现在来向大家证明这就是 要做直方图均衡化的正确变换 让我们来做这个 为了证明它 我们要计算 这个导数 它的基本思想很简单 我们实际上要算的是ds/dr 现在这里我们有了一个明确的变换 那我们就可以计算这个导数 这其实就是dT(r)/dr 我们还有这个式子 所以就可以写成 这个式子对 r 求导数 也就是 (L-1) 乘以 从0到r 对 Pr(w)dw 求积分 非常抱歉 这几行 这几行都写到一起了 不过我觉得这还是非常清楚的 现在我们需要计算这个导数 如果你还记得一些微积分的基础知识 这是一个常数 所以将它提出来 然后 这个积分的导数就是积分里面的部分 所以它等于 L-1 乘以 我要把剩下的 写在下一行 Pr(r) 现在我们得到了 s对r 的导数 即 L-1 乘以概率函数 也就是原来的直方图 接下来我们要做的是 我等一下会把这个擦掉 我们需要把这里的这些代回去 然后看看会怎样 那么我们就把这部分代入 然后看看能得到什么 这里是 dr/ds 但是这里是 ds/dr 所以我们需要取它的倒数 这应该是 1除以这个 我希望大家已经能看出来这里会得到什么 那么我们来看看事实上 能得到什么 现在我们有 P 我们要找的新的概率函数是这个原来的概率函数 乘以 dr/ds的绝对值 我们之前已经算出了 dr/ds 那这里是Pr(r) 1/(L-1) 的绝对值 这是我们用来做 归一化的 Pr(r) 概率都是正值 这个也是正的 因为 L大于1 所以肯定是正的 所以我可以将绝对值符号去掉 然后我们就可以看到 它可以和这个约分 这样就能得到1/(L-1) 也正是我们想要得到的结果 我们想要新的图像有一个均匀的常数概率分布 我将实际的变换 再写一次 实际的变换 s 是一个 r的映射 就是 L-1 (乘以) 从0到r的积分 对 原来概率分布函数或者直方图 求积分 这是一个很简单的函数 我们一直不断地数有多少个像素 是某个特定的值 直到数到r 这就是我们的变换 非常非常简单的操作 在几乎所有的编程语言中 这基本上就是一行代码 这代码就能为我们做 直方图均衡 接下来让我们看一个实例 首先 我们有这样一组人工样本 其中有 8个不同的值 这部分是数量 我们有790个像素的值是0 1023个像素的值是 1 其余类似 我们把这个变换成一个概率值 因为我们之前一直在用概率 这就是我们会得到的概率 我们把这些代入到我刚刚展示过的那个式子里 就会得到这个 首先 这是原来的直方图 Pr 这是现在我们有的分布 如果我们把这个代入到刚刚的那个式子里 就会得到 这个变换 注意 它是一个单调函数 因为我们是在积分 所以肯定是单调的 我把它再写一遍 基本操作是 从0到r积分 积分得越多 由于这里这些都是正数 所以很明显这是一个递增函数 这只是加上了越来越多的正数 所以肯定是正的 所以这是一个增函数 它说明的是 0 对应这个数 1对应这个数 其它同理 所以这是一个很简单的映射 这样就得到了一个新的直方图 大家可能会有疑问 它看起来是更均匀了 但是出现了这样一个情况 由于我们在处理离散的数据 我们是在处理计算机中的图像 我们必须要 对数字取整 所以例如 4.2 将会变成 4 所以我们最终得到的峰值会比这里的少 因为这里的这些数最终会合并为一个相同的整数 为了处理离散图像 我们必须 付出这样的代价 我们不能表示 6.7 或 6.8 它们都会变成 虽然公式上表明它们应该是不同的数字 它们都将变成 比如 7 以类似的方式 我要问大家一个问题 我希望大家能思考一下 再回答我 让我们来看看以下这个直方图 它只有两个不同的像素值 这两个 它们的具体数字并不重要 但是这就是像素值的原始分布 这张图像中只有两种值 它是一张只有两种不同颜色 两种不同像素值的二值图像 我要问的问题是 这个像素值和这个像素值 映射后的结果之间是什么关系 让我们把这个叫做 a 把这个叫做 b 我要问的是 T(a) 和 T(b) 之间的关系 它们相等吗？ 它们不相等吗？ T(a) 比 T(b) 大吗？ T(a) 比 T(b) 小吗？ 仔细想一想然后回答这个问题 我们一会回来 讲解正确答案的解释 我们来看看哪一个是正确答案 大家回想一下 我们在直方图均衡中做的是积分 现在我的问题是 这两者的关系是 相等 小于 还是大于 首先我们知道 T(b)应该大于或者等于T(a) 因为这是一个单调递增函数 但是我们来进一步看一下 到底会有怎样的结果 这里实际上是 要对直到这里的值做积分 所以实际上它积分的只是这一部分 从这里要积分的是 到 b 之前的所有部分 但是 a和b 之间没有其它新的值 因为这之间没有新的值 所以就会得到 T(a)=T(b) 作为一个附加的练习 大家还可以想想 实际上 这个的变换是什么 这个的变换又是什么 这其实是和图像的平均值有关的 可以在课余做一下这个练习 但是这是一个很好的例子 来说明 我们在寻找的这个变换 即便是在我们需要的取整或者量化之前 因为我们是在 处理离散图像 即便在那之前 也不是严格单调的 也有可能存在多个数值最终会对应到 同一个变换后的值上 我们当然可以说 我们其实 并不太关心这一点 因为在原始图像中并没有 初始灰度值为 a 的像素 那是对的 但是我举这个例子 是想说明两点 一点是要说明变换并不一定要 是单调 严格单调递增的 它必须是单调递增的 但不一定是严格的 还有一点 要再次强调 直方图均衡所做的 就是数出不大于你想要映射的像素值的像素个数 所以我们要数出 不大于a 的像素的个数 和不大于 b 的像素个数 在这个练习之后 我们来看看几个其它的例子 我们已经在线上展示中看过一些例子了 但是我们还是再来 多看一个例子 我觉得这个例子很有用 我们回到最初开始的那些图像 这一张比较暗 这是经过直方图均衡化处理后的效果 这个直方图看起来比之前好了许多 让我们来看看它的映射 这就是它的映射 这里的像素值会被映射到这里 这边是r 这边是s 来看看这个映射 这个映射非常地 它的斜率非常非常大 因为它需要很快地把一些很暗的像素映射到更亮的像素上去 所以它有着非常非常陡的斜率 让我们来看看例如这一张图像 这一张本身就很清楚 它并没有改变很多 这是它对应的映射 它的斜率几乎就是1 对应着对角线 它的像素值基本上没有什么改变 其它两个映射可以用类似的方法理解 这一张图片实际上需要将像素变暗 我们可以看到 在其对应的映射上 看到发生了什么 这一张则需要拉伸像素 大家回想一下 它们实际上集中在中间 我们需要把它们拉伸开 我们可以在这里观察到这一点 它把这些像素 从中间拉伸开了 它们开始的时候集中在这里 然后我们将它们拉伸开 我们现在可以看到实际上它把这这个值域占满了 从这个原本直方图中占据的非常窄的范围 从由此产生的对比度很低的效果 现在实际上映射到了 从0到255的整个范围 我们在映射中也可以看到这一点 当然我们得到了一些非常相似的图像 不管它们原来是怎么样 事实上我们是从同一张原始图像中 得到这些图像的 这一张图像 仅仅改变了它的对比度 我们对它们均衡化之后 它们看起来就很接近了 这种技术常常被应用于 使不同条件下得到的图像 看起来更加相似 我们对直方图均衡化 同时 我们让这些图像 看起来更相似 之后我们就可以更方便地比较它们 那么 这就是直方图均衡 我们接下来在下一个视频里 要讲解的是直方图变换 如果我不希望对直方图均衡化 那要怎么办？ 我想要把一个直方图 转换成为我所知的可以改善图像的直方图 我们将会在下一个很短的视频里看到这个 这也是一个很简单的操作 谢谢大家
// 果壳教育无边界字幕组 | ctzsm | 冰之冷  | 小白_远游