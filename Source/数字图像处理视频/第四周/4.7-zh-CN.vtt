WEBVTT

1
00:00:00.000 --> 00:00:03.918
大家好，欢迎回来。我们接下来讲 

2
00:00:03.918 --> 00:00:08.704
维纳滤波 所以我们必须记住我们在这儿看到的 

3
00:00:08.704 --> 00:00:15.006
基础退化模型   我们又遇到了它 不过  像以前一样  一个大体上 

4
00:00:15.006 --> 00:00:19.470
运动模糊的滤波会导致焦点模糊 

5
00:00:19.470 --> 00:00:23.057
产生了噪点  我们就是要研究噪点   

6
00:00:23.057 --> 00:00:27.493
接下来我们观察噪点  我们试图从我们的观察中重建图像。 

7
00:00:27.493 --> 00:00:30.690
在这  我们要设计一个名为 

8
00:00:30.690 --> 00:00:35.061
维纳滤波的滤波。
在特定情况下  维纳滤波会帮助我们得到 

9
00:00:35.061 --> 00:00:38.583
非常非常好的修复   

10
00:00:38.583 --> 00:00:43.606
维纳滤波的基本思想是  我们尽可能使 

11
00:00:43.606 --> 00:00:47.260
重建信号和原信号之间的均方根最小   

12
00:00:47.260 --> 00:00:50.079
所以我要写出方差   

13
00:00:50.079 --> 00:00:57.700
它基本上是原信号和重建信号 

14
00:00:57.700 --> 00:01:05.672
之间的平方误差期望值 过去我们已经多次讲过这种类型的误差 

15
00:01:05.672 --> 00:01:10.877
我们要把它平方一下 就是这样了 

16
00:01:10.877 --> 00:01:14.345
从而它变成了平方误差的期望值 

17
00:01:14.345 --> 00:01:18.318
到这你或许会想 我不知道原始西格玛值   

18
00:01:18.318 --> 00:01:23.388
修复的关键就是在于在不知道原信号的情况下得到 

19
00:01:23.388 --> 00:01:27.958
它的近似值   

20
00:01:27.958 --> 00:01:32.818
但是我们已经有了期望值
所以我们没必要知道原始信号   

21
00:01:32.818 --> 00:01:36.444
我们只需要知道原始信号的一些 

22
00:01:36.444 --> 00:01:42.392
统计值特征 
现在不难看出要用在这儿的滤波   

23
00:01:42.392 --> 00:01:48.049
将会使它最小化 我们将得到下面的式子 

24
00:01:48.049 --> 00:01:54.420
重构信号的傅立叶变换 

25
00:01:54.420 --> 00:02:00.800
我先写下来再解释下我写的东西 

26
00:02:00.800 --> 00:02:04.611
（它的傅里叶变换等于）滤波的共轭 

27
00:02:04.611 --> 00:02:10.245
也就是用之前视频中讲到的方法得到的 

28
00:02:10.245 --> 00:02:16.791
滤波的傅里叶变换的复共轭 

29
00:02:16.791 --> 00:02:22.896
除以所估计的滤波的大小 

30
00:02:22.896 --> 00:02:29.860
所以这是退化滤波 还有能量谱  不用担心 

31
00:02:29.860 --> 00:02:37.094
如果你记不清或者忘记了它是什么意思 稍后我会再次提示   

32
00:02:37.094 --> 00:02:43.786
噪声的能谱  除以这个信号的能谱 

33
00:02:43.786 --> 00:02:49.140
所有的这些乘以观测值 

34
00:02:49.140 --> 00:02:58.475
所以 这个是维纳滤波 它乘以我们观测值 

35
00:02:58.475 --> 00:03:04.502
得要重建的滤波 当然 我们要倒过来 

36
00:03:04.502 --> 00:03:09.137
逆傅里叶变换得到基本的 得到估计   

37
00:03:09.137 --> 00:03:14.855
然后又一次 这是在做什么呢   这是在使均方差最小   

38
00:03:14.855 --> 00:03:19.722
我必须向你解释或者说提醒  这些概念是什么    

39
00:03:19.722 --> 00:03:23.932
但在这之前  如果你想知道我如何 

40
00:03:23.932 --> 00:03:29.204
从最小均方差到这个表达式   这实际上不难   

41
00:03:29.204 --> 00:03:33.382
比如  你可以在这个维基页面中找到 

42
00:03:33.382 --> 00:03:37.304
这真的不难 你基本只要照着所说的写 

43
00:03:37.304 --> 00:03:42.511
均方差、期望的定义   并且我们知道在我们 

44
00:03:42.511 --> 00:03:46.625
在求函数最小值的时求导 

45
00:03:46.625 --> 00:03:51.382
我很快就会讲到这个 所以就让我再次解释下这个 

46
00:03:51.382 --> 00:03:55.702
公式 在这儿又遇到了 

47
00:03:55.702 --> 00:04:01.956
退化滤波的傅里叶变换的共轭复数 这大致上是 

48
00:04:01.956 --> 00:04:08.652
没有什么比大小平方  并且正像我说的这是能量谱， 

49
00:04:08.652 --> 00:04:15.612
所以   噪点和原始信号的能量谱或者 

50
00:04:15.612 --> 00:04:19.929
信号类   能谱大致上是 

51
00:04:19.929 --> 00:04:24.783
傅里叶变换和相关函数的量度    

52
00:04:24.783 --> 00:04:28.006
所以有了F 
F有相关函数   

53
00:04:28.006 --> 00:04:33.412
你对他做傅里叶变换  你计算它的大小 

54
00:04:33.412 --> 00:04:38.050
得到的结果就是这个信号的能量谱   对噪点来说也是一样的。 

55
00:04:38.050 --> 00:04:42.688
对噪点采样  计算出它的相关度  对 

56
00:04:42.688 --> 00:04:46.280
它做完全变换 
算出等级 就是 

57
00:04:46.280 --> 00:04:51.571
能量谱  所以你不必知道函数 你需要知道噪点 

58
00:04:51.571 --> 00:04:56.275
确切的函数或者确切的噪点  你需要知道它的一些 

59
00:04:56.275 --> 00:05:00.653
统计学特征 所以这是理想的维纳滤波 当然 

60
00:05:00.653 --> 00:05:06.004
为了你真正实现它  你需要知道了解这点。 

61
00:05:06.004 --> 00:05:12.221
所以  大多数情况下有非常简便的窍门来计算  而不采用估计的方法。 

62
00:05:12.221 --> 00:05:17.500
这基本上会被替换 我想用个不同的颜色 

63
00:05:17.500 --> 00:05:21.909
这些 所有的这些表达   都很难去 

64
00:05:21.909 --> 00:05:27.294
估算 除非你知道你信号的很多统计学特征   

65
00:05:27.294 --> 00:05:31.440
这基本上是被一个常数替代   

66
00:05:31.440 --> 00:05:37.929
很惊讶吧   一个非常复杂的东西被一个常数 

67
00:05:37.929 --> 00:05:42.537
替代  所以 我再也不用它了 基本上我 

68
00:05:42.537 --> 00:05:50.222
去用常数代替 接下来 我只需要估计一个数。 

69
00:05:50.222 --> 00:05:53.585
当然假设 我已经 

70
00:05:53.585 --> 00:05:58.568
估计了退化 基本上 像高斯或者产生 

71
00:05:58.568 --> 00:06:03.763
运动模糊的滤波那样会产生降解的运算 

72
00:06:03.763 --> 00:06:08.034
所以非常简单的运算 
仅有一个未知数的简单滤波 

73
00:06:08.034 --> 00:06:11.593
可以通过很多种方式估计   

74
00:06:11.593 --> 00:06:14.297
但是我们现在不准备讨论这个   

75
00:06:14.297 --> 00:06:20.276
它基本上与我们要估计高斯方差 

76
00:06:20.276 --> 00:06:24.120
或是图像运动模糊程度的方法相似 

77
00:06:24.120 --> 00:06:28.966
它看上去和逆滤波非常相似 

78
00:06:28.966 --> 00:06:35.429
记住 在逆滤波中 我们要做的是拿到退化图像 

79
00:06:35.429 --> 00:06:40.276
也就是观测值 除以H的傅里叶变换 

80
00:06:40.276 --> 00:06:44.234
基本上是我们这里看到的这样的H 

81
00:06:44.234 --> 00:06:48.515
这儿有些小小不同 相似但是有差别。 

82
00:06:48.515 --> 00:06:55.580
这些细微的差别是至关重要的 我们将会在下面的例子中看到。 

83
00:06:55.580 --> 00:07:00.002
让我们看看这些图片
我们以前看过这些图片 

84
00:07:00.002 --> 00:07:05.161
这是原始图片  这大概是对图像进行湍流处理 

85
00:07:05.161 --> 00:07:08.511
后的结果  正如我们之前了解和讨论过的一样   

86
00:07:08.511 --> 00:07:11.460
这个模型通常情况下使用高斯滤波 

87
00:07:11.460 --> 00:07:17.738
这是反滤波后的结果  所以我们基本上采用高斯滤波 

88
00:07:17.738 --> 00:07:23.785
我们对它进行傅里叶变换 用这张图 也就是它的傅里叶变换 

89
00:07:23.785 --> 00:07:29.676
除以高斯方法处理过的傅里叶变换 

90
00:07:29.676 --> 00:07:34.250
再进行重建 没有别的事了 拿过这张图 

91
00:07:34.250 --> 00:07:43.340
对它进行傅里叶变换 除以高斯方法的傅里叶变换 

92
00:07:43.340 --> 00:07:46.631
然后对结果进行逆傅里叶变换 

93
00:07:46.631 --> 00:07:50.581
是的 我会说 确实是一个坏结果
我们都知道为什么 

94
00:07:50.581 --> 00:07:56.141
我们在除的时候  虽然高斯不会等于零  但它的值会变得非常小 

95
00:07:56.141 --> 00:07:59.433
这大概上提高很多 

96
00:07:59.433 --> 00:08:03.310
使我们的重建非常非常不稳定 

97
00:08:03.310 --> 00:08:08.124
另一方面说 这是维纳滤波的结果 

98
00:08:08.124 --> 00:08:14.101
我认为这是一个突出的成果 所以它大致上是我们在 

99
00:08:14.101 --> 00:08:20.492
以前的幻灯片上看到的  在这里成为了高斯滤波器 

100
00:08:20.492 --> 00:08:29.900
滤波等于共轭除以H^2加常数 

101
00:08:29.900 --> 00:08:33.241
这是我们在这张图片上使用的滤波 

102
00:08:33.241 --> 00:08:36.946
我们在高斯滤波上不使用1    或者1/H 

103
00:08:36.946 --> 00:08:41.668
我们用这个滤波得到了很好地结果 

104
00:08:41.668 --> 00:08:46.971
这儿的结果基本是通过不断试错得到的 

105
00:08:46.971 --> 00:08:52.201
我们尝试了最初知道的可能最好的K值 

106
00:08:52.201 --> 00:08:58.158
为了更好地有逻辑的原因  基本上是为了向你展示如果我们 

107
00:08:58.158 --> 00:09:01.500
估计了常数值 能用维纳滤波能得多好的结果 

108
00:09:01.500 --> 00:09:06.895
为了让你看到这不是唯一能退化的例子 

109
00:09:06.895 --> 00:09:11.880
让我们再讲一个以前看过的图像 

110
00:09:11.880 --> 00:09:15.832
有一张图像  它是我们用的这本书的封面 

111
00:09:15.832 --> 00:09:19.990
只不过是黑白的 

112
00:09:19.990 --> 00:09:23.473
它有运动 
我们已经看到了 所以它有 

113
00:09:23.473 --> 00:09:26.260
运动模糊 
接下来我们添加噪点 

114
00:09:26.260 --> 00:09:30.501
接下来进行处理 我们准确地知道运动模糊 所以我们 

115
00:09:30.501 --> 00:09:36.217
计算滤波的准确值  进行反滤波 这就是我们得到的结果 

116
00:09:36.217 --> 00:09:41.718
所以 又一次 从这到那是 

117
00:09:41.718 --> 00:09:47.719
把这个图像用逆滤波-1/H进行处理后的结果
我没有包括可能会发生的问题   

118
00:09:47.719 --> 00:09:53.363
因为我需要估计时间 事实上我把创建这个图像的具体时间 

119
00:09:53.363 --> 00:09:59.149
写下 ，结果由于同样的原因结果很糟糕 

120
00:09:59.149 --> 00:10:03.520
正如在之前的例子里看到的 

121
00:10:03.520 --> 00:10:07.680
这是维纳滤波的结果 可以吗？ 

122
00:10:07.680 --> 00:10:13.594
再来一次 这是我们这里的用的 

123
00:10:13.594 --> 00:10:19.972
我们用教学中能用的最好的常数 

124
00:10:19.972 --> 00:10:23.595
来评估内部滤波器的功率 

125
00:10:23.595 --> 00:10:26.626
现在 
你可能看到污点和 

126
00:10:26.626 --> 00:10:30.806
噪点
在这儿事实上我们取了一份 

127
00:10:30.806 --> 00:10:35.055
更小数量级的噪点
同样的模糊 同样的运动模糊 我们再次 

128
00:10:35.055 --> 00:10:38.469
应用逆滤波维纳 

129
00:10:38.469 --> 00:10:43.833
同样非常非常不好
基本上我们在这里恢复的 

130
00:10:43.833 --> 00:10:47.455
是运动
其他的我们都不能恢复 

131
00:10:47.455 --> 00:10:50.660
但是维纳滤波效果非常好 

132
00:10:50.660 --> 00:10:55.648
如果我们进一步降低噪点
降五个数量级 

133
00:10:55.648 --> 00:11:00.637
就什么噪点也看不到了
如果两者一比较 

134
00:11:00.637 --> 00:11:05.903
基本上是 噪点非常小 以至于优势降解是 

135
00:11:05.903 --> 00:11:09.383
运动模糊
这就是逆滤波 

136
00:11:09.383 --> 00:11:13.069
现在好多了 但是仍不是非常好 

137
00:11:13.069 --> 00:11:17.076
再次 这只不过是一个逆滤波器 

138
00:11:17.076 --> 00:11:21.083
但是被应用到模糊和噪点的图像上 

139
00:11:21.083 --> 00:11:27.333
这是维纳滤波的结果 这一列是逆滤波的结果 

140
00:11:27.333 --> 00:11:34.064
这一列是维纳滤波 这里是不同程度的噪点 

141
00:11:34.064 --> 00:11:40.567
我认为我们得到了完美的结果
为什么说完美 因为正如我在例子中说的一样   

142
00:11:40.567 --> 00:11:46.984
在这种人工设计出教学示例中我们不必 

143
00:11:46.984 --> 00:11:53.311
估计H  我们知道H 我们估计出最合适的K 

144
00:11:53.311 --> 00:12:00.128
但这说明这个滤波非常强大 

145
00:12:00.128 --> 00:12:05.801
只要我们估计出退化滤波或是运动模糊 以及常数 

146
00:12:05.801 --> 00:12:09.639
而滤波逆滤波 很抱歉 

147
00:12:09.639 --> 00:12:14.728
我们即使知道准确的H值 它也不太好使 

148
00:12:14.728 --> 00:12:21.736
所以我想让你了解维纳滤波是一个非常简单的函数 

149
00:12:21.736 --> 00:12:27.671
它可以非常非常强大 所以这里我们结束了维纳滤波部分 

150
00:12:27.671 --> 00:12:32.554
在接下来的视频中我们将要基本上结束修复单元 

151
00:12:32.554 --> 00:12:34.755
非常感谢