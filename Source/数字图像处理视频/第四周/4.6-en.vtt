WEBVTT

1
00:00:00.000 --> 00:00:04.250
Hello and welcome back to our Image and 
Video Processing class. 

2
00:00:04.250 --> 00:00:09.310
We are going to continue with image 
restoration, and so far we have dealt a 

3
00:00:09.310 --> 00:00:13.156
lot with the noise. 
So let us now work with the filtering 

4
00:00:13.156 --> 00:00:16.260
component. 
So let us remember that this is the 

5
00:00:16.260 --> 00:00:20.038
complete model of degradation that we are 
talking about. 

6
00:00:20.038 --> 00:00:25.570
We are talking about filtering the image 
and then adding noise. And so far we have 

7
00:00:25.570 --> 00:00:29.214
considered that there was no filtering, 
but just noise. 

8
00:00:29.214 --> 00:00:32.722
In general, 
what we have here as we have seen before 

9
00:00:32.722 --> 00:00:37.750
is g(x,y). 
The observed image is equal to f(x,y) 

10
00:00:39.480 --> 00:00:49.476
convolution with h(x,y) plus the noise, 
which, as we discussed before, is a 

11
00:00:49.476 --> 00:00:52.840
random violate that we add noise to the 
image. 

12
00:00:52.840 --> 00:00:56.189
And we have seen how to try to estimate 
the noise. 

13
00:00:56.189 --> 00:01:00.877
Now let us discuss how to try to estimate 
this blurring function. 

14
00:01:00.877 --> 00:01:04.093
In general it's called a blurring 
function, this h. 

15
00:01:04.093 --> 00:01:07.174
This is much harder than estimating the 
noise. 

16
00:01:07.174 --> 00:01:10.456
But before we discuss that why is this 
important. 

17
00:01:10.456 --> 00:01:15.680
Let me just illustrate it as a very, very 
simple formula why this is important. 

18
00:01:15.680 --> 00:01:20.168
And for that lets assume for a second 
that we don't have any noise. 

19
00:01:20.168 --> 00:01:24.924
So basically there is no noise. 
We're going take the Fourier Transforms 

20
00:01:24.924 --> 00:01:34.550
of this and the Fourier is g of u, v 
equal f of u, v times. 

21
00:01:34.550 --> 00:01:39.101
H of UV. 
So for those that are familiar with , 

22
00:01:39.101 --> 00:01:44.352
this is very clear. 
For those that are not, just bare with me 

23
00:01:44.352 --> 00:01:48.538
for a moment. 
In Fourier, the convolution becomes a 

24
00:01:48.538 --> 00:01:52.056
product. 
So basically we have transformed our 

25
00:01:52.056 --> 00:01:57.451
image into a different domain where the 
convolution became a product. 

26
00:01:57.451 --> 00:02:03.549
And now look what we have, we want to 
estimate the original image so we divide, 

27
00:02:03.549 --> 00:02:11.760
so we say okay, very good. 
F u, v is equal to the observation, 

28
00:02:11.760 --> 00:02:18.060
basically the degrade, the degraded image 
divided by the filter. 

29
00:02:19.880 --> 00:02:23.255
So if we manage to estimate the filter, 
all very easy. 

30
00:02:23.255 --> 00:02:27.903
We take the observed image, we do our 
Fourier transform, we do our Fourier 

31
00:02:27.903 --> 00:02:31.788
transform of the estimated filter. 
We divide one by the other. 

32
00:02:31.788 --> 00:02:36.755
We got the original image, actually it's 
Fourier transform, we invert it, we get 

33
00:02:36.755 --> 00:02:40.257
the image back. 
This is what's called inverse filtering. 

34
00:02:40.257 --> 00:02:44.970
Has some fundamental problems, in 
particular because there is no guarantee, 

35
00:02:44.970 --> 00:02:48.472
that this H, U, V is always different 
than zero. 

36
00:02:48.472 --> 00:02:55.061
Actually for realistic scenario's, it has 
either some zeros, or is very close to 

37
00:02:55.061 --> 00:03:01.113
zero for some values of U or V, but the 
general idea is very, very good that we 

38
00:03:01.113 --> 00:03:07.237
basically if we have knowledge about this 
degradation function, then we can try to 

39
00:03:07.237 --> 00:03:09.552
invert it. 
And that's very cool. 

40
00:03:09.552 --> 00:03:12.987
I mean it's that, we want to try to 
estimate it. 

41
00:03:12.987 --> 00:03:18.663
As I say estimating it very, very hard, 
much harder than estimating the noise. 

42
00:03:18.663 --> 00:03:24.264
So let's see some examples where we can 
actually estimate it and also some 

43
00:03:24.264 --> 00:03:28.820
examples of what type of h functions do 
we have in reality. 

44
00:03:29.940 --> 00:03:35.910
For example, one thing that happens is, 
as I mentioned earlier this week, is 

45
00:03:35.910 --> 00:03:41.153
what's called blurring. 
Blurring means that I basically observe 

46
00:03:41.153 --> 00:03:46.740
an image that is the result of my 
original image. 

47
00:03:47.760 --> 00:03:53.787
Convolve, let's say, with the Gaussian 
function with zero mean uncertain 

48
00:03:53.787 --> 00:03:59.545
variance, or standard deviation. 
And we already saw the general function 

49
00:03:59.545 --> 00:04:03.438
of a Gaussian. 
Basically, this exponential with a 

50
00:04:03.438 --> 00:04:09.197
quadratic exponential function. 
We saw it when we were discussing noise. 

51
00:04:09.197 --> 00:04:14.793
Basically, it blurs my image. 
Now if you know that there is a Gaussian 

52
00:04:14.793 --> 00:04:18.361
function that is affecting your 
observation. 

53
00:04:18.361 --> 00:04:22.498
So this would be my observation. 
This would be my G. 

54
00:04:22.498 --> 00:04:27.556
If you know that G is the result of F. 
With a Gaussian filter. 

55
00:04:27.556 --> 00:04:31.682
And you also know that the F was actually 
a dot. 

56
00:04:31.682 --> 00:04:36.151
A delta function. 
Just a point, that in that case for 

57
00:04:36.151 --> 00:04:41.996
example, that very trivial case, you can 
actually estimate the blurring. 

58
00:04:41.996 --> 00:04:48.699
Actually, not very hard because a simple 
property of the convolution says that 

59
00:04:48.699 --> 00:04:56.080
basically if F is the delta function that 
is convolved, with G. 

60
00:04:56.080 --> 00:05:02.000
Then we get G, so basically this is 
actually the Gaussian. So a very simple 

61
00:05:02.000 --> 00:05:08.030
case that we can actually estimate our H 
function for the particular case, 

62
00:05:08.030 --> 00:05:12.050
that we have a Gaussian filtering. 
Now, 

63
00:05:12.050 --> 00:05:14.511
this might sound a bit ridiculous, as 
first. 

64
00:05:14.511 --> 00:05:18.862
I say, how do I know that there was a 
dot, that it was a delta function in my 

65
00:05:18.862 --> 00:05:21.324
image? 
But actually it is not so ridiculous, 

66
00:05:21.324 --> 00:05:23.957
because we can use this to calibrate a 
system. 

67
00:05:23.957 --> 00:05:29.199
If we know that our camera is blurring. 
Then I can put artificially an image that 

68
00:05:29.199 --> 00:05:32.997
has a delta function and then I estimate 
my blurring. 

69
00:05:32.997 --> 00:05:38.658
So this is very useful to, to calibration 
to do estimation of how the camera is 

70
00:05:38.658 --> 00:05:40.377
behaving. 
Very important. 

71
00:05:40.377 --> 00:05:45.967
Now I'm going to tell you something else 
that will further enhance the knowledge 

72
00:05:45.967 --> 00:05:49.120
and the concept why this is a hard 
function. 

73
00:05:49.120 --> 00:05:53.594
A hard function to estimate. 
If convolution G is equal to G 

74
00:05:53.594 --> 00:05:57.462
convolution F. 
So you might wonder is F my original 

75
00:05:57.462 --> 00:06:00.420
image? 
So was my original image a delta? 

76
00:06:00.420 --> 00:06:05.046
Am I blaring a Gaussian? 
Or was my original image a Gauissian? 

77
00:06:05.046 --> 00:06:08.383
Am I blaring a delta, which means no 
blaring. 

78
00:06:08.383 --> 00:06:14.450
So there is a lot of basic ambiguity here 
that we don't' know which one is what, 

79
00:06:14.450 --> 00:06:20.669
and that is yet another challenge that we 
have when we are trying to estimate the 

80
00:06:20.669 --> 00:06:24.705
filtering function. 
And normally what you do is you assume 

81
00:06:24.705 --> 00:06:28.033
models for the image and models for the 
filtering. 

82
00:06:28.033 --> 00:06:31.760
But this is just to illustrate how hard 
this problem is. 

83
00:06:31.760 --> 00:06:34.689
So this is an example where we can 
estimate. 

84
00:06:34.689 --> 00:06:38.483
Gaussian actually as I say is very 
important for blaring. 

85
00:06:38.483 --> 00:06:42.609
It's also a model that is very frequently 
used for turbulence. 

86
00:06:42.609 --> 00:06:46.070
So here is an image which is courtesy of, 
of, of NASA, 

87
00:06:46.070 --> 00:06:49.531
and it appears in the book that we are 
using so far. 

88
00:06:49.531 --> 00:06:54.790
And here we have basically the same image 
under different levels of turbulence, 

89
00:06:54.790 --> 00:07:00.418
from more turbulence to less turbulence. 
So at least you can observe here the 

90
00:07:00.418 --> 00:07:06.047
blurring effect and very often turbulence 
is modelled with a Gaussian filter. 

91
00:07:06.047 --> 00:07:10.652
So it's very, very important, we 
discussed that Gaussian noise 

92
00:07:10.652 --> 00:07:16.134
distributions are very important 
mathematically although they don't appear 

93
00:07:16.134 --> 00:07:19.423
really, in real physical scenarios very 
often. 

94
00:07:19.423 --> 00:07:24.760
Gaussian smoothing, Gaussian filtering 
actually is a very realistic model. 

95
00:07:24.760 --> 00:07:29.140
For a lot of things that are happening in 
physical cameras. 

96
00:07:29.140 --> 00:07:33.785
The other type of blurring that appears a 
lot is what's called motion blurring. 

97
00:07:33.785 --> 00:07:38.643
And the basic idea of motion blurring is 
that when you're taking a picture if the 

98
00:07:38.643 --> 00:07:42.677
object is moving. 
Pictures are taken by integrating the 

99
00:07:42.677 --> 00:07:47.958
light that comes into the sensor. 
So if the object is moving during your 

100
00:07:47.958 --> 00:07:51.773
integration time, basically you get a 
blurry picture. 

101
00:07:51.773 --> 00:07:56.247
And that's illustrated here before I 
write down the formulas. 

102
00:07:56.247 --> 00:08:01.308
So in this case, it's basically a 
simulation of instead of moving the 

103
00:08:01.308 --> 00:08:06.149
object, we move the camera. 
And the basic idea is, going back to our 

104
00:08:06.149 --> 00:08:14.832
GF functions, basically your G function 
that we are observing is actually the 

105
00:08:14.832 --> 00:08:21.231
integral from zero to T. 
That's a time of integration of your 

106
00:08:21.231 --> 00:08:28.550
camera, of your image at X. 
But the point X is moving, so I can call 

107
00:08:28.550 --> 00:08:33.080
that function of motion, let's say X of 
T, 

108
00:08:33.080 --> 00:08:41.308
to write down that basically it's moving, 
and it's also moving in the Y direction, 

109
00:08:41.308 --> 00:08:45.760
Y of T. 
And I'm integrating over T. 

110
00:08:45.760 --> 00:08:48.652
Okay? 
So basically, what I'm doing here is I'm 

111
00:08:48.652 --> 00:08:52.637
not taking one image. 
It's like I've taken multiple images and 

112
00:08:52.637 --> 00:08:55.529
I'm adding them, 
and what I see is the result. 

113
00:08:55.529 --> 00:08:59.000
This actually was simulated by taking 
this image here, 

114
00:08:59.000 --> 00:09:04.291
shifting it, let's say, to the right, 
just by a tiny bit. Shifting it again, 

115
00:09:04.291 --> 00:09:10.703
shifting it again, and then adding that. 
That's what this operation is doing, is 

116
00:09:10.703 --> 00:09:14.156
basically adding images on its own 
shifts. 

117
00:09:14.156 --> 00:09:20.240
And, this is how we're observation. 
Now, if we take, if we do the math and we 

118
00:09:20.240 --> 00:09:26.652
take the Fourier transform in both sides, 
and we use properties of the Fourier 

119
00:09:26.652 --> 00:09:30.762
transform. 
Then we can also write this in the form 

120
00:09:30.762 --> 00:09:33.640
that we have seen before, 
G equal H, 

121
00:09:33.640 --> 00:09:37.169
F. 
So, also this translation is actually a 

122
00:09:37.169 --> 00:09:41.948
filter, and I am not going to do that but 
you're more than welcome to do that as an 

123
00:09:41.948 --> 00:09:46.249
exercise, a very simple exercise, 
if you are familiar with basic concepts 

124
00:09:46.249 --> 00:09:51.028
in Fourier transform, you basically just 
as I say, take the Fourier in both sides, 

125
00:09:51.028 --> 00:09:55.627
and use properties of, of translation. 
And you get this filter, which of course 

126
00:09:55.627 --> 00:09:59.759
will depend on the velocities. 
Okay, so you could imagine that if the 

127
00:09:59.759 --> 00:10:02.776
object is not moving at all, there is no 
blurring. 

128
00:10:02.776 --> 00:10:06.347
If the object is moving a lot, there is 
much more blurring. 

129
00:10:06.347 --> 00:10:09.180
So, this filter will depend on these 
velocities. 

130
00:10:09.180 --> 00:10:15.517
And once again the question will be, just 
to show how hard it is, how do I estimate 

131
00:10:15.517 --> 00:10:19.260
from this? 
Both my image and my blurring effects. 

132
00:10:19.260 --> 00:10:24.889
Certainly not a trivial thing to do. 
Even if I knew that the result is a 

133
00:10:24.889 --> 00:10:29.893
result of motion blurring. 
The, the concept is that, from the sum of 

134
00:10:29.893 --> 00:10:33.098
multiple images, you have to estimate 
one. 

135
00:10:33.098 --> 00:10:36.147
Okay? 
So that's certainly not a trivial 

136
00:10:36.147 --> 00:10:39.978
concept. 
If I give you the number five, and I tell 

137
00:10:39.978 --> 00:10:45.298
you it's the sum of two numbers, 
there is no way for you to know which two 

138
00:10:45.298 --> 00:10:49.075
numbers I added unless I give you more 
information about that. 

139
00:10:49.075 --> 00:10:54.070
We're going to discuss this more when we 
talk in a few weeks more advanced topics 

140
00:10:54.070 --> 00:10:57.725
in image restoration. 
When we come back to this topic you'll 

141
00:10:57.725 --> 00:11:01.198
see different tools like sparsmalling and 
to expect that. 

142
00:11:01.198 --> 00:11:05.584
This is to illustrate that is a hard 
problem, and an extremely important 

143
00:11:05.584 --> 00:11:08.325
problem. 
Simple models like Gaussian de-blurring 

144
00:11:08.325 --> 00:11:13.320
or motion, or, Gaussian blurring, sorry. 
The blurring is the operation of, of 

145
00:11:13.320 --> 00:11:16.802
inverting, 
and motion blur are very, very important. 

146
00:11:16.802 --> 00:11:22.619
And we need to be able to invert them to 
go back to our original very, very sharp 

147
00:11:22.619 --> 00:11:25.007
image. 
What we're going to do next, is 

148
00:11:25.007 --> 00:11:28.363
basically, we're going to see one way of 
doing that, 

149
00:11:28.363 --> 00:11:33.886
and that's called Wiener filtering. 
There's one way of inverting a filter and 

150
00:11:33.886 --> 00:11:37.592
inverting noise, 
and we're going to see that in the next 

151
00:11:37.592 --> 00:11:38.920
video. 
See you soon. 

152
00:11:38.920 --> 00:11:39.620
Thank you. 