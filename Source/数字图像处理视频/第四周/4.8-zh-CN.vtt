WEBVTT

1
00:00:00.000 --> 00:00:04.066
大家好 欢迎回到我们的课程
我们将再次利用MATLAB 

2
00:00:04.066 --> 00:00:08.169
来演示维纳滤波器 (wiener filter) 的例子
和之前一样 我们先载入一幅图像 

3
00:00:08.169 --> 00:00:11.515
这个图像我们以前看到过 

4
00:00:11.515 --> 00:00:15.113
这个土星 (Saturn) 的图像 它是个彩色图像 

5
00:00:15.113 --> 00:00:20.163
所以我们要将它转换成黑白图像
这个操作之前也用到过 

6
00:00:20.163 --> 00:00:23.320
然后我们给图像加上高斯噪声 (Gaussian noise) 

7
00:00:23.320 --> 00:00:28.433
这个步骤在这里 之前演示不同类型的噪声时 我们也用到了这个命令 

8
00:00:28.433 --> 00:00:33.294
这个参数是噪声的方差
现在 我们要用到维纳滤波器了 

9
00:00:33.294 --> 00:00:38.574
在MATLAB中 这个命令能够调用维纳滤波器 

10
00:00:38.574 --> 00:00:42.014
我们将用它来处理这个叠加了高斯噪声的图像 

11
00:00:42.014 --> 00:00:47.747
在展示维纳滤波器的处理结果之前
我想把它和另外一个滤波器做比较 

12
00:00:47.747 --> 00:00:51.689
事实上 我想把它和均值滤波器做比较 

13
00:00:51.689 --> 00:00:55.630
我将用半径为10的圆形区域 

14
00:00:55.630 --> 00:01:00.216
对噪声图像进行滤波 

15
00:01:00.216 --> 00:01:04.516
这个命令用到了 

16
00:01:04.516 --> 00:01:07.390
半径为10的圆形区域来计算局部均值 

17
00:01:07.390 --> 00:01:11.779
别担心这个参数
这只是告诉MATLAB 

18
00:01:11.779 --> 00:01:16.959
在边界条件下如何进行处理
所以 我们将会看到 

19
00:01:16.959 --> 00:01:21.923
原始图像 噪声图像 

20
00:01:21.923 --> 00:01:27.031
均值滤波器处理后的模糊图像
还有维纳滤波器处理后的图像 

21
00:01:27.031 --> 00:01:29.550
那么 我们来看看这些结果 

22
00:01:29.550 --> 00:01:35.628
我们将载入所有图像
这将有助于看到 

23
00:01:35.628 --> 00:01:41.395
维纳滤波器是多么有效
我们又看到了先前的原始图像 

24
00:01:41.395 --> 00:01:44.980
这个是叠加了噪声的图像 

25
00:01:44.980 --> 00:01:52.136
这个是维纳滤波器的处理结果
这个是均值滤波器的处理结果 

26
00:01:52.136 --> 00:01:57.248
可以看到维纳滤波器修复后的结果 

27
00:01:57.248 --> 00:02:01.998
相当得不错
它利用这个噪声图像 

28
00:02:01.998 --> 00:02:07.439
很好地还原了原始图像
而且它比均值滤波器做得更好 

29
00:02:07.439 --> 00:02:12.102
我把两幅图像放近些 这样我们就能够 

30
00:02:12.102 --> 00:02:16.844
看到两者的差异
这幅图像明显 

31
00:02:16.844 --> 00:02:21.585
比用均值滤波器得到的结果更加清晰 

32
00:02:21.585 --> 00:02:27.885
所以 当我们向维纳滤波器提供一些信息时 它的处理结果会很好 

33
00:02:27.885 --> 00:02:33.030
在这种情况下 维纳滤波器会评估它得到的信息 

34
00:02:33.030 --> 00:02:36.754
我们在前一个视频的最后看到过这个实现方式 

35
00:02:36.754 --> 00:02:42.276
它是实现维纳滤波器最简单的方式 

36
00:02:42.276 --> 00:02:47.798
但是仍然能够利用噪声图像 很好地修复出原始图像 

37
00:02:47.798 --> 00:02:51.180
我们再看一下这些图像 

38
00:02:51.180 --> 00:02:57.117
这是原始图像 这是噪声图像
当然 维纳滤波器并不知道这个原始图像 

39
00:02:57.117 --> 00:03:02.018
它利用噪声图像修复出相当清晰的图像 

40
00:03:02.018 --> 00:03:06.850
而不是模糊的图像
所以它修复得相当棒 

41
00:03:06.850 --> 00:03:13.210
我们可以看到 这比用均值滤波器产生的模糊图像好很多 

42
00:03:13.210 --> 00:03:17.747
这样我们就结束了对维纳滤波器的演示 

43
00:03:17.747 --> 00:03:19.340
非常感谢