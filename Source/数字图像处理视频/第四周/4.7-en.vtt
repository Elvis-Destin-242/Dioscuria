WEBVTT

1
00:00:00.000 --> 00:00:03.918
Hello, and welcome back. 
We're going to be talking now about 

2
00:00:03.918 --> 00:00:08.704
Wiener Filter. 
So we have to remember our basic 

3
00:00:08.704 --> 00:00:15.006
degradation model that we see here. 
We have again, a filter basically 

4
00:00:15.006 --> 00:00:19.470
blurring motion blur the focus as we have 
thought. 

5
00:00:19.470 --> 00:00:23.057
And we have the noise and we discuss a 
lot about noise. 

6
00:00:23.057 --> 00:00:27.493
And then we observe this and we want to 
reconstruct an image from our 

7
00:00:27.493 --> 00:00:30.690
observation. 
And we're going to design a filter here 

8
00:00:30.690 --> 00:00:35.061
called Wiener Flitering. 
That basically is going to help us to get 

9
00:00:35.061 --> 00:00:38.583
a very, very good restoration under 
certain conditions. 

10
00:00:38.583 --> 00:00:43.606
The basic idea of Wiener Filtering is 
that we want to minimize the mean square 

11
00:00:43.606 --> 00:00:47.260
root between the reconstruction and the 
original signal. 

12
00:00:47.260 --> 00:00:50.079
So I'm going to write the mean square 
over. 

13
00:00:50.079 --> 00:00:57.700
It's basically the expectation of the 
square of the error between the original 

14
00:00:57.700 --> 00:01:05.672
signal and the reconstructed signal. 
And we have talk a lot about this type of 

15
00:01:05.672 --> 00:01:10.877
error in the past. 
We have to square it and here it is so 

16
00:01:10.877 --> 00:01:14.345
it's the expectation of the square of the 
error. 

17
00:01:14.345 --> 00:01:18.318
Now you may wonder but I don't know the 
original sigma. 

18
00:01:18.318 --> 00:01:23.388
That's the whole point of doing 
restoration it's just getting back to 

19
00:01:23.388 --> 00:01:27.958
something which is like the original 
signal without knowing it. 

20
00:01:27.958 --> 00:01:32.818
But we have an expectation here. 
So don't need to know the original 

21
00:01:32.818 --> 00:01:36.444
signal. 
We just need to know some statistical 

22
00:01:36.444 --> 00:01:42.392
characterization of the original signal. 
Now it's not hard to show that the filter 

23
00:01:42.392 --> 00:01:48.049
to put here that will minimize this. 
We'll get the following form so basically 

24
00:01:48.049 --> 00:01:54.420
the Fourier. 
Transform of the reconstruction of the 

25
00:01:54.420 --> 00:02:00.800
reconstructed signal will be, and I am 
going to write it down and explain what I 

26
00:02:00.800 --> 00:02:04.611
am writing. 
It's the conjugate of the filter, a 

27
00:02:04.611 --> 00:02:10.245
complex conjugate of the Fourier 
transform of the filter that we have 

28
00:02:10.245 --> 00:02:16.791
estimated as we have described in the 
previous videos, divided by basically the 

29
00:02:16.791 --> 00:02:22.896
magnitude of this filter that we have 
estimated. 

30
00:02:22.896 --> 00:02:29.860
So this is the degradation filter, plus 
the power spectrum, and don't worry, if 

31
00:02:29.860 --> 00:02:37.094
you don't know exactly what that means or 
if you forgot I'm going to remind you in 

32
00:02:37.094 --> 00:02:43.786
a second. The power spectrum of the 
noise, divided by the power spectrum, of 

33
00:02:43.786 --> 00:02:49.140
the signal, and all these multiplying our 
observation. 

34
00:02:49.140 --> 00:02:58.475
So, this is the Wiener Filter. 
It's a filter that is multiplying our 

35
00:02:58.475 --> 00:03:04.502
observation to obtain the reconstruction 
and of course, we have to invert this, 

36
00:03:04.502 --> 00:03:09.137
the inverse Fourier to get the basic, the 
estimation. 

37
00:03:09.137 --> 00:03:14.855
So once again, what is this doing? 
This is minimizing the mean square error. 

38
00:03:14.855 --> 00:03:19.722
I have to explain to you or remind you, 
what are these concepts? 

39
00:03:19.722 --> 00:03:23.932
But before that, 
if you want to know how do I get from 

40
00:03:23.932 --> 00:03:29.204
wanting to minimize the mean square error 
to this expression is actually not hard. 

41
00:03:29.204 --> 00:03:33.382
You can find a folderization for example 
in this Wikipedia page. 

42
00:03:33.382 --> 00:03:37.304
It's truly not hard. 
You just write almost they say you write 

43
00:03:37.304 --> 00:03:42.511
the definition of the mean square error, 
the expectation, and we know that we need 

44
00:03:42.511 --> 00:03:46.625
to take derivatives when we are trying to 
minimize the function. 

45
00:03:46.625 --> 00:03:51.382
I knew very fast I'm going to go to this. 
So let's just explain again this 

46
00:03:51.382 --> 00:03:55.702
expression. 
Here is once again the complex conjugate 

47
00:03:55.702 --> 00:04:01.956
of your Fourier response of the 
degradation filter. Here is basically the 

48
00:04:01.956 --> 00:04:08.652
magnitude square nothing has than that 
and here as I said this is the power 

49
00:04:08.652 --> 00:04:15.612
spectrum so, of the noise and the power 
spectrum of your original signal or the 

50
00:04:15.612 --> 00:04:19.929
signal class. 
The power spectrum is basically the 

51
00:04:19.929 --> 00:04:24.783
magnitude of the fourier transform, of 
the correlation function. 

52
00:04:24.783 --> 00:04:28.006
So you have F. 
F has a correlation function. 

53
00:04:28.006 --> 00:04:33.412
You take the Fourier transform of that. 
And you compute the magnitude of that, 

54
00:04:33.412 --> 00:04:38.050
and that's the power spectrum of the 
signal, and the same for the noise. 

55
00:04:38.050 --> 00:04:42.688
You take the noise, you compute a 
correlation of the noise, you take the 

56
00:04:42.688 --> 00:04:46.280
fully transformed. 
You compute the magnitude, that's the 

57
00:04:46.280 --> 00:04:51.571
power spectrum so you don't need to know 
the function, you need to know the noise, 

58
00:04:51.571 --> 00:04:56.275
the exact function or the exact noise. 
You need to know some statistical 

59
00:04:56.275 --> 00:05:00.653
characterization of that. 
So this is the ideal Wiener Filter and of 

60
00:05:00.653 --> 00:05:06.004
course you need to know this in order to 
be able to actually implement it. 

61
00:05:06.004 --> 00:05:12.221
So most of the time there's a very simple 
trick that is done instead of estimating 

62
00:05:12.221 --> 00:05:17.500
this. This is basically replaced and I'm 
just going to use a different color. 

63
00:05:17.500 --> 00:05:21.909
This, 
all this expression, which is difficult 

64
00:05:21.909 --> 00:05:27.294
to estimate unless you know a lot of 
statistical characterizations of your 

65
00:05:27.294 --> 00:05:31.440
signal. 
This is basically replaced by a constant. 

66
00:05:31.440 --> 00:05:37.929
Pretty surprising, isn't it? 
A very complicated thing is replaced by a 

67
00:05:37.929 --> 00:05:42.537
constant. 
So, I don't use this anymore, I basically 

68
00:05:42.537 --> 00:05:50.222
go and replace this by a constant. 
And then, all I have to estimate is one 

69
00:05:50.222 --> 00:05:53.585
number. 
Assuming of course that I have already 

70
00:05:53.585 --> 00:05:58.568
estimated the, degradation. 
The basic, the operation that produced a 

71
00:05:58.568 --> 00:06:03.763
degradation like a Gaussian or like, the 
filter that produces motion blur. 

72
00:06:03.763 --> 00:06:08.034
So very simple operation. 
A very simple filter, with only one 

73
00:06:08.034 --> 00:06:11.593
unknown, that can be estimated in a 
number of ways. 

74
00:06:11.593 --> 00:06:14.297
But we are not going to discuss that, 
now. 

75
00:06:14.297 --> 00:06:20.276
It's basically similar to the way of that 
we needed to estimate the variance of the 

76
00:06:20.276 --> 00:06:24.120
Gaussian or how much motion blur there is 
in an image. 

77
00:06:24.120 --> 00:06:28.966
It looks very similar, to the basic to 
the inverse filter. 

78
00:06:28.966 --> 00:06:35.429
Remember in the inverse filter, all that 
we need is we actually took the degraded 

79
00:06:35.429 --> 00:06:40.276
image, meaning the observation and we 
divided by basically the Fourier 

80
00:06:40.276 --> 00:06:44.234
transform of H, 
basically this H that we see here. 

81
00:06:44.234 --> 00:06:48.515
And here is slightly different, 
similar but different. 

82
00:06:48.515 --> 00:06:55.580
And that slight difference is critical as 
we're going to see in the next examples. 

83
00:06:55.580 --> 00:07:00.002
So let's just look at these images. 
We have seen this image before. 

84
00:07:00.002 --> 00:07:05.161
This is the original image, and this is 
basically the result of turbulence on 

85
00:07:05.161 --> 00:07:08.511
that image. 
And as we know and we discussed before, 

86
00:07:08.511 --> 00:07:11.460
this model basically with a Gaussian 
filter. 

87
00:07:11.460 --> 00:07:17.738
This is the result of inverse filtering, 
so we basically take the gaussian filter, 

88
00:07:17.738 --> 00:07:23.785
we take the fourier transform and we 
divide this image, basically it's fourier 

89
00:07:23.785 --> 00:07:29.676
transform, we divide it by the fourier 
transform of the Gaussian and then we 

90
00:07:29.676 --> 00:07:34.250
reconstruct. So this is nothing else 
done, taking this image, 

91
00:07:34.250 --> 00:07:43.340
taking its Fourier and dividing it, but 
by the Fourier Transform of a Gaussian. 

92
00:07:43.340 --> 00:07:46.631
And then inverting the Fourier of the 
result. 

93
00:07:46.631 --> 00:07:50.581
And is, I would say, quite a bad result 
and we know why. 

94
00:07:50.581 --> 00:07:56.141
We're dividing, although the Gaussian 
memory goes to zero, it gets very small 

95
00:07:56.141 --> 00:07:59.433
values. 
And that basically is enhancing a lot, 

96
00:07:59.433 --> 00:08:03.310
and is making our reconstruction very, 
very nonstable. 

97
00:08:03.310 --> 00:08:08.124
On the other hand, this is the result of 
the Wiener filtering. 

98
00:08:08.124 --> 00:08:14.101
I think its outstanding result so its 
basically what we just saw in the 

99
00:08:14.101 --> 00:08:20.492
previous slide we basically the filter is 
to have been one over the Gaussian as 

100
00:08:20.492 --> 00:08:29.900
here, the filter basically is the 
conjugate over H^2 plus the constant. 

101
00:08:29.900 --> 00:08:33.241
That's the filter that we apply to this 
image. 

102
00:08:33.241 --> 00:08:36.946
We don't apply 1 over the Gaussian, or 1 
/ H. 

103
00:08:36.946 --> 00:08:41.668
We apply this filter and we get that 
significantly better result. 

104
00:08:41.668 --> 00:08:46.971
And the result here is illustrated with 
basically almost trial and error. 

105
00:08:46.971 --> 00:08:52.201
We basically try the best possible K 
knowing the original, it's just for 

106
00:08:52.201 --> 00:08:58.158
better logical reasons basically to show 
you how great we can get the result with 

107
00:08:58.158 --> 00:09:01.500
Wiener filtering if we estimate this 
constant. 

108
00:09:01.500 --> 00:09:06.895
So to show you that this is not, just not 
all one example that it can degrade, 

109
00:09:06.895 --> 00:09:11.880
let's just show a second example of an 
image that we have seen before. 

110
00:09:11.880 --> 00:09:15.832
Here we have an image. 
It's based in the book, it's the cover of 

111
00:09:15.832 --> 00:09:19.990
the book that we have been using but just 
in black and white. 

112
00:09:19.990 --> 00:09:23.473
It has motion. 
We have seen that already, so it has 

113
00:09:23.473 --> 00:09:26.260
motion blur. 
And then we add to it noise. 

114
00:09:26.260 --> 00:09:30.501
And then we apply, 
we know exactly a motion blur so we 

115
00:09:30.501 --> 00:09:36.217
computed exactly the filter and we apply 
inverse filter and this is what we get. 

116
00:09:36.217 --> 00:09:41.718
So once again going from here to here is 
the result of taking this image and 

117
00:09:41.718 --> 00:09:47.719
filtering with an inverse filter, 1 / H. 
And I'm not including the problems that 

118
00:09:47.719 --> 00:09:53.363
might happen because I need to estimate 
age, I'm actually putting the exact age 

119
00:09:53.363 --> 00:09:59.149
that I used to create this image and the 
result is close to a disaster basically 

120
00:09:59.149 --> 00:10:03.520
for the same reasons. 
As we saw in the previous example. 

121
00:10:03.520 --> 00:10:07.680
This is the result of Wiener filtering, 
okay? 

122
00:10:07.680 --> 00:10:13.594
Once again, 
this is what we are applying here and 

123
00:10:13.594 --> 00:10:19.972
again we use the best constant that we 
could use against for Pedagogic reasons 

124
00:10:19.972 --> 00:10:23.595
to just rate the power of the inner 
filtering. 

125
00:10:23.595 --> 00:10:26.626
Now, 
you probably see here the blur and you 

126
00:10:26.626 --> 00:10:30.806
might see also the noise. 
Here we actually take one order of 

127
00:10:30.806 --> 00:10:35.055
magnitude less noise. 
Same blur same motion blur and again we 

128
00:10:35.055 --> 00:10:38.469
apply the inverse filter and we apply the 
Weiner. 

129
00:10:38.469 --> 00:10:43.833
And again this is really, really bad. 
Basically what we are recovering here is 

130
00:10:43.833 --> 00:10:47.455
the motion. 
We are not able to recover anything else 

131
00:10:47.455 --> 00:10:50.660
but Weiner filtering is doing outstanding 
job. 

132
00:10:50.660 --> 00:10:55.648
If we reduce the noise even further, 
actually five orders of magnitude. I 

133
00:10:55.648 --> 00:11:00.637
don't think you can see any noise. 
If you compare this to this, basically 

134
00:11:00.637 --> 00:11:05.903
there is, the noise is so small, that 
basically the dominant degradation here 

135
00:11:05.903 --> 00:11:09.383
is the motion blur. 
This is the inverse filter. 

136
00:11:09.383 --> 00:11:13.069
Now, it's much better, but it's still not 
great. 

137
00:11:13.069 --> 00:11:17.076
Again, this is nothing else than an 
inverse filter. 

138
00:11:17.076 --> 00:11:21.083
but applied, to the, to the blur and 
noisy image. 

139
00:11:21.083 --> 00:11:27.333
And this is the result of Wiener filter. 
So this column is always inverse. 

140
00:11:27.333 --> 00:11:34.064
This column is always Wiener filtering. 
And just different levels of noise here. 

141
00:11:34.064 --> 00:11:40.567
I think we've got the perfect result. 
Why it's perfect because as I say in this 

142
00:11:40.567 --> 00:11:46.984
exampl, in this kind of artificial 
Pedagogic example we didn't have to 

143
00:11:46.984 --> 00:11:53.311
estimate H, we know exactly H and also we 
estimated the best possible K. 

144
00:11:53.311 --> 00:12:00.128
But this illustrates how this filter is 
extremely powerful once we estimate the 

145
00:12:00.128 --> 00:12:05.801
degradation filter or the motion blur in 
this case, and the constant. 

146
00:12:05.801 --> 00:12:09.639
And still, filter inverse filter. 
Sorry, 

147
00:12:09.639 --> 00:12:14.728
here even if we know exactly H, it just 
doesn't do a good job. 

148
00:12:14.728 --> 00:12:21.736
So I hope I convinced you that Wiener 
filtering is a very simple operation, and 

149
00:12:21.736 --> 00:12:27.671
it can be extremely, extremely powerful. 
So by this we conclude Wiener filtering 

150
00:12:27.671 --> 00:12:32.554
and in the next video we are going to 
just basically conclude the unit on 

151
00:12:32.554 --> 00:12:34.755
restoration. 
Thank you very much. 