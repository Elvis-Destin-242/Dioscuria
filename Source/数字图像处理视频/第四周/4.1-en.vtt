WEBVTT

1
00:00:00.000 --> 00:00:03.975
Hello and welcome to Week 4 of our Image 
and Video Processing class. 

2
00:00:03.975 --> 00:00:08.584
For the last few weeks, we have been very 
busy learning a lot of new concepts in 

3
00:00:08.584 --> 00:00:12.597
image and video processing. 
This week, the materials are going to be 

4
00:00:12.597 --> 00:00:15.918
a bit short. 
I think we all deserve a shorter week 

5
00:00:15.918 --> 00:00:18.707
about after learning so much new 
material. 

6
00:00:18.707 --> 00:00:23.622
But also, the main reason this week is 
going to be a bit short in material is 

7
00:00:23.622 --> 00:00:28.803
because we're going to come back to some 
important examples of image restoration 

8
00:00:28.803 --> 00:00:34.050
later when we talk about more advanced 
topics in the class of image processing. 

9
00:00:34.050 --> 00:00:37.593
But we still need to learn the basics of 
image restoration. 

10
00:00:37.593 --> 00:00:40.770
And we need to understand what is image 
restoration. 

11
00:00:40.770 --> 00:00:45.046
So, let's just go straight into that. 
But before that, just for a second, 

12
00:00:45.046 --> 00:00:48.406
what background do you need for the topic 
of this week? 

13
00:00:48.406 --> 00:00:52.438
If you have knowledge about signal 
processing, and Fourier analysis, 

14
00:00:52.438 --> 00:00:56.531
there are some parts of the week that you 
might benefit a bit more. 

15
00:00:56.531 --> 00:00:59.220
But since it happened in the previous 
weeks, 

16
00:00:59.220 --> 00:01:03.782
the material is going to be very 
self-contained so you should be able to 

17
00:01:03.782 --> 00:01:07.628
understand the basic concepts with very 
limited background, 

18
00:01:07.628 --> 00:01:10.627
just some background in Linear Algebra 
mostly. 

19
00:01:10.627 --> 00:01:14.798
but again, Fourier analysis will be very 
helpful if you know it. 

20
00:01:14.798 --> 00:01:19.687
In particular, for the topic of Weiner 
filtering that we are going to explain 

21
00:01:19.687 --> 00:01:22.751
in, in a few hours or actually in a few 
minutes. 

22
00:01:22.751 --> 00:01:25.880
So, let's just explain, what is image 
restoration? 

23
00:01:27.000 --> 00:01:33.430
So, in image restoration in contrast with 
image enhancement, we are going to try to 

24
00:01:33.430 --> 00:01:37.663
restore the image. 
We are going to have a model for the 

25
00:01:37.663 --> 00:01:43.084
degradation and that's what we see here. 
This is a degradation model. 

26
00:01:43.084 --> 00:01:47.731
Basically, we start with an image. 
The image goes through some degradation 

27
00:01:47.731 --> 00:01:52.697
which is represented by this filter H. 
Examples of degradation, and we're going 

28
00:01:52.697 --> 00:01:56.644
to discuss them in detail later on are, 
for example, blurring, 

29
00:01:56.644 --> 00:02:00.973
defocus. When we take a picture that's 
out of focus, that's basically a 

30
00:02:00.973 --> 00:02:04.283
degradation. 
Another example is what's called motion 

31
00:02:04.283 --> 00:02:07.148
blur. 
When we take pictures of something that 

32
00:02:07.148 --> 00:02:12.240
goes very fast, we actually see that as 
kind of blurry in our picture and that's 

33
00:02:12.240 --> 00:02:16.992
basically another type of degradation. 
After the image has gone through 

34
00:02:16.992 --> 00:02:22.999
degradation, there is noise added to it. 
For example, the sensors in cameras have 

35
00:02:22.999 --> 00:02:26.603
noise, the sensors in magnetic resonance 
have noise. 

36
00:02:26.603 --> 00:02:31.480
So, there is noise added to it and this 
is what we actually observe, g. 

37
00:02:31.480 --> 00:02:38.626
Now, from g, we need to go back to f as 
close as possible as the original f, and 

38
00:02:38.626 --> 00:02:43.482
that's why this is called restoration. 
We're going to try to invert this 

39
00:02:43.482 --> 00:02:48.691
degradation and noise, in order to be 
able to produce an image which is as 

40
00:02:48.691 --> 00:02:54.321
close as possible as the original image. 
So, this restored image, we want it to be 

41
00:02:54.321 --> 00:02:59.253
as close as possible to the original 
image. That's a goal of restoration. 

42
00:02:59.253 --> 00:03:04.128
We didn't have that task in image 
enhancement, we just wanted it to look 

43
00:03:04.128 --> 00:03:09.071
better, to look sharper, to benefit, 
let's say, our visual perception of the 

44
00:03:09.071 --> 00:03:12.186
image. 
The goal now is to actually restore the 

45
00:03:12.186 --> 00:03:16.994
image. It's kind of a different goal, 
they're related, but it's kind of a 

46
00:03:16.994 --> 00:03:20.577
different goal, 
okay? And some of the things that we saw 

47
00:03:20.577 --> 00:03:25.519
the previous week are actually very 
useful for image restoration as well, for 

48
00:03:25.519 --> 00:03:29.114
example, non-local means. 
You can show that under certain 

49
00:03:29.114 --> 00:03:34.633
conditions, restores the image. 
So, what's the model that we have here? 

50
00:03:34.633 --> 00:03:36.620
How was g produced? 
g, 

51
00:03:37.720 --> 00:03:43.390
basically is a result of f going through 
the degradation. 

52
00:03:43.390 --> 00:03:50.652
So, we have f (x,y) convolution with H 
(x,y). That's a degredation model and 

53
00:03:50.652 --> 00:03:55.725
normally, it's assumed that is a linear 
operation. 

54
00:03:55.725 --> 00:04:00.600
So, it's a convolution. 
And we add to it the noise. 

55
00:04:01.940 --> 00:04:07.735
And most of the image and video 
processing literature leads with what's 

56
00:04:07.735 --> 00:04:12.081
called additive noise. 
The noise is added to the image. 

57
00:04:12.081 --> 00:04:18.198
That's not what happens in all real 
cameras in all real acquisition devices, 

58
00:04:18.198 --> 00:04:22.142
for example. 
There is also multiplicative noise. 

59
00:04:22.142 --> 00:04:28.553
Very often, were basically all these, 
basically the degradation gets multiplied 

60
00:04:28.553 --> 00:04:32.285
by some noise. 
There are other types of noise that 

61
00:04:32.285 --> 00:04:36.017
happens, but these are some, two of the 
most common. 

62
00:04:36.017 --> 00:04:41.414
The most common of all is additive. 
Some literature, but much more limited, 

63
00:04:41.414 --> 00:04:46.397
addresses multiplicative noise. 
One of the effects of multiplicative 

64
00:04:46.397 --> 00:04:51.014
noise is that the amount of noise depends 
on the signal itself. 

65
00:04:51.014 --> 00:04:56.217
So, if the pixel value is three, we're 
multiplying three, but if the pixel value 

66
00:04:56.217 --> 00:05:02.227
is ten, we're multiplying ten, and then 
the amount of noise much, might be much 

67
00:05:02.227 --> 00:05:05.416
larger. 
And with additive noise, that doesn't 

68
00:05:05.416 --> 00:05:07.514
happen. 
So, it's basically kind of 

69
00:05:07.514 --> 00:05:12.124
image-independent denoise. 
Now, there is a way to transform 

70
00:05:12.124 --> 00:05:18.747
multiplicative noise into additive noise 
so we can enjoy all of the literature in 

71
00:05:18.747 --> 00:05:24.133
additive noise and also work kind of with 
a small trick applied also to 

72
00:05:24.133 --> 00:05:28.450
multiplicative noise. 
And I wonder if you know what trick can 

73
00:05:28.450 --> 00:05:32.413
we use to do that. 
Maybe think for a second before I give 

74
00:05:32.413 --> 00:05:35.668
you the answer. 
So, the question is very simple. 

75
00:05:35.668 --> 00:05:40.976
Think for yourself if you know what to do 
with multiplicative noise so you 

76
00:05:40.976 --> 00:05:45.576
transform it to additive noise. 
And let's think and I'll give you the 

77
00:05:45.576 --> 00:05:47.563
answer very soon, 
okay? 

78
00:05:47.563 --> 00:05:52.719
You just spend some time thinking. 
Maybe you go to the answer very fast. 

79
00:05:52.719 --> 00:05:58.819
Maybe you go to the answer after a while 
or maybe you are waiting for me to give 

80
00:05:58.819 --> 00:06:02.159
you the answer. 
And the idea is very simple. 

81
00:06:02.159 --> 00:06:06.444
If you have multiplicative noise instead 
of additive noise, 

82
00:06:06.444 --> 00:06:10.293
let me erase here, so I have everything 
to write down. 

83
00:06:10.293 --> 00:06:17.310
So, if you are multiplying two numbers, a 
times b, I can take the logarithmic of 

84
00:06:17.310 --> 00:06:21.826
those, of the product of those two 
numbers. 

85
00:06:21.826 --> 00:06:28.828
And that's equal to the logarithmic of a 
plus the log of b. So, I have trans, if b 

86
00:06:28.828 --> 00:06:33.151
was my noise, I basically transform it 
into additive noise. 

87
00:06:33.151 --> 00:06:38.592
So, instead of working with the image, 
I'm going to work with the logarithmic 

88
00:06:38.592 --> 00:06:44.108
version of the image and I'm going to 
work with the logarithmic component of 

89
00:06:44.108 --> 00:06:47.015
the noise. 
So basically, you give me the degradation 

90
00:06:47.015 --> 00:06:53.270
g, I take the log of g, 
and I treat everything that is now from 

91
00:06:53.270 --> 00:06:59.003
now on as it was additive noise. 
When I finish recovering it, I basically 

92
00:06:59.003 --> 00:07:04.550
have to invert this operation. 
And that's an exponential function. 

93
00:07:04.550 --> 00:07:09.328
So, that's one of the reasons that a lot 
of the literature has basically 

94
00:07:09.328 --> 00:07:12.845
concentrated on additive noise because of 
this trick. 

95
00:07:12.845 --> 00:07:18.021
Now, this trick has its own problems in 
particular because if you don't really 

96
00:07:18.021 --> 00:07:22.202
remove all the noise, the exponent can 
make it much, much larger. 

97
00:07:22.202 --> 00:07:26.715
But it's an important trick that 
basically makes our additive noise, 

98
00:07:26.715 --> 00:07:32.356
restoration techniques also applicable to 
multiplicative noise with some caveats 

99
00:07:32.356 --> 00:07:36.515
and some limitations. 
So, having now a concept of what is image 

100
00:07:36.515 --> 00:07:40.178
restoration, 
let's just talk in the next theory about 

101
00:07:40.178 --> 00:07:43.151
noise. 
What type of noise can we have in an 

102
00:07:43.151 --> 00:07:45.225
image? 
Where do they come from? 

103
00:07:45.225 --> 00:07:48.888
So, see you in the next video to deal 
with that topic. 

104
00:07:48.888 --> 00:07:49.580
Thank you. 