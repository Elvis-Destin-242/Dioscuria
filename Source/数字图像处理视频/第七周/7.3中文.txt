【未完成版本】欢迎回来 我们来看第一个图像修复的例子 这个例子基于我们上周学过的 偏微分方程 和上周一样 这周的知识也是独立的 我们将会学习用哪一种偏微分方程 当谈到图像修复时 我们是指 有一幅图像 这里有一个区域 我们想要改变图像上这个区域的内容 在这幅图中 这是条绳子 这部分有时会提供给我们 图像修复要求有两幅这样的图像作为系统的输入 我们不会做图像检测 因为这是非常主观的 我们每个人想要修改的内容依主观而不同 有人可能想修改鞋子 此时 我们就要修改鞋子 那么如何检测想要修改的部分？ 我们要用到图像分割 因此得分割出对象 也就是缺少信息的区域 我们称之为待修复的原始图 利用这里的两幅图像 我们想让绳子消失 将在这个区域进行修复 接下来要讨论的第一个主题是 如何利用该区域周围的丰富信息来修复图像 我们不会使用距离此区域很远地方的信息 仅仅使用周围区域图像的信息 因此我们得到两幅图像 一幅原始图像 另一幅是待修复区域的二值掩膜图像 当我和我的团队开始研究图像修复时 我们拜访了明尼阿波利斯美术馆的专业馆长 他同时也是一个专业的餐馆老板 我们向他咨询如何修复和复原图像 他们的方法十分独特 类似于儿童的绘画 下面我来演示一下 这里有待修复的区域以及图像 首先它们延展出区域边缘 因此如果在待修复区域里有一个边缘 然后就延展出内部的边缘 小孩正是用同样的方法来描画物体的轮廓 接着完成颜色的修复 因此 首先他们延展出边缘 然后把颜色扩散到区域内 最后 他们通常会加入某种噪声以模仿绘图效果 至此便完成了一个专业的画作修复 为了看起来没有瑕疵 必须加入这种颗粒噪声 使图像看上去更自然 接下来我们就要研究这些内容 首先讨论这两步 然后再简单讨论下这步 它涉及到了许多技术 大概就是这些内容 记住 首先是边缘的几何延拓 接着是颜色填充 就好比这儿是水 我们让它流进这个区域 但是由于边界的限制 实际上 右边的水会流入右边的区域 现在要做的就是 设计一个偏微分方程来仿真这个过程 就像这样 在这个区域外有图像 但内部是缺损信息的区域 我们要把外部的信息扩散到内部 实现方法就是利用这个方程 这是偏微分方程处理图像的第一个步骤 这个方程具体含义是什么呢？ L 代表我们需要要扩散的信息 我现在不告诉你信息指什么 就把它看成我们要扩散的东西 向量N表示信息扩散的方向 所以我们就沿N方向做扩散操作 现在来看看这儿发生了什么 这里得到L的梯度 它表示L的变化 和向量N做内积得到0 这儿是L的变化 因为内积作用 它被投影到N方向 也就是扩散方向 我们想要这个投影等于零 这儿当然是一个向量 这是信息的梯度 因此我们得到一个向量 同时让这个向量垂直于扩散方向 所以这是L的梯度 这是扩散的方向 我们要它们互相垂直 也就是说 我们要用这个方法来扩散信息并且不改变它 也就是信息在传播方向上没有改变 这就是信息传播的具体内容 让信息沿着一个方向保持不变地扩散 这就是这个方程所揭示给我们的 信息L在扩散方向上保持不变 在这些方向上都维持恒定 那么如何引入偏微分方程来求解呢？ 假设这个图像用 I 表示 现在已知这个方程 我们想要变形和修改这幅图像 这些操作在数学上就对应一个偏微分方程 经过某种方式最后等于零 在我们讨论欧拉-拉格朗日方程时 已经知道如何做到这一点 如果令某个量等于零 那我对图像做什么操作才能达到这个目的呢？ 我们先想想该怎么做 回忆一下上周 当时我们是如何做的？ 非常简单 让我们花一点时间回忆一下 首先 令图像在时间上的变化 等于我们想要的这个式子 当图像不再改变时 也就是达到稳态时 这个式子等于零 这就是稳态的定义——不再变化 实际上 在计算机里 当变化很小时就可认为不再变化 当它达到理想状态的零时 就得到了我们想要的 L在扩散方向上保持恒定 这是个非常简单的技巧 当你想得到 A = 0 的形式时 A可能是图像的某些信息 可令 ∂I/∂t = A 接着令它达到稳态 这就是我们对欧拉-拉格朗日方程的处理 这就是基本的图像修复方程 但现在并没有结束 接下来要告诉你L和N代表什么 我们想要扩散的信息是什么 以及往哪个方向上扩散 这里涉及到许多巧妙的技巧 我会讲一些例子 给你们一些概念 这些例子经证明是非常有效的 你也可以举其他的例子 现在首先来看信息L 我们要求扩散是平滑的 不希望待修复区域出现巨大的反差 如果有巨大的反差 我们就会注意到那个区域 所以我们要求平滑 所以任何能反映图像平滑性的量都可以表示L 图像的拉普拉斯变换就是表征平滑度的一个量 图像的二阶导反映了平滑度 为什么不是一阶导呢？ 过一会你就会明白了 【未完成翻译】因为一阶导数依旧反映了平滑度 现在的问题是 应该往哪个方向上扩散呢？ 我们回顾一下从专业复原人员那学到的东西 他们会延展出边缘 我们知道 如果有一个边缘 那么图像的梯度是和这个边缘垂直的 我们上周学过 因此我们想沿着边缘扩散信息 也就是沿着梯度的垂直方向扩散 所以N垂直于梯度 像这里写的这样 也可以这样写 N等于梯度 然后这里加个垂直符号 这个非常重要 我们要延展出边缘 然后为了求边缘 我们必须求梯度的垂直方向 这也解释为什么我们不能只求L的一阶导 因为如果令L等于图像的一阶导 也就是梯度 那么这两个量的内积永远等于零 就不需要解任何方程了 因为梯度和它的垂直量做内积总是零 而我想要在这个方向得到一个常数 求一阶导是不够的 还有其他原因 当然 这两个量一直垂直是不太好 依然记住我们需要得到L的梯度 其他原因是 我们想要区域里的两个量平滑 让区域内的灰度值保持平滑 同时 区域内的边缘也要求保持平滑 所以我们需要高阶导数来实现它 并不仅仅因为这两者互相垂直才不用一阶导 还因为缺少足够的信息 即使我们求得了L的梯度 梯度的方向与图像修复扩散的方向一致 所以我们还要更高的阶数以便得到更多的平滑信息 正如我所说 拉普拉斯变换是衡量平滑度的最简单的方法 我们便得到了 在等照度线方向或者梯度的垂直方向 或等高线方向的平滑度 这样我们就得到了方程 所以这个表示L的变化 而这个是法线 它垂直于梯度方向 最终得到什么呢 【未完成版本】 当达到稳态时 这个式子等于零 这样图像的拉普拉斯变换沿着边缘方向就是一个常数 我们沿着边缘扩散拉普拉斯变换 这就是基本方程所做的 再次地你只要在计算机中将它离散化 接着运行它 你就实现了图像修复 你从外部向内部扩散 每个微分方程都必须有边界条件 如果这是我的图像 而这是我要修复的区域 我需要在这里做什么呢？ 对于这种有点奇怪的方程 它的边界条件有三个导数 两个来自拉普拉斯变换 还有一个来自梯度 回忆一下 我们以前讨论过这个 拉普拉斯变换是图像在一个方向上的二阶导 加上图像在另一个方向上的二阶导 然后再对它求梯度 这样就得到了第三个导数 同时考虑了边界内的灰度值和边缘 它们都光滑向内扩散 这是因为拉普拉斯变换的作用 这些法线N就是我们所说的图像的等高线 或者等照度线方向 或者说是边缘的方向 这些方程非常简单 但是非常有趣 让我们看一些例子 当你做图像处理时 一般从非常简单的例子入手检验发生了什么 这儿就有一个简单的例子 白色的为待修复的区域 我们来修复它 可以看到这儿有非常光滑的延续 非常非常美妙
光滑的延续 边界 更重要的是 它补全了这个圆 它并不知道这里有个圆 它只是简单地在法线方向上延拓 垂直于法线方向的是边缘方向 记住梯度在这个方向 垂直于梯度方向的是这个方向 所以它就向待修复的区域延拓并且填充 在那个方向想扩散信息 非常棒的结果
当然 如果这个只能作用在人造图像上 就不是那么棒了
但愿它也能在真实的图像上工作 这里举一个例子 要修复的是什么呢？ 是写在图像之上的字母覆盖的区域
这是一张新奥尔良的美景图像 我们简单粗暴地处理一下 很快地 字母消失了 所以要修复的区域是所有这些字母覆盖的区域 我们把外部的信息扩散到里面 在这里很难看清  而现在你得到一张非常漂亮的图像 在被字幕覆盖的区域我们创造了信息 根据字母周遭的信息 我认为这是非常漂亮的结果 这是另一个例子 这是一张恶化和退化的照片 红色的表示要修复的图像区域 有时 你标记的区域要比 实际上缺失信息的区域要大一点点 看这里
这条线很细 你可以把它标注地大些
就像给它一个冲激一样 这是从外部扩散到内部
从稍远的外部开始扩散 它移动地甚至比你需要的还要光滑 这就是结果
它看起来很棒 你可能会在这里看到一些小错误 因为这个女孩的眼睛被遮盖了太多了 所以当附近区域没有信息来暗示需要填入的内容时 创造信息是很难的 当然你已经做得很好了
至少初步的结果看起来几乎完美了 接着 如果需要的话 采用不同程序的专业修复 可以只对那个微小的区域进行修复 有时是没必要那么做的
这是原图 我们已经看过它了
一个人绑着绳子跳出去 现在绳子没了 你看到的是放大的区域 再看一次袜子多么棒地延展 在条纹边缘非常棒延展
因为这就是我们要的 连续的边缘 这是我们想要的
而这就是这类算法所起的作用 所以在我们的例子中 起到了特殊的效果 让我们看看这里发生了什么 他们都消失了
我将再展示一遍 在船上有人 然后他们都消失了 我们只是修复了这些被船上坐着的人遮盖的区域 然后这些人就消失了 再说一次 修复意味着某种形式上不可检测的图像修改 至少对于普通消费者是这样的 这是另外一个例子 图片上有一些划痕 现在划痕都消失了 我们移走了所有划痕 用附近区域的信息来修复图像 这看起来很棒 它看起来非常自然 就像没被抓损过一样 这里有一个例子 这是这次视频里我要展示的最后一个例子 在这个例子里 检测需要修复的区域实际上并不是太难 在之前的其他例子中 用户定义了要修复的区域 现在这是一个无线传输的图像的例子 记住 图像使用 JPEG 来传输、存储 JPEG按块工作
当你传输一个图像时 会发生信号丢失 比如说在移动电话的情形中 一半的块丢失了 现在 信号丢失并不是很难检测 你没收到信号 于是就检测到了 懂了吧？
所以当这里发生了丢失 你可以说: 嘿 我要用上面谈到的修复算法来恢复丢失的块 那就是我们在这里所模拟的东西
这是原始图像 在这看到的所有的块都是丢失的信号 是对丢失信号的模拟 你发现这里没有信号 就将它加入还原 很快 你就修复了这个图像 让我再展示一遍给你
你发现了信号丢失 然后你修复了
你可能有一个更好的移动电话 一个可以检测图像的信号丢失然后很快做完图像修复的移动电话 图像仍然是JPEG格式 传输给你这张图像的人不知道信号可能丢失 在接受终端 你发现了信号丢失 这实际上能够帮助压缩
你可以故意丢掉一些块 因为你知道如何用图像修复来还原他 这样就提高了压缩率 一些块很容易被恢复 事实上你并不需要发送或者存储它们 在计算开销上增加了一丁点 却可能使压缩率大幅升高 这是该视频的最后一个例子 但是还有一件事情我还没告诉你 我故意要让你多想想 我给了你们图像修复的等式 但是我们有三种颜色 我们该这么做？
我们该如何从我给你们的等式转换到多种颜色的情况？ 记住 等式为 It等于I做拉普拉斯变换之后的梯度与I的梯度的垂直向量的内积 所以 你可以在每一个通道运用该式 也就是说在红色、绿色、蓝色或者其它颜色空间 或者你可以想办法把它扩展到彩色图像 扩展到向量 我们知道彩色向量梯度的概念 我们也可以定义彩色向量得拉普拉斯变换
所以 存在两种可能的办法 你可以单独处理每一个颜色或者你可以尝试 使用矢量场的定义 将每一个部分 比如拉普拉斯变换和梯度 改变为矢量场的形式
所有我展示给你看的例子 都是分开处理每个颜色的
以上是一些由偏微分方程式进行图像处理的例子 在下个视频中 我将向你展示 一些使用上星期学过的变分公式来进行的图像修复 一些很简单的变分公式 将会带给我们一个非常棒的图像修复技术 它基于颜色和边界的相同扩散算法 很希望能在下一节视频中见到你 谢谢 【未完成版本】