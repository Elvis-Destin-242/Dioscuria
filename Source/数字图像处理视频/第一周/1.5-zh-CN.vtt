WEBVTT

1
00:00:00.000 --> 00:00:04.109
我们将要讨论如何在计算机中表示图像 

2
00:00:04.109 --> 00:00:06.945
如何在计算机中表示彩色图像 

3
00:00:06.945 --> 00:00:09.665
以及如何在计算机中表示视频 

4
00:00:09.665 --> 00:00:13.717
还有很重要的采样、表示和量化的概念 

5
00:00:13.717 --> 00:00:17.046
我们非常容易地就可以想到 

6
00:00:17.046 --> 00:00:19.867
我们一般通过照相机拍摄的图像 

7
00:00:19.867 --> 00:00:24.652
但是请记住 我们在这里看到的和我们之前视频中提到的 

8
00:00:24.652 --> 00:00:29.804
我们所熟悉的图像仅仅是 我们能够在电磁波谱上 

9
00:00:29.804 --> 00:00:34.160
在不同的波长、以不同的方式所获取的图像的非常小的一部分 

10
00:00:34.160 --> 00:00:38.314
量化的概念在一定程度上是和那些方式相关的 

11
00:00:38.314 --> 00:00:42.989
我们总是要进行采样 我们总要进行量化 

12
00:00:42.989 --> 00:00:45.874
但再提一次 最好在脑海中留着这个念头 

13
00:00:45.874 --> 00:00:50.606
当我们谈论这些不同的想法时 要如何将这些想法 

14
00:00:50.606 --> 00:00:54.300
应用到我们最为熟悉的由数码相机所拍摄的图片上 

15
00:00:54.300 --> 00:01:00.231
所以 基本思路是这样的 

16
00:01:00.231 --> 00:01:05.248
光线被物体反射 并进入照相机   

17
00:01:05.248 --> 00:01:10.097
同时 在照相机里面我们有传感器 

18
00:01:10.097 --> 00:01:14.696
如同在这里看到的那样 记住 在我们的眼睛里有视网膜 

19
00:01:14.696 --> 00:01:19.186
视网膜上有视锥细胞和视杆细胞 那些就是传感器 

20
00:01:19.186 --> 00:01:24.368
在数码相机中 我们有传感器 它们的功能和我们眼睛里的传感器是一样的 

21
00:01:24.368 --> 00:01:27.960
所以 这仅仅是一个传感器的例子 

22
00:01:27.960 --> 00:01:30.862
能量进来后 有滤波器 

23
00:01:30.862 --> 00:01:35.076
然后 这些能量被接受和传输 

24
00:01:35.076 --> 00:01:40.189
因此 能量被感知然后被传输 通常 在一个普通的相机里 

25
00:01:40.189 --> 00:01:44.814
我们有一个二维的传感器矩阵 

26
00:01:44.814 --> 00:01:48.340
这里的每一个都是一个传感器 

27
00:01:48.340 --> 00:01:51.429
通常 正如我们看到的   

28
00:01:51.429 --> 00:01:55.047
它们以正方形或长发形的形式排列 

29
00:01:55.047 --> 00:02:01.270
因此 我们实际上得到了离散值 当我们去购买相机时 

30
00:02:01.270 --> 00:02:05.774
我们会听到这是 1,000 x 1,000 

31
00:02:05.774 --> 00:02:10.543
我们要多谈一会儿这个 

32
00:02:10.543 --> 00:02:14.584
这意味着 我们在这个方向上有1,000个传感器 

33
00:02:14.584 --> 00:02:17.167
这个方向上也有1,000个传感器 共有1,000的平方这么多个传感器 

34
00:02:17.167 --> 00:02:21.870
所以 再次说明 物体反射的光投射进照相机 

35
00:02:21.870 --> 00:02:26.816
并被相机所感知 但所有的过程都要经过离散化这一步 

36
00:02:26.816 --> 00:02:30.758
你们中的一些人可能比其他人更熟悉离散化 

37
00:02:30.758 --> 00:02:34.225
上过数字信号处理这门课的同学 

38
00:02:34.225 --> 00:02:39.491
已经了解了模数转换器 (AD converter)  这部分对你们而言会 

39
00:02:39.491 --> 00:02:44.114
非常简单而熟悉 但让我们为了那些不熟悉这些概念的同学 

40
00:02:44.114 --> 00:02:49.099
复习一下这些 所以 我们可以看到这儿发出光 

41
00:02:49.099 --> 00:02:54.581
光线由物体反射 并进入到传感器件之中 

42
00:02:54.581 --> 00:03:00.142
想想你的数码相机 因此 这是后面这个成像的放大 

43
00:03:00.142 --> 00:03:04.058
它看起来 这个物体在空间中是连续的 

44
00:03:04.058 --> 00:03:10.245
任何物体都是连续的 但我们实际上得到的是 

45
00:03:10.245 --> 00:03:15.413
离散化表示的物体 而离散化被用在了两个不同方面 

46
00:03:15.413 --> 00:03:20.726
一个是空间离散化 这儿我们的传感器数量是离散的 

47
00:03:20.726 --> 00:03:25.358
注意这个光 最简单的一种模式就是 

48
00:03:25.358 --> 00:03:29.849
做积分 这里的每个传感器累积其接收到的光线 

49
00:03:29.849 --> 00:03:35.112
所以空间上是离散化的 而在幅值上也是离散的 

50
00:03:35.112 --> 00:03:38.270
我们无法捕获 

51
00:03:38.270 --> 00:03:43.884
由物体反射而来的光的每一个层级的灰度 

52
00:03:43.884 --> 00:03:47.112
但我们仍要将其离散化 

53
00:03:47.112 --> 00:03:50.600
所以 让我们来看一看 关于这个问题让我们多谈一点 

54
00:03:50.600 --> 00:03:59.740
这是我们真实看到的物体 让我们先来看一条线 

55
00:03:59.740 --> 00:04:04.546
我划过这个对象 因此 我们可以看到不同的值 

56
00:04:04.546 --> 00:04:10.429
从白色到灰色 因此 让我们把这里看到的情况描绘出来 

57
00:04:10.429 --> 00:04:15.152
这里非常亮 是白色 

58
00:04:15.152 --> 00:04:20.704
接着变暗了一点 如果我们看这儿 让我抹去这个以便 

59
00:04:20.704 --> 00:04:24.164
我们能够看得更清楚 如果我们移动一下 

60
00:04:24.164 --> 00:04:28.247
让我在这儿做个标记 如果我们移动一下 

61
00:04:28.247 --> 00:04:32.269
会看到它将是白色 然后变暗 接着它变得亮了一点儿 

62
00:04:32.269 --> 00:04:34.828
然后再次变暗 最后它又变成白色 

63
00:04:34.828 --> 00:04:39.642
所以它的形状是这个样子 高的表示白色 接着变暗 

64
00:04:39.642 --> 00:04:42.932
然后它上升 下降 接着它又变成白色了 

65
00:04:42.932 --> 00:04:45.674
当然 它并不完美 它含有一些噪声 

66
00:04:45.674 --> 00:04:50.305
就像当我们购买涂料并粉刷了一面墙时 

67
00:04:50.305 --> 00:04:53.047
我们认为粉刷过的墙成了一个颜色 但实际上它不是 

68
00:04:53.047 --> 00:04:56.460
它有一些小的变动 比如这儿 

69
00:04:56.460 --> 00:04:59.855
再次重申 这里用到了两种处理过程 

70
00:04:59.855 --> 00:05:03.179
一个是采样 我们要根据一定的离散间隔来取值 

71
00:05:03.179 --> 00:05:08.414
 我们不会取遍所有的值  

72
00:05:08.414 --> 00:05:11.172
我们只在一定间隔上取值 

73
00:05:11.172 --> 00:05:12.215
明白了吗？ 

74
00:05:12.215 --> 00:05:16.580
这是一个离散化过程 第二个离散化过程就是 

75
00:05:16.580 --> 00:05:20.609
我们不能把这里的每一个值都表示出来 

76
00:05:20.609 --> 00:05:24.034
我们将只会表示它们中的某些值 

77
00:05:24.034 --> 00:05:27.593
我们将要近似地表示它们 所以让我来举一个例子 

78
00:05:27.593 --> 00:05:30.750
一个非常简单的例子 来说明我们如何近似 

79
00:05:30.750 --> 00:05:37.997
比方说 我们来看这个值 17.5 所以基本上我们看到 

80
00:05:37.997 --> 00:05:42.230
这个值表示这里的一个特定的灰度值 

81
00:05:42.230 --> 00:05:47.520
那么我们如何来近似这个呢？ 一种方法是像这样对它进行截取 

82
00:05:47.520 --> 00:05:53.480
然后就是 我知道进入传感器的值是17.5 

83
00:05:53.480 --> 00:05:57.836
但实际上我用17来表示它 

84
00:05:57.836 --> 00:06:04.179
还有许多方法来做近似 我们就通过量化的例子再详细讨论 

85
00:06:04.179 --> 00:06:08.306
这是采样 在这个方向上 

86
00:06:08.306 --> 00:06:12.280
灰度值的离散化被称为量化 

87
00:06:12.280 --> 00:06:18.240
我们还可以考虑 例如如果我们和以前一样还取17.5 

88
00:06:18.240 --> 00:06:23.786
我们可以把它除以2 在此基础上并乘以2 

89
00:06:23.786 --> 00:06:29.435
也就是我们除以2 然后我们近似取整 接着我们乘以2 

90
00:06:29.435 --> 00:06:35.243
那么我要问你的是 作为一个小练习 这里得到的值是多少？ 

91
00:06:35.243 --> 00:06:40.300
如果 再除以2 会发生什么呢？ 

92
00:06:40.300 --> 00:06:49.860
我们举例来说 把它除以4  向下近似取整 然后再乘以4 

93
00:06:49.860 --> 00:06:55.362
好好想一想这个 这是一个简单的算术运算 

94
00:06:55.362 --> 00:07:01.252
我们将在量化这一章就这个特别的运算进行更多的讨论 

95
00:07:01.252 --> 00:07:04.771
那么总结来说 我们有两种方式进行采样 

96
00:07:04.771 --> 00:07:08.500
一个是 其实是两种使用了离散化的方法 

97
00:07:08.500 --> 00:07:12.381
一种就是空间域的采样 

98
00:07:12.381 --> 00:07:16.186
另一种就是灰度值的量化 

99
00:07:16.186 --> 00:07:22.472
因此 其基本思想是 当我们从一个连续的对象开始 

100
00:07:22.472 --> 00:07:27.243
它在空间上是连续的 同时有各种各样的灰度值 

101
00:07:27.243 --> 00:07:33.133
通过对空间域和灰度值进行离散化 

102
00:07:33.133 --> 00:07:36.338
我们最终得到了一个离散化的物体 

103
00:07:36.338 --> 00:07:42.228
好的数码相机 就是在这里有足够密集的采样 

104
00:07:42.228 --> 00:07:47.074
还有非常精细的量化 以致于我们都不会发现 

105
00:07:47.074 --> 00:07:51.248
这一切都是离散的 但实际上 它们是离散的 

106
00:07:51.248 --> 00:07:57.500
因此 我们得到了像素值 其中每一个被称为一个像素 

107
00:07:58.680 --> 00:08:06.660
这来自于图像元素 

108
00:08:07.720 --> 00:08:15.703
并用像素来表示 实际上 

109
00:08:15.703 --> 00:08:19.196
如果你用谷歌或者在网上搜索一下 

110
00:08:19.196 --> 00:08:23.853
你会发现有趣的事 

111
00:08:23.853 --> 00:08:26.634
你将发现第一个使用像素这个词的人 

112
00:08:26.634 --> 00:08:31.679
他实际上是一位非常著名的统计学家 

113
00:08:31.679 --> 00:08:38.092
你会从在互联网上搜寻答案中找到乐趣 还可以在博客讨论你的发现 

114
00:08:38.092 --> 00:08:44.623
因此 这些都是离散的 在空间上和灰度值上都是如此 

115
00:08:44.623 --> 00:08:48.193
我们就是这样得到像素的 

116
00:08:48.193 --> 00:08:56.283
再次强调 采样的密度越高 量化的层级越密 

117
00:08:56.283 --> 00:09:03.165
图像的质量就越好 因此 就一般的图像而言 

118
00:09:03.165 --> 00:09:10.274
例如 256×256 在空间域中 这将意味着 

119
00:09:10.274 --> 00:09:16.480
将有256的平方这么多的像素 也许每个像素由8个比特位 (bit) 表示 

120
00:09:17.660 --> 00:09:24.093
因此 每一个像素用 8 bits 表示 这意味着它可以 

121
00:09:24.093 --> 00:09:29.913
表示256个不同的灰度值 我们将看到这个的重要性 

122
00:09:29.913 --> 00:09:33.206
空间的离散化以及 

123
00:09:33.206 --> 00:09:37.188
灰度值的量化 都是相当重要的 

124
00:09:37.188 --> 00:09:45.520
我们还能够获得更好的图像 那么 让我们回到前面 

125
00:09:45.520 --> 00:09:51.750
比如说 有一张图像 这里不是256×256 

126
00:09:51.750 --> 00:10:00.810
而是512×512 并且仍然是 256个灰度值 

127
00:10:00.810 --> 00:10:06.147
这样这张图像需要更多存储空间 但它将拥有更好的质量   

128
00:10:06.147 --> 00:10:09.452
那么重复一遍 当你要购买数码相机时   

129
00:10:09.452 --> 00:10:13.516
他们通常会对你重点强调这个数字 

130
00:10:13.516 --> 00:10:17.644
即 有多少像素 它可以告诉你采样的密集程度 

131
00:10:17.644 --> 00:10:19.385
我们想要许多的像素 

132
00:10:19.385 --> 00:10:24.351
因此它们是如此地紧挨在一起 以至于我们实际上相信 

133
00:10:24.351 --> 00:10:28.866
它是一个连续的空间 同理 也相信灰度值的层级也是连续的 

134
00:10:28.866 --> 00:10:33.768
因此 再次说明 这些中的每一个都是一个像素 它们由灰度值表示 

135
00:10:33.768 --> 00:10:36.975
现在这是一幅黑白图像 

136
00:10:36.975 --> 00:10:40.648
实际上 在我们的相机里 我们得到的是彩色图像 

137
00:10:40.648 --> 00:10:44.781
彩色图像是由这样的三个图像来表示 

138
00:10:44.781 --> 00:10:48.600
一个红色 一个绿色 

139
00:10:49.820 --> 00:10:55.224
还有一个蓝色 所以基本上来讲 照相机获取的图像 

140
00:10:55.224 --> 00:11:00.492
我将在这里多讲解一下这个问题 获取三幅图像 

141
00:11:00.492 --> 00:11:05.607
一张显示蓝色 代表场景中有多少蓝色 

142
00:11:05.607 --> 00:11:10.494
另一张显示绿色 还有一张显示红色 

143
00:11:10.494 --> 00:11:13.930
这就是所谓的红色、绿色和蓝色 (RGB) 

144
00:11:13.930 --> 00:11:18.410
所以你经常会听到 RGB图像 

145
00:11:18.410 --> 00:11:25.691
关于这点我再说明一下 大部分的低端和中端消费级相机 

146
00:11:25.691 --> 00:11:33.252
其实它们都没有真正地捕获每种颜色的完全的二维矩阵 

147
00:11:33.252 --> 00:11:38.941
我们想要的是单独的红色 

148
00:11:38.941 --> 00:11:46.840
绿色和蓝色图像 因此我们将有红色 

149
00:11:46.840 --> 00:11:48.893
绿以及蓝 

150
00:11:48.893 --> 00:11:55.130
这将是理想的情形 更昂贵的相机真正做到了这一点 

151
00:11:55.130 --> 00:12:01.291
它们捕获了三个完整的图像 而大多数消费级相机 如果你买了一款 

152
00:12:01.291 --> 00:12:07.067
低端数码相机 实际上有些东西稍许不同 

153
00:12:07.067 --> 00:12:11.995
会出现被称为马赛克的东西 简单地说 

154
00:12:11.995 --> 00:12:18.002
就是它以颜色交错的方式捕获像素 它捕获了一个红色 一个绿色 一个红色 

155
00:12:18.002 --> 00:12:24.760
一个绿色等等 这里将捕获一个红色 一个蓝色 

156
00:12:24.760 --> 00:12:27.800
一个蓝色 一个红色 等等 

157
00:12:27.800 --> 00:12:32.579
所以下一个会是红色 绿色 红色 绿色 

158
00:12:32.579 --> 00:12:39.760
下一个又是蓝色 红色 蓝色 红色 

159
00:12:39.760 --> 00:12:45.863
因此 实际上 它不具有三倍的像素量 

160
00:12:45.863 --> 00:12:48.743
其实是 一个红色像素 一个绿色 一个红色 一个绿色 

161
00:12:48.743 --> 00:12:53.543
由此看来 我们需要进行插值 

162
00:12:53.543 --> 00:12:58.588
我们将学习如何插值 这会在第三和第四周的课程中讲到 

163
00:12:58.588 --> 00:13:03.410
因为要显示出全色彩图像 

164
00:13:03.410 --> 00:13:06.689
就需要每个像素中 都有红色 绿色和蓝色 (RGB) 

165
00:13:06.689 --> 00:13:11.575
这里 我们已经有了红色 我们还要补充绿色和蓝色 

166
00:13:11.575 --> 00:13:14.404
这是通过临近像素的信息来得到的 

167
00:13:14.404 --> 00:13:19.226
这儿 我们有绿色 我们将要补充上红色和蓝色 

168
00:13:19.226 --> 00:13:24.434
因此 我们将要补充完成三个颜色通道 以便看到一幅彩色图像 

169
00:13:24.434 --> 00:13:27.247
你购买一台数码相机时 

170
00:13:27.247 --> 00:13:32.944
他们通常告诉你一个尺寸 这个尺寸是插值后的结果 

171
00:13:32.944 --> 00:13:38.063
然而 他们会说 一般的日常照片 获取的图像就是这样 

172
00:13:38.063 --> 00:13:42.001
其实 相机实际捕获的数据 

173
00:13:42.001 --> 00:13:45.020
仅有他们告诉你的那个数值的三分之一 

174
00:13:45.020 --> 00:13:49.351
因为给你的是对拍摄的图像进行插值后 得到的图像 

175
00:13:49.351 --> 00:13:52.895
所以这里我们得到了一些离散的图片 

176
00:13:52.895 --> 00:13:57.949
我们有红色 绿色和蓝色的通道 我们将它们想成 

177
00:13:57.949 --> 00:14:03.715
红色 绿色和蓝色 这时我们已经对得到的图像进行了插值 

178
00:14:03.715 --> 00:14:09.252
顺便说一下 这叫做马赛克 彩色图像就是这样制作出来的 

179
00:14:09.252 --> 00:14:13.789
那么 对于视频来说是怎样的呢？你已经知道了 

180
00:14:13.789 --> 00:14:18.865
彩色图像是如何保存在电脑中的 有三个通道 三个二维离散数组 

181
00:14:18.865 --> 00:14:24.324
分别对应红色 绿色和蓝色 

182
00:14:24.324 --> 00:14:28.785
对于视频来说是怎样的呢 基本来说视频和这很类似 

183
00:14:28.785 --> 00:14:31.680
这里一张图片含有红色 绿色 蓝色 (RGB) 

184
00:14:31.680 --> 00:14:36.120
在视频中 你会有很多这些图像 

185
00:14:36.120 --> 00:14:42.524
比如 在视频的一秒钟内 一些格式下 

186
00:14:42.524 --> 00:14:47.988
你将会获得30张图片 也就是说 你将会得到30张 RGB 图片 

187
00:14:47.988 --> 00:14:53.196
然后每一张图片 还记得吗 都是二维结构 

188
00:14:53.196 --> 00:14:59.770
基本来说 如果你想在你的电脑里保存一秒的视频 

189
00:14:59.770 --> 00:15:09.580
你会得到 30*3 张图片 1秒钟内有 30张图片   

190
00:15:09.580 --> 00:15:16.133
乘以3 是因为有三种颜色 所以在1秒钟内 

191
00:15:16.133 --> 00:15:22.021
将有90张这种类型的图片来表示 1秒钟的视频 

192
00:15:22.021 --> 00:15:31.129
当然 90张图片 我们来看看90张分辨率为 512 x 512 的图片 

193
00:15:31.129 --> 00:15:39.366
每个像素 占 8 bits 这就是你需要在这个相对低的分辨率情况下 

194
00:15:39.366 --> 00:15:43.193
所占用的存储空间 这不是特别高的分辨率 

195
00:15:43.193 --> 00:15:48.536
这很标准 但是这就是你电脑展示 1秒视频需要的东西 

196
00:15:48.536 --> 00:15:54.240
顺便提一下 这里的 3*8 bits 

197
00:15:54.240 --> 00:15:58.356
乘以3 是因为我们有 RGB 三个通道 

198
00:15:58.356 --> 00:16:02.471
有时候人们会说分辨率是 24 bits 

199
00:16:02.471 --> 00:16:06.010
那是指我们使用 24 bits 来表示一个像素 

200
00:16:06.010 --> 00:16:08.057
这就是你使用的方法 

201
00:16:08.057 --> 00:16:13.634
如果你有一台电脑 上面有程序知道如何处理图片 

202
00:16:13.634 --> 00:16:19.211
你会看到很多二维离散数组 

203
00:16:19.211 --> 00:16:22.882
和你图片包含的秒数或帧一样多 

204
00:16:22.882 --> 00:16:28.388
这是三十分之一 我们称它为一帧 一秒钟内有30帧 

205
00:16:28.388 --> 00:16:32.906
或30张图片 当我们说到静止图像的时候 

206
00:16:32.906 --> 00:16:38.483
也就是我们通常说的图片 当说到视频的时候 这里每一张图片 

207
00:16:38.483 --> 00:16:41.391
我们称之为帧 所以这就是你的图像的表现方式 

208
00:16:41.391 --> 00:16:44.761
我们再来看看 

209
00:16:44.761 --> 00:16:49.575
在空间尺度中的分辨率、灰度值的分辨率的效果和重要性 

210
00:16:49.575 --> 00:16:53.770
也就是说 这里有多少像素 

211
00:16:53.770 --> 00:16:58.820
以及你会为它们设置数值为多少的灰度值 

212
00:16:58.820 --> 00:17:03.065
这里又是相同类型的表示 

213
00:17:03.065 --> 00:17:09.649
这就是一张单色的图片 或者一张单色帧所呈现的方式 

214
00:17:09.649 --> 00:17:14.154
如果你有一个字母D 这些像素是 0 

215
00:17:14.154 --> 00:17:25.111
当我们有 8 bits 时 一般来说 0代表黑色 

216
00:17:25.111 --> 00:17:32.275
1 或者 255 表示白色 所以如果是 8 bits 

217
00:17:32.275 --> 00:17:35.985
你可以使用从 0到255 这些数值 0表示黑色 255表示白色 

218
00:17:35.985 --> 00:17:42.851
有时候255 也可以称作1 如果你想使用 0和1之间的间隔表示 

219
00:17:42.851 --> 00:17:45.140
所以 虽然你看到的是这样 

220
00:17:45.140 --> 00:17:51.441
其实在计算机中 是由很多0 表示黑色的区域 

221
00:17:51.441 --> 00:17:56.773
这部分区域的像素值是处于灰度值中间的位置 

222
00:17:56.773 --> 00:18:01.136
它们的灰度值可能等于 128 或者等于0.5 

223
00:18:01.136 --> 00:18:06.177
我们看这里灰度值是0.5 白色用 1 表示 

224
00:18:06.177 --> 00:18:14.567
这就是你的电脑中对这幅图的离散表示 

225
00:18:14.567 --> 00:18:18.752
对于每一个像素 都有一个离散值 

226
00:18:18.752 --> 00:18:25.282
有时 

227
00:18:25.282 --> 00:18:31.559
你能用的只有 256 个不同的等级 

228
00:18:31.559 --> 00:18:37.248
有时候你的图片太亮 你也许无法表现 

229
00:18:37.248 --> 00:18:42.645
亮度之间微小的不同 请注意 人类视觉系统可以 

230
00:18:42.645 --> 00:18:47.896
适应许多的等级 很多的亮度等级 

231
00:18:47.896 --> 00:18:51.616
但是并不是同时适应所有等级的亮度 对图片来说也是一样 

232
00:18:51.616 --> 00:18:54.679
我们可以获得很多很多等级 也许256个 

233
00:18:54.679 --> 00:19:00.367
但是 如果我们希望同时处理这样一个有暗区域和明亮区域的图片的时候 

234
00:19:00.367 --> 00:19:05.228
我们就有了问题 有时候 我们不能获取到 

235
00:19:05.228 --> 00:19:09.885
在明亮区域内很小的差别 这被称作 饱和度 

236
00:19:09.885 --> 00:19:13.088
所以这里看起来全白因为 

237
00:19:13.088 --> 00:19:16.289
这里所有像素值都达到了255 也许超过255 

238
00:19:16.289 --> 00:19:20.556
超过了255 因为那里特别亮 

239
00:19:20.556 --> 00:19:24.965
这经常发生 我们拍照后 有时我们看到 

240
00:19:24.965 --> 00:19:30.441
被称作高光的部分 或者很强的反射 使其看起来为白色 

241
00:19:30.441 --> 00:19:35.348
它看起来十分明亮 那是因为 图片 传感器已经饱和了 

242
00:19:35.348 --> 00:19:38.711
所以 这就是原因 现在你知道为什么这会发生了 

243
00:19:38.711 --> 00:19:42.689
你有一些离散的等级 

244
00:19:42.689 --> 00:19:46.179
一些离散的数值 来表现你的图片 

245
00:19:46.179 --> 00:19:51.762
这里的值超过了你可以表示的离散值的范围 

246
00:19:51.762 --> 00:19:56.295
所以再次重申 两个离散化过程 

247
00:19:56.295 --> 00:20:00.985
一个是空间尺度上的 一个是灰度值尺度上的 来看看发生了什么 

248
00:20:00.985 --> 00:20:04.485
有什么样的效果 其实你知道的 因为如果你有 

249
00:20:04.485 --> 00:20:10.293
一台数码相机 或者如果你在网络上浏览图片 

250
00:20:10.293 --> 00:20:16.300
你会看到不同分辨率的图片 所以如果你使用了大量的像素 

251
00:20:16.300 --> 00:20:20.871
你可能会看到类似这样的图片 也就是说 

252
00:20:20.871 --> 00:20:26.316
你有一张非常非常精细的图 很多的像素 看起来很棒 

253
00:20:26.316 --> 00:20:29.991
另一方面 如果你的图像很粗糙   

254
00:20:29.991 --> 00:20:36.605
没那么稠密 意味着没有那么多像素 你会看到像这样的图片 

255
00:20:36.605 --> 00:20:41.424
显而易见 比如说 

256
00:20:41.424 --> 00:20:47.303
这条线显示得很清晰 而这里就有些模糊 

257
00:20:47.303 --> 00:20:51.550
你可以很容易地看到这里的小数字 

258
00:20:51.550 --> 00:20:57.642
但这里却不那么容易 看看这里的数字 

259
00:20:57.642 --> 00:21:02.244
它们在这里就没那么清晰 这里我们只是改变了空间分辨率 

260
00:21:02.244 --> 00:21:06.144
我们没有修改灰度值 

261
00:21:06.144 --> 00:21:08.874
我们仍然有 256个值 

262
00:21:08.874 --> 00:21:15.271
所以这里每一个像素都可由 256个灰度值表示 这里也是这样 

263
00:21:15.271 --> 00:21:21.355
但是我们在低分辨率下无法像高分辨率中表现那么高的精细度 

264
00:21:21.355 --> 00:21:25.801
你可以想一想 再一次 

265
00:21:25.801 --> 00:21:30.675
如果我想画一张描述图 如果你希望表示 

266
00:21:30.675 --> 00:21:38.100
这个表达灰度值的图 你需要对其离散化处理 

267
00:21:44.180 --> 00:21:49.674
如果你画的很粗糙的话 你不会发现 

268
00:21:49.674 --> 00:21:55.461
这里灰度值有一个平滑的变化 但是如果另一方面 

269
00:21:55.461 --> 00:22:00.991
你可以加入更多的层 你可以获取到 

270
00:22:00.991 --> 00:22:08.391
很多很多点的值 而不仅仅是很少的一些 

271
00:22:08.391 --> 00:22:17.853
让我使用另一种颜色 只是几个通过粗略的离散化得到的值 

272
00:22:17.853 --> 00:22:23.411
这也是为什么这图像看起来不像这张这么精细 

273
00:22:23.411 --> 00:22:30.500
因为离散化是在一个很粗糙的层面上捕捉信息的 

274
00:22:30.500 --> 00:22:34.503
在空间上离散化 

275
00:22:34.503 --> 00:22:40.676
类似的 如果你对灰度值做一个粗糙的离散化 

276
00:22:40.676 --> 00:22:43.930
我们再一次说好 

277
00:22:43.930 --> 00:22:48.773
我们不改变像素的数量 

278
00:22:48.773 --> 00:22:55.951
这四张图和接下来出现的四张图 像素个数完全相同 

279
00:22:55.951 --> 00:23:01.226
其实这里写了 

280
00:23:01.226 --> 00:23:05.551
它有452个像素 我把它写大一点 

281
00:23:05.551 --> 00:23:07.194
乘以 374 所有的图都是 

282
00:23:07.194 --> 00:23:12.470
但是第一张图使用了8 bits 表示 表示它可以有256个值 

283
00:23:12.470 --> 00:23:18.741
所以我把它们写下来 写在这里 

284
00:23:18.741 --> 00:23:25.962
第一张是256 我们可以看到它非常非常的平滑 非常非常精细 

285
00:23:25.962 --> 00:23:34.514
这里 我们只使用了7 bits 或者说 128个值 基本来说 0和1被当做0 

286
00:23:34.514 --> 00:23:38.888
2和3被当做2 4和5被当做4 

287
00:23:38.888 --> 00:23:42.270
最简单的完成这件事的方法是 

288
00:23:42.270 --> 00:23:47.900
将这里的每一个值都除以 2 

289
00:23:49.580 --> 00:23:56.760
取比它们小的 最为接近它们的整数 

290
00:23:56.760 --> 00:23:57.577
然后你再将它乘以2 

291
00:23:57.577 --> 00:24:03.940
这里比如说 如果这张图的这个值是8 除以2 

292
00:24:05.220 --> 00:24:09.141
除以2 抱歉 写错了 

293
00:24:09.141 --> 00:24:11.568
除以2 那就是4 

294
00:24:11.568 --> 00:24:13.902
再乘以2 

295
00:24:13.902 --> 00:24:18.850
你又得到了8 对这个像素值没有影响 

296
00:24:18.850 --> 00:24:20.811
但是如果这样呢 

297
00:24:20.811 --> 00:24:25.759
如果像素值为9 会发生什么？ 

298
00:24:25.759 --> 00:24:30.446
将它除以2 得到4又1/2 

299
00:24:30.446 --> 00:24:33.978
我取比它小的 最为接近它的整数 

300
00:24:33.978 --> 00:24:38.891
就是4 再将其乘以2 得到了8 

301
00:24:38.891 --> 00:24:46.082
这里9变化成了8 这样的操作减小了可取值的范围 

302
00:24:46.082 --> 00:24:52.100
同时也降低了图像的质量 

303
00:24:52.100 --> 00:24:57.070
在我们只使用64个不同值的情况下 可能更糟糕 

304
00:24:57.070 --> 00:25:02.269
这可以看成是 除以4 向下取整 

305
00:25:02.269 --> 00:25:06.780
然后再乘以4 这表示你将会 

306
00:25:06.780 --> 00:25:13.433
如果你只有64个值 意味着每四个值由一个数字表示 

307
00:25:13.433 --> 00:25:17.179
这里 0、1、2、3全都变成了0 

308
00:25:17.179 --> 00:25:24.033
4、5、6、7 全都变成了4 等等 你可以继续 

309
00:25:24.033 --> 00:25:28.302
只用32个值来表示 我希望你会发现质量不断变差 

310
00:25:28.302 --> 00:25:33.317
特别的 如果你看看这里的线条 

311
00:25:33.317 --> 00:25:36.435
这是所谓的 伪轮廓 

312
00:25:36.435 --> 00:25:39.688
你可以看到这里的线条并不清晰 

313
00:25:39.688 --> 00:25:45.348
这里有一个平滑的过渡 但是这里你却能看到这些伪轮廓 

314
00:25:45.348 --> 00:25:50.436
产生这个的原因就是因为刚才提到的那些被跳过的值 

315
00:25:50.436 --> 00:25:54.540
所以如果这里是 1、2、3、4 

316
00:25:54.540 --> 00:26:00.819
事实上当你使用很少很少的灰度值的时候 

317
00:26:00.819 --> 00:26:06.265
你得到的是0、0、0、4 你会得到那样的值 

318
00:26:06.265 --> 00:26:11.939
因为你用了更少的资源来表示不同的灰度值 

319
00:26:11.939 --> 00:26:16.781
这甚至会走向一个极端 

320
00:26:16.781 --> 00:26:22.379
我们继续 这里我们只用16个值 

321
00:26:22.379 --> 00:26:28.070
相信你们可以清晰地看到 伪轮廓 

322
00:26:28.070 --> 00:26:34.154
我们只使用 8个值 只用 8个数字来表示 

323
00:26:34.154 --> 00:26:37.493
图片中所展现的一切 

324
00:26:37.493 --> 00:26:41.426
这是一个很极端的量化过程 

325
00:26:41.426 --> 00:26:46.250
这张图里只有4个值 这张里只有2个 

326
00:26:46.250 --> 00:26:53.792
在这个极端的案例中 所有小于128的值都被设定为了0 

327
00:26:53.792 --> 00:26:58.785
变成了黑色 所有大于128的值都设定为了255 

328
00:26:58.785 --> 00:27:04.310
变成了白色 然后得到了这组非常低质量的数据 

329
00:27:04.310 --> 00:27:07.739
这些就是空间量化 

330
00:27:07.739 --> 00:27:13.508
是空间采样 以及灰度值量化 是如何产生影响的 

331
00:27:13.508 --> 00:27:17.483
当你有更多的样本的时候 你会得到更高的质量   

332
00:27:17.483 --> 00:27:23.485
对于灰度值 你有更多的可能显示更多的细节变化 

333
00:27:23.485 --> 00:27:27.539
图片质量也就越高 当然 这样则需要 

334
00:27:27.539 --> 00:27:33.385
占用电脑中的越多的存储空间 这将在我们关于压缩的单元里学到 

335
00:27:33.385 --> 00:27:38.577
现在我们知道了图片在电脑中是如何表示的 

336
00:27:38.577 --> 00:27:41.852
它们由这些二维数组表示 

337
00:27:41.852 --> 00:27:44.743
灰度图像只用一个二维数组表示 

338
00:27:44.743 --> 00:27:47.793
彩色图像由三个数组表示 分别代表红、绿、蓝 

339
00:27:47.793 --> 00:27:52.057
视频由很多图像表示 

340
00:27:52.057 --> 00:27:54.042
比如 每秒 30张 

341
00:27:54.042 --> 00:27:58.967
有时候由于不同的标准 只有24张 

342
00:27:58.967 --> 00:28:04.848
总之就是有很多图像 就像我们前面说的 称它们为帧 

343
00:28:04.848 --> 00:28:10.068
我们知道一切都是离散的 所以有采样和量化 

344
00:28:10.068 --> 00:28:15.508
在计算机中 一张图片仅仅就是 元素为离散值的二维数组 

345
00:28:15.508 --> 00:28:17.420
谢谢大家
//果壳教育无边界字幕组  Mosesdc | 神无月的鱼头 | 和风煦日 | 小白_远游