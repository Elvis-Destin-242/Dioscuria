WEBVTT

1
00:00:00.000 --> 00:00:06.835
Now that we have images in the computer 
represent us, we learn in the previous 

2
00:00:06.835 --> 00:00:13.495
video discrete 2-dimensional arrays. 
Basically, we started from a continuous 

3
00:00:13.495 --> 00:00:18.276
picture and we finish with the 
2-dimension discrete array. 

4
00:00:18.276 --> 00:00:21.271
Now, we can start doing operations on 
these images. 

5
00:00:21.271 --> 00:00:25.703
There are network computer, there are 
just 2-dimensional arrays of pixels we 

6
00:00:25.703 --> 00:00:30.614
can do very different types of operations 
to do the kind of things that we saw in 

7
00:00:30.614 --> 00:00:35.496
the first couple of videos in this class. 
During the next few weeks, we're going to 

8
00:00:35.496 --> 00:00:39.815
learn very sophisticated operations. 
But let's start with just a few very 

9
00:00:39.815 --> 00:00:44.372
simple ones that, they are very simple 
but they are extremely useful and will 

10
00:00:44.372 --> 00:00:47.094
tell us how we actually can manipulate 
images. 

11
00:00:47.094 --> 00:00:51.768
And you can go into your computer and do 
any of the examples that I'm going to 

12
00:00:51.768 --> 00:00:56.621
show in the next few slides in just a few 
minutes or, or even less if you have a, a 

13
00:00:56.621 --> 00:01:01.420
program like Mathlab that are natural to 
work with 2-dimensional arrays. 

14
00:01:01.420 --> 00:01:06.728
Once we have a 2-dimensional array, one 
of the things that we can start talking 

15
00:01:06.728 --> 00:01:10.726
is about neighborhoods. 
So remember, we have a 2-dimensional 

16
00:01:10.726 --> 00:01:15.352
array, 
and we're talking about pixels. So, this 

17
00:01:15.352 --> 00:01:20.153
is a pixel, and I can ask where are the 
neighbors of this pixel. 

18
00:01:20.153 --> 00:01:25.793
And there are two types of standard 
neighborhoods that are taken in image 

19
00:01:25.793 --> 00:01:29.528
processing. 
One is called a four neighborhood, and 

20
00:01:29.528 --> 00:01:34.634
only these four are considered. 
And that's basically, you can only go 

21
00:01:34.634 --> 00:01:38.673
North, South, East, or West, so it's just 
a four neighborhood. 

22
00:01:38.673 --> 00:01:44.012
There is another very popular that is an 
eight neighborhood, 

23
00:01:44.012 --> 00:01:48.202
and you probably already guessed how it 
works. 

24
00:01:48.202 --> 00:01:53.029
So, if I'm here, 
the neighbors, the A neighbors of this 

25
00:01:53.029 --> 00:01:59.769
pixel are all the pixels around it. 
So, you can go north and south, east and 

26
00:01:59.769 --> 00:02:04.687
west, as before. 
But you can also go like northeast and 

27
00:02:04.687 --> 00:02:10.152
start going diagonal. 
So, for example, if I look at this image 

28
00:02:10.152 --> 00:02:14.517
here, this pixel, 
in a four neighborhood relationship is 

29
00:02:14.517 --> 00:02:19.063
not a neighbor of this one. 
So, these two 1s are not neighbors. 

30
00:02:19.063 --> 00:02:23.908
Because I cannot go diagonal in a four 
neighborhood relationship. 

31
00:02:23.908 --> 00:02:28.232
In an eight neighborhood relationship, 
there are neighbors. 

32
00:02:28.232 --> 00:02:32.406
And that of course translates also to a 
group of pixels. 

33
00:02:32.406 --> 00:02:38.145
So, this group of pixels has an eight 
neighborhood relationship with this one. 

34
00:02:38.145 --> 00:02:41.649
Because there is a one here, and a one 
diagonal. 

35
00:02:41.649 --> 00:02:44.363
And I'm allowed to go diagonal, 
okay? 

36
00:02:44.363 --> 00:02:50.423
Now, if I were to talk about fourth 
neighborhood, I will say that this group 

37
00:02:50.423 --> 00:02:54.132
of ones is not neighbor of this group of 
ones. 

38
00:02:54.132 --> 00:02:57.516
Because from this one, I can only go 
south. 

39
00:02:57.516 --> 00:03:01.142
I don't see anybody from this group, any 
ones. 

40
00:03:01.142 --> 00:03:04.365
I can go right, east, I don't see 
anybody. 

41
00:03:04.365 --> 00:03:10.490
So basically, depending on how we define 
neighborhood in this discrete space, 

42
00:03:10.490 --> 00:03:15.386
what kind of operations we can do. And 
were going to see that's very important. 

43
00:03:15.386 --> 00:03:19.717
This is the most common neighborhood 
today used in most modern image 

44
00:03:19.717 --> 00:03:22.855
processing. 
But it's important to be aware of this 

45
00:03:22.855 --> 00:03:26.747
type of neighborhood. 
Especially, when we're going to be doing 

46
00:03:26.747 --> 00:03:31.016
segmentation and things like that. 
We're also going to, later on when we 

47
00:03:31.016 --> 00:03:34.597
talk about the last week, we're going to 
talk about 3D images. 

48
00:03:34.597 --> 00:03:37.804
So, not images that have a great values 
on the plane, 

49
00:03:37.804 --> 00:03:40.640
like here, where every pixel has a great 
value. 

50
00:03:40.640 --> 00:03:45.387
But we're going to talk about volumetric 
images where every point in the volume, 

51
00:03:45.387 --> 00:03:48.532
those are going to be called voxels have 
great values. 

52
00:03:48.532 --> 00:03:53.156
And the neighborhood relationships are 
very important there, for example, in 

53
00:03:53.156 --> 00:03:56.609
medical images, 
to decide that this organ is neighbor to 

54
00:03:56.609 --> 00:04:00.863
this organ, we're going to have to define 
the neighborhood relationships. 

55
00:04:00.863 --> 00:04:04.480
And the same when we're going to do 
segmentation. 

56
00:04:04.480 --> 00:04:09.651
So, neighborhoods are important. 
But now that we have 2-dimensional 

57
00:04:09.651 --> 00:04:14.670
arrays, we can do simple operations 
between 2-dimensional arrays. 

58
00:04:14.670 --> 00:04:19.614
For example, we can add them. 
Remember, every point, so if I look at 

59
00:04:19.614 --> 00:04:25.546
this image, every point here has a value. 
So, I can take that image and add to a 

60
00:04:25.546 --> 00:04:29.020
second image. 
So I can take image one, 

61
00:04:29.020 --> 00:04:36.120
and add it to image two. 
That means that I take, and I'm drawing a 

62
00:04:36.120 --> 00:04:40.530
small image in purpo, on purpose, 
this is a three by three image. 

63
00:04:40.530 --> 00:04:44.677
I'm going to take the value here and add 
it to the value here. 

64
00:04:44.677 --> 00:04:50.301
So if here it say seven and here it say 
ten I'm going to get a result which is 

65
00:04:50.301 --> 00:04:53.886
seventeen. 
Then, I go to the next pixel and I do the 

66
00:04:53.886 --> 00:04:56.557
same. 
It's a simple addition of images. 

67
00:04:56.557 --> 00:05:00.072
That's an extremely important operation 
by itself, 

68
00:05:00.072 --> 00:05:03.024
very simple. 
So here, we see that operation. 

69
00:05:03.024 --> 00:05:07.338
We basically have NASA took images, 
multiple images, of the same galaxy. 

70
00:05:07.338 --> 00:05:11.853
Multiple times, they go once, and again, 
and take more and more and more images. 

71
00:05:11.853 --> 00:05:15.195
The images are very noisy, but all the 
images are aligned. 

72
00:05:15.195 --> 00:05:18.244
So they don't move the camera and nothing 
is moving. 

73
00:05:18.244 --> 00:05:21.880
They take one after the other, and then 
they start adding them. 

74
00:05:21.880 --> 00:05:26.954
And, when they add the image, when they 
add the images, they start getting 

75
00:05:26.954 --> 00:05:30.760
clearer and clearer. 
So here, they basically added five, 

76
00:05:30.760 --> 00:05:35.358
then they added ten, 
so on until they got a hundred images. 

77
00:05:35.358 --> 00:05:41.242
So, they did I1 + I2 a hundred times. So, 
they have a hundred images of this galaxy 

78
00:05:41.242 --> 00:05:46.104
and they added them together. 
And what happens is the image starts 

79
00:05:46.104 --> 00:05:50.304
becoming clearer and clearer because the 
image has noise. 

80
00:05:50.304 --> 00:05:54.872
The image is always, the actual scene is 
always the same scene. 

81
00:05:54.872 --> 00:06:00.324
The noise is the one that changes, that 
changes, and when you add all those 

82
00:06:00.324 --> 00:06:05.636
images, you're adding the same number, 
plus the noise that is random, and then 

83
00:06:05.636 --> 00:06:10.012
the noise gets reduced. 
And when we talk about spatial noisy, and 

84
00:06:10.012 --> 00:06:14.919
how to do image enhancing, we're going to 
discuss this very, very in detail. 

85
00:06:14.919 --> 00:06:20.091
But the basic idea is that we can simply 
add this 2-dimensional race to do a 

86
00:06:20.091 --> 00:06:25.323
number of interesting operations. 
We can do other things. 

87
00:06:25.323 --> 00:06:30.263
Basically, we can also mask them. 
We can subtract them. 

88
00:06:30.263 --> 00:06:38.193
So, we can have an image like this, 
and our image like this. Let's say, two 

89
00:06:38.193 --> 00:06:42.974
variations of the same scene, but taken 
under different conditions. 

90
00:06:42.974 --> 00:06:46.234
And then, we take the difference between 
them. 

91
00:06:46.234 --> 00:06:49.929
And look, 
the difference shows something that might 

92
00:06:49.929 --> 00:06:55.507
be very, very important for the doctor. 
And this is just an enhance that we're 

93
00:06:55.507 --> 00:07:00.796
going to talk about this, we enhance 
images for example by changing the grey 

94
00:07:00.796 --> 00:07:03.984
value distributions to make them more 
clear. 

95
00:07:03.984 --> 00:07:14.700
So, in this case, we take, we took I1, 
I2, and we basically did I1 - I2. 

96
00:07:14.700 --> 00:07:19.805
Sometimes, we take the absolute value if 
you don't, if we don't care about the 

97
00:07:19.805 --> 00:07:22.656
sign. 
And sometimes, we just basically shift 

98
00:07:22.656 --> 00:07:25.905
all the pixels so the negative value 
become zero. 

99
00:07:25.905 --> 00:07:31.160
once again, a very simple operation that 
can have tremendous value. 

100
00:07:31.160 --> 00:07:35.919
Some, we can also do logic operations in 
images. 

101
00:07:35.919 --> 00:07:42.299
So we can have basically, an image A and 
our image B, and do AUB. 

102
00:07:42.299 --> 00:07:46.877
So basically, we, 
let's say that this is all 255, the rest 

103
00:07:46.877 --> 00:07:50.351
is zero. 
B again, is all 255, so we get the union 

104
00:07:50.351 --> 00:07:53.456
of them. 
We get the interception of the pixels 

105
00:07:53.456 --> 00:07:58.779
that both objects have 255 or Y values. 
So again, think about any type of 

106
00:07:58.779 --> 00:08:04.102
operations that you could do with 
2-dimensional arrays in your computer. 

107
00:08:04.102 --> 00:08:10.016
You can start doing with images, now that 
we know that there are nothing else in 

108
00:08:10.016 --> 00:08:16.590
the computer than 2-dimensional arrays. 
We can also basically take the inverse of 

109
00:08:16.590 --> 00:08:22.742
an image, and the basic idea is that this 
remember was zero, very black. 

110
00:08:22.742 --> 00:08:28.020
The brightest point, 
255. 

111
00:08:28.020 --> 00:08:33.988
And then, we can actually invert it. 
We can make the zero go to 255, 

112
00:08:33.988 --> 00:08:38.600
and the 255 go to zero. 
It would be a map like this. 

113
00:08:38.600 --> 00:08:46.580
If this is the input and this is the 
output, 

114
00:08:46.580 --> 00:08:51.516
it would be something like this. 
A zero goes to 255, 255 goes to zero. 

115
00:08:51.516 --> 00:08:57.250
So we invert the image, and then we can, 
using that we can find some interesting 

116
00:08:57.250 --> 00:09:02.694
things and that might be easier to 
observe certain objects in the image in 

117
00:09:02.694 --> 00:09:06.541
the inverted image than it was in the 
original image. 

118
00:09:06.541 --> 00:09:12.276
Again, a simple operation with the arrays 
that we have representing our images in 

119
00:09:12.276 --> 00:09:16.450
the computer. 
We can also do different spatial. 

120
00:09:16.450 --> 00:09:19.546
So, this was adding images. 
So I take an image, 

121
00:09:19.546 --> 00:09:21.610
I take another image, 
I add it. 

122
00:09:21.610 --> 00:09:25.806
Or, I invert an image. 
But, we can do more sophisticated things. 

123
00:09:25.806 --> 00:09:30.966
We can actually take a pixel in the 
image, and replace it by the average of 

124
00:09:30.966 --> 00:09:34.612
its neighbors. 
Now remember, I have to define what our 

125
00:09:34.612 --> 00:09:35.644
neighbors, 
okay? 

126
00:09:35.644 --> 00:09:39.360
So, let's consider an eight neighborhood, 
as we talk before. 

127
00:09:41.080 --> 00:09:47.944
So I can take this pixel and replace it 
by the average of everybody, including 

128
00:09:47.944 --> 00:09:51.728
itself. 
So, we just sum all the pixel values. 

129
00:09:51.728 --> 00:09:56.920
We divide by nine and we replace that 
pixel by that result, 

130
00:09:56.920 --> 00:10:00.088
okay? 
And this is the original image. 

131
00:10:00.088 --> 00:10:04.136
We do that for every single one of the 
pixels. 

132
00:10:04.136 --> 00:10:08.611
So, we go to this pixel. 
I'm going to mark it here. 

133
00:10:08.611 --> 00:10:14.575
We go to it's eight neighborhood, and we 
replace the value of the pixel by the 

134
00:10:14.575 --> 00:10:18.321
pixels by the average of the pixels 
around it. 

135
00:10:18.321 --> 00:10:21.992
Then, we go to the next pixel, and we do 
the same. 

136
00:10:21.992 --> 00:10:29.574
Then, we do the overlapping. 
I'm going to just use a different color 

137
00:10:29.574 --> 00:10:34.439
here. 
So, this one will use this, this, this, 

138
00:10:34.439 --> 00:10:42.651
this, this, this, this, and this. 
While the blue one has used this one, 

139
00:10:42.651 --> 00:10:49.370
this one, this one. 
So it's owned eight neighborhood, 

140
00:10:49.370 --> 00:10:54.285
okay? So, there is overlapping because we 
are shifting one pixel at a time. 

141
00:10:54.285 --> 00:10:58.057
And then, we do that for every single 
pixel in the image. 

142
00:10:58.057 --> 00:11:00.885
You are very welcome to try this 
exercise. 

143
00:11:00.885 --> 00:11:05.127
And this is what we get. 
We removed the noise but we also get a 

144
00:11:05.127 --> 00:11:08.842
very blurry image. 
And we are going to see why that happens. 

145
00:11:08.842 --> 00:11:12.809
This is a very useful image processing 
application in some cases. 

146
00:11:12.809 --> 00:11:15.617
We're are actually going to learn how to 
do this. 

147
00:11:15.617 --> 00:11:20.561
So, we actually take neighbhor hoods, but 
they're sophisticated neighborhoods in 

148
00:11:20.561 --> 00:11:25.627
the sense that they understand when there 
is a big change and they don't go to the 

149
00:11:25.627 --> 00:11:28.679
other side. 
So we're going to basically, may be end 

150
00:11:28.679 --> 00:11:32.830
up averaging only these six, instead of 
always averaging nine values. 

151
00:11:32.830 --> 00:11:37.626
But this is a very simple operation. 
Every pixel replace it by a linear 

152
00:11:37.626 --> 00:11:42.400
combination, in this case an average of 
the pixels around it. 

153
00:11:42.400 --> 00:11:46.908
The other thing that can happen to 
images, is they can be transformed. 

154
00:11:46.908 --> 00:11:50.584
And we can do very different type of 
transformations. 

155
00:11:50.584 --> 00:11:54.330
We can, so, if this is my image, we can 
do nothing to it. 

156
00:11:54.330 --> 00:11:57.650
We can actually scale it just make it 
larger. 

157
00:11:57.650 --> 00:12:01.561
We can rotate, 
we can shift it or translate many, many 

158
00:12:01.561 --> 00:12:05.177
operations so we can take that array and 
move it. 

159
00:12:05.177 --> 00:12:10.565
We can take that array and rotate it. 
We can take that array and scale it. 

160
00:12:10.565 --> 00:12:16.837
Again, these are all 2-dimensional arrays 
in the computer so we can do any of these 

161
00:12:16.837 --> 00:12:20.453
operations. 
And here's what will happen, so we are 

162
00:12:20.453 --> 00:12:26.380
going to rotate the image. 
So, we take this T, we rotate the whole 

163
00:12:26.380 --> 00:12:29.530
image, but like we see some rotation of 
the T. 

164
00:12:29.530 --> 00:12:34.780
And here it says zoom in on the edge. 
And this illustrates again the issues 

165
00:12:34.780 --> 00:12:40.465
with discretization. 
So, when I have a straight line in a 

166
00:12:40.465 --> 00:12:46.410
discrete image, 
and this straight line goes here, it 

167
00:12:46.410 --> 00:12:52.493
looks very nice. 
But when the straight line, as it happens 

168
00:12:52.493 --> 00:12:55.799
here, goes around. 
Goes diagonal. 

169
00:12:55.799 --> 00:12:59.675
It gets kind of truncated like we see it 
here, 

170
00:12:59.675 --> 00:13:03.213
okay? 
And the more pixels we have, the less 

171
00:13:03.213 --> 00:13:08.100
we're going to notice this. 
But, now we're discussing just the 

172
00:13:08.100 --> 00:13:14.334
possibility of rotation, the possibility 
of different operations on images. 

173
00:13:14.334 --> 00:13:20.147
And here is the full example and I want 
you to basically look at, at this. 

174
00:13:20.147 --> 00:13:23.686
So this is my original image, 
we rotate it. 

175
00:13:23.686 --> 00:13:29.076
We can rotate it back. 
It looks perfect to us, although it has 

176
00:13:29.076 --> 00:13:33.771
some differences. 
This is the difference between these two 

177
00:13:33.771 --> 00:13:38.061
images, okay? 
So, if I were to write down what happened 

178
00:13:38.061 --> 00:13:42.380
here, I had an image. 
I rotated it. 

179
00:13:43.900 --> 00:13:50.240
I basically took this result, which is 
this. 

180
00:13:50.240 --> 00:13:57.746
And rotated it, in the opposite direction 
and obtained this, and then I subtracted 

181
00:13:57.746 --> 00:14:02.589
these two. 
Basically, I subtracted I from this one. 

182
00:14:02.589 --> 00:14:07.879
So this is I, this is the rotation, this 
is the ris, the inverse rotation to the 

183
00:14:07.879 --> 00:14:12.694
result and this is the subtraction. 
And the reason we have difference is 

184
00:14:12.694 --> 00:14:18.322
because of this sampling, discretization 
of this phase that we discuss in the 

185
00:14:18.322 --> 00:14:22.963
previous video. 
There's one more thing that we can do on 

186
00:14:22.963 --> 00:14:28.146
images and we're going to basically 
discuss this next week when we talk about 

187
00:14:28.146 --> 00:14:31.601
compression. 
We can actually do transforms to images. 

188
00:14:31.601 --> 00:14:36.982
And, those of you that already took the 
SP classes know that one of the transform 

189
00:14:36.982 --> 00:14:41.899
that we can do is a Fourier transform. 
So we have an image, we do a Fourier 

190
00:14:41.899 --> 00:14:45.686
transform of it. 
And that's going to be very important in 

191
00:14:45.686 --> 00:14:48.875
compression. 
We're not going to do Fourier, we're 

192
00:14:48.875 --> 00:14:52.330
going to do what's called the great 
cosine transform. 

193
00:14:52.330 --> 00:15:00.323
So, this is an image. 
And, we are doing a Fourier transform of 

194
00:15:00.323 --> 00:15:03.030
it. 
This is the Fourier transform. 

195
00:15:03.030 --> 00:15:09.520
And now you see noise so where it can 
filter in the Fourier domain. 

196
00:15:09.520 --> 00:15:15.573
And I haven't discussed any background in 
singular processing as Fourier. 

197
00:15:15.573 --> 00:15:21.072
We are not going to need a lot of it. 
I'm going to discuss at every week the 

198
00:15:21.072 --> 00:15:25.529
background that we need for that week, 
and we are not going to do a lot of 

199
00:15:25.529 --> 00:15:28.648
fourier. 
So if you haven't, I mean we can do a lot 

200
00:15:28.648 --> 00:15:32.086
of image processing without knowing 
Fourier transform. 

201
00:15:32.086 --> 00:15:36.606
So, if you haven't taken any of the SP 
class, don't worry. We're going to be 

202
00:15:36.606 --> 00:15:40.489
able to do everything but this slide 
without knowing fourier. 

203
00:15:40.489 --> 00:15:44.691
So, don't worry about that. 
But those of you that are familiar with 

204
00:15:44.691 --> 00:15:49.592
Fourier, and you will see that I can 
filter these, for example this filter and 

205
00:15:49.592 --> 00:15:51.630
then return. 
So I do a transform, 

206
00:15:51.630 --> 00:15:55.012
I filter and I come back and I get a very 
clean image. 

207
00:15:55.012 --> 00:15:59.272
So, once again, those of you that are 
familiar with, with basic signal 

208
00:15:59.272 --> 00:16:04.284
processing of Fourier transform, this is 
nothing else than a Fourier year filter. 

209
00:16:04.284 --> 00:16:09.170
For those of you that are not familiar 
the thing that I took the image, I took 

210
00:16:09.170 --> 00:16:14.495
that 2-dimensional array and I transform 
it into a different 2-dimensional array. 

211
00:16:14.495 --> 00:16:19.570
I did some manipulations there and I came 
back, and I got a very clean image back. 

212
00:16:19.570 --> 00:16:25.160
And, once again, this is only to 
illustrate that what we are doing here is 

213
00:16:25.160 --> 00:16:30.750
operating with 2-dimensional arrays. 
Where at every point, we have a value 

214
00:16:30.750 --> 00:16:36.723
that represents the brightness or the 
color in that particular location or in 

215
00:16:36.723 --> 00:16:40.092
that pixel. 
So, now we know we have images as 

216
00:16:40.092 --> 00:16:42.620
representing in the computer. 
Now, 

217
00:16:42.620 --> 00:16:47.910
we have seen already that the, that we 
want to have a lot of pixels, we want to 

218
00:16:47.910 --> 00:16:52.387
have a lot of grey values. 
And that's going to take a lot of space. 

219
00:16:52.387 --> 00:16:57.678
And we're going to see in the next videos 
for the next week about compression, 

220
00:16:57.678 --> 00:17:03.172
which is how do we deal with that large 
amount of data that we need to have very 

221
00:17:03.172 --> 00:17:05.140
good image quality. 
Thank you. 